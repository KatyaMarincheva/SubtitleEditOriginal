// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Main.cs" company="">
//   
// </copyright>
// <summary>
//   The main.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

namespace Nikse.SubtitleEdit.Forms
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Drawing;
    using System.Globalization;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Reflection;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Windows.Forms;

    using Nikse.SubtitleEdit.Controls;
    using Nikse.SubtitleEdit.Core;
    using Nikse.SubtitleEdit.Forms.DCinema;
    using Nikse.SubtitleEdit.Forms.Styles;
    using Nikse.SubtitleEdit.Logic;
    using Nikse.SubtitleEdit.Logic.BluRaySup;
    using Nikse.SubtitleEdit.Logic.ContainerFormats.MaterialExchangeFormat;
    using Nikse.SubtitleEdit.Logic.ContainerFormats.Matroska;
    using Nikse.SubtitleEdit.Logic.ContainerFormats.Mp4;
    using Nikse.SubtitleEdit.Logic.ContainerFormats.Mp4.Boxes;
    using Nikse.SubtitleEdit.Logic.Enums;
    using Nikse.SubtitleEdit.Logic.Forms;
    using Nikse.SubtitleEdit.Logic.Networking;
    using Nikse.SubtitleEdit.Logic.SubtitleFormats;
    using Nikse.SubtitleEdit.Logic.TransportStream;
    using Nikse.SubtitleEdit.Logic.VideoPlayers;
    using Nikse.SubtitleEdit.Logic.VobSub;
    using Nikse.SubtitleEdit.SeNetworkService;

    using Idx = Nikse.SubtitleEdit.Logic.VobSub.Idx;

    /// <summary>
    /// The main.
    /// </summary>
    public sealed partial class Main : Form
    {
        /// <summary>
        /// The tab control list view.
        /// </summary>
        private const int TabControlListView = 0;

        /// <summary>
        /// The tab control source view.
        /// </summary>
        private const int TabControlSourceView = 1;

        /// <summary>
        /// The end delay.
        /// </summary>
        private const double EndDelay = 0.05;

        /// <summary>
        /// The _sync undo.
        /// </summary>
        private static object _syncUndo = new object();

        /// <summary>
        /// The _audio waveform right click seconds.
        /// </summary>
        private double? _audioWaveformRightClickSeconds = null;

        /// <summary>
        /// The _auto continue delay count.
        /// </summary>
        private int _autoContinueDelayCount = -1;

        /// <summary>
        /// The _cancel word spell check.
        /// </summary>
        private bool _cancelWordSpellCheck = true;

        /// <summary>
        /// The _change alternate subtitle to string.
        /// </summary>
        private string _changeAlternateSubtitleToString = string.Empty;

        /// <summary>
        /// The _change subtitle to string.
        /// </summary>
        private string _changeSubtitleToString = string.Empty;

        /// <summary>
        /// The _check for updates helper.
        /// </summary>
        private CheckForUpdatesHelper _checkForUpdatesHelper;

        /// <summary>
        /// The _clear last find.
        /// </summary>
        private bool _clearLastFind;

        /// <summary>
        /// The _clear last find text.
        /// </summary>
        private string _clearLastFindText = string.Empty;

        /// <summary>
        /// The _clear last find type.
        /// </summary>
        private FindType _clearLastFindType = FindType.Normal;

        /// <summary>
        /// The _converted.
        /// </summary>
        private bool _converted;

        /// <summary>
        /// The _cut text.
        /// </summary>
        private string _cutText = string.Empty;

        /// <summary>
        /// The _drag and drop files.
        /// </summary>
        private string[] _dragAndDropFiles = null;

        /// <summary>
        /// The _drag and drop timer.
        /// </summary>
        private Timer _dragAndDropTimer = new Timer(); // to prevent locking windows explorer

        /// <summary>
        /// The _end seconds.
        /// </summary>
        private double _endSeconds = -1;

        /// <summary>
        /// The _file date time.
        /// </summary>
        private DateTime _fileDateTime;

        /// <summary>
        /// The _file name.
        /// </summary>
        private string _fileName;

        /// <summary>
        /// The _find helper.
        /// </summary>
        private FindReplaceDialogHelper _findHelper;

        /// <summary>
        /// The _google or microsoft translate.
        /// </summary>
        private GoogleOrMicrosoftTranslate _googleOrMicrosoftTranslate = null;

        /// <summary>
        /// The _is video controls undocked.
        /// </summary>
        private bool _isVideoControlsUndocked = false;

        /// <summary>
        /// The _language.
        /// </summary>
        private LanguageStructure.Main _language;

        /// <summary>
        /// The _language general.
        /// </summary>
        private LanguageStructure.General _languageGeneral;

        /// <summary>
        /// The _last do not prompt.
        /// </summary>
        private string _lastDoNotPrompt = string.Empty;

        /// <summary>
        /// The _last history ticks.
        /// </summary>
        private long _lastHistoryTicks;

        /// <summary>
        /// The _last progress percent.
        /// </summary>
        private int _lastProgressPercent = -1;

        /// <summary>
        /// The _last text key down ticks.
        /// </summary>
        private long _lastTextKeyDownTicks;

        /// <summary>
        /// The _list view alternate text ticks.
        /// </summary>
        private long _listViewAlternateTextTicks = -1;

        /// <summary>
        /// The _list view alternate text undo last.
        /// </summary>
        private string _listViewAlternateTextUndoLast;

        /// <summary>
        /// The _list view text ticks.
        /// </summary>
        private long _listViewTextTicks = -1;

        /// <summary>
        /// The _list view text undo index.
        /// </summary>
        private int _listViewTextUndoIndex = -1;

        /// <summary>
        /// The _list view text undo last.
        /// </summary>
        private string _listViewTextUndoLast;

        /// <summary>
        /// The _loading.
        /// </summary>
        private bool _loading = true;

        /// <summary>
        /// The _main adjust insert via end auto start and go to next.
        /// </summary>
        private Keys _mainAdjustInsertViaEndAutoStartAndGoToNext = Keys.None;

        /// <summary>
        /// The _main adjust selected 100 ms back.
        /// </summary>
        private Keys _mainAdjustSelected100MsBack = Keys.None;

        /// <summary>
        /// The _main adjust selected 100 ms forward.
        /// </summary>
        private Keys _mainAdjustSelected100MsForward = Keys.None;

        /// <summary>
        /// The _main adjust set end.
        /// </summary>
        private Keys _mainAdjustSetEnd = Keys.None;

        /// <summary>
        /// The _main adjust set end and goto next.
        /// </summary>
        private Keys _mainAdjustSetEndAndGotoNext = Keys.None;

        /// <summary>
        /// The _main adjust set end and offset the rest.
        /// </summary>
        private Keys _mainAdjustSetEndAndOffsetTheRest = Keys.None;

        /// <summary>
        /// The _main adjust set end and offset the rest and go to next.
        /// </summary>
        private Keys _mainAdjustSetEndAndOffsetTheRestAndGoToNext = Keys.None;

        /// <summary>
        /// The _main adjust set end next start and go to next.
        /// </summary>
        private Keys _mainAdjustSetEndNextStartAndGoToNext = Keys.None;

        /// <summary>
        /// The _main adjust set start.
        /// </summary>
        private Keys _mainAdjustSetStart = Keys.None;

        /// <summary>
        /// The _main adjust set start and offset the rest.
        /// </summary>
        private Keys _mainAdjustSetStartAndOffsetTheRest = Keys.None;

        /// <summary>
        /// The _main adjust set start auto duration and go to next.
        /// </summary>
        private Keys _mainAdjustSetStartAutoDurationAndGoToNext = Keys.None;

        /// <summary>
        /// The _main adjust set start keep duration.
        /// </summary>
        private Keys _mainAdjustSetStartKeepDuration = Keys.None;

        /// <summary>
        /// The _main adjust start down end up and go to next.
        /// </summary>
        private Keys _mainAdjustStartDownEndUpAndGoToNext = Keys.None;

        /// <summary>
        /// The _main adjust start down end up and go to next paragraph.
        /// </summary>
        private Paragraph _mainAdjustStartDownEndUpAndGoToNextParagraph;

        /// <summary>
        /// The _main create insert sub at video pos.
        /// </summary>
        private Keys _mainCreateInsertSubAtVideoPos = Keys.None;

        /// <summary>
        /// The _main create play from just before.
        /// </summary>
        private Keys _mainCreatePlayFromJustBefore = Keys.None;

        /// <summary>
        /// The _main create set end.
        /// </summary>
        private Keys _mainCreateSetEnd = Keys.None;

        /// <summary>
        /// The _main create set end add new and go to new.
        /// </summary>
        private Keys _mainCreateSetEndAddNewAndGoToNew = Keys.None;

        /// <summary>
        /// The _main create set start.
        /// </summary>
        private Keys _mainCreateSetStart = Keys.None;

        /// <summary>
        /// The _main create start down end up.
        /// </summary>
        private Keys _mainCreateStartDownEndUp = Keys.None;

        /// <summary>
        /// The _main create start down end up paragraph.
        /// </summary>
        private Paragraph _mainCreateStartDownEndUpParagraph;

        /// <summary>
        /// The _main edit reverse start and ending for rtl.
        /// </summary>
        private Keys _mainEditReverseStartAndEndingForRTL = Keys.None;

        /// <summary>
        /// The _main general file save all.
        /// </summary>
        private Keys _mainGeneralFileSaveAll = Keys.None;

        /// <summary>
        /// The _main general go to end of current subtitle.
        /// </summary>
        private Keys _mainGeneralGoToEndOfCurrentSubtitle = Keys.None;

        /// <summary>
        /// The _main general go to first empty line.
        /// </summary>
        private Keys _mainGeneralGoToFirstEmptyLine = Keys.None;

        /// <summary>
        /// The _main general go to first selected line.
        /// </summary>
        private Keys _mainGeneralGoToFirstSelectedLine = Keys.None;

        /// <summary>
        /// The _main general go to next subtitle.
        /// </summary>
        private Keys _mainGeneralGoToNextSubtitle = Keys.None;

        /// <summary>
        /// The _main general go to prev subtitle.
        /// </summary>
        private Keys _mainGeneralGoToPrevSubtitle = Keys.None;

        /// <summary>
        /// The _main general go to start of current subtitle.
        /// </summary>
        private Keys _mainGeneralGoToStartOfCurrentSubtitle = Keys.None;

        /// <summary>
        /// The _main general merge selected lines.
        /// </summary>
        private Keys _mainGeneralMergeSelectedLines = Keys.None;

        /// <summary>
        /// The _main general merge selected lines only first text.
        /// </summary>
        private Keys _mainGeneralMergeSelectedLinesOnlyFirstText = Keys.None;

        /// <summary>
        /// The _main general merge translation and original.
        /// </summary>
        private Keys _mainGeneralMergeTranslationAndOriginal = Keys.None;

        /// <summary>
        /// The _main general switch translation and original.
        /// </summary>
        private Keys _mainGeneralSwitchTranslationAndOriginal = Keys.None;

        /// <summary>
        /// The _main general toggle translation mode.
        /// </summary>
        private Keys _mainGeneralToggleTranslationMode = Keys.None;

        /// <summary>
        /// The _main insert after.
        /// </summary>
        private Keys _mainInsertAfter = Keys.None;

        /// <summary>
        /// The _main insert before.
        /// </summary>
        private Keys _mainInsertBefore = Keys.None;

        /// <summary>
        /// The _main list view auto duration.
        /// </summary>
        private Keys _mainListViewAutoDuration = Keys.None;

        /// <summary>
        /// The _main list view copy text.
        /// </summary>
        private Keys _mainListViewCopyText = Keys.None;

        /// <summary>
        /// The _main list view focus waveform.
        /// </summary>
        private Keys _mainListViewFocusWaveform = Keys.None;

        /// <summary>
        /// The _main list view go to next error.
        /// </summary>
        private Keys _mainListViewGoToNextError = Keys.None;

        /// <summary>
        /// The _main list view toggle dashes.
        /// </summary>
        private Keys _mainListViewToggleDashes = Keys.None;

        /// <summary>
        /// The _main merge dialog.
        /// </summary>
        private Keys _mainMergeDialog = Keys.None;

        /// <summary>
        /// The _main text box auto break.
        /// </summary>
        private Keys _mainTextBoxAutoBreak = Keys.None;

        /// <summary>
        /// The _main text box insert after.
        /// </summary>
        private Keys _mainTextBoxInsertAfter = Keys.None;

        /// <summary>
        /// The _main text box move first word from next up.
        /// </summary>
        private Keys _mainTextBoxMoveFirstWordFromNextUp = Keys.None;

        /// <summary>
        /// The _main text box move last word down.
        /// </summary>
        private Keys _mainTextBoxMoveLastWordDown = Keys.None;

        /// <summary>
        /// The _main text box selection to lower.
        /// </summary>
        private Keys _mainTextBoxSelectionToLower = Keys.None;

        /// <summary>
        /// The _main text box selection to upper.
        /// </summary>
        private Keys _mainTextBoxSelectionToUpper = Keys.None;

        /// <summary>
        /// The _main text box split at cursor.
        /// </summary>
        private Keys _mainTextBoxSplitAtCursor = Keys.None;

        /// <summary>
        /// The _main text box toggle auto duration.
        /// </summary>
        private Keys _mainTextBoxToggleAutoDuration = Keys.None;

        /// <summary>
        /// The _main text box unbreak.
        /// </summary>
        private Keys _mainTextBoxUnbreak = Keys.None;

        /// <summary>
        /// The _main toggle focus.
        /// </summary>
        private Keys _mainToggleFocus = Keys.None;

        /// <summary>
        /// The _main tools auto duration.
        /// </summary>
        private Keys _mainToolsAutoDuration = Keys.None;

        /// <summary>
        /// The _main tools beamer.
        /// </summary>
        private Keys _mainToolsBeamer = Keys.None;

        /// <summary>
        /// The _main translate custom search 1.
        /// </summary>
        private Keys _mainTranslateCustomSearch1 = Keys.None;

        /// <summary>
        /// The _main translate custom search 2.
        /// </summary>
        private Keys _mainTranslateCustomSearch2 = Keys.None;

        /// <summary>
        /// The _main translate custom search 3.
        /// </summary>
        private Keys _mainTranslateCustomSearch3 = Keys.None;

        /// <summary>
        /// The _main translate custom search 4.
        /// </summary>
        private Keys _mainTranslateCustomSearch4 = Keys.None;

        /// <summary>
        /// The _main translate custom search 5.
        /// </summary>
        private Keys _mainTranslateCustomSearch5 = Keys.None;

        /// <summary>
        /// The _main translate custom search 6.
        /// </summary>
        private Keys _mainTranslateCustomSearch6 = Keys.None;

        /// <summary>
        /// The _main video fullscreen.
        /// </summary>
        private Keys _mainVideoFullscreen = Keys.None;

        /// <summary>
        /// The _make history paused.
        /// </summary>
        private bool _makeHistoryPaused = false;

        /// <summary>
        /// The _network chat.
        /// </summary>
        private NetworkChat _networkChat = null;

        /// <summary>
        /// The _network session.
        /// </summary>
        private NikseWebServiceSession _networkSession;

        /// <summary>
        /// The _old selected paragraph.
        /// </summary>
        private Paragraph _oldSelectedParagraph;

        /// <summary>
        /// The _old subtitle format.
        /// </summary>
        private SubtitleFormat _oldSubtitleFormat;

        /// <summary>
        /// The _open file dialog on.
        /// </summary>
        private bool _openFileDialogOn = false;

        /// <summary>
        /// The _repeat count.
        /// </summary>
        private int _repeatCount = -1;

        /// <summary>
        /// The _replace start line index.
        /// </summary>
        private int _replaceStartLineIndex;

        /// <summary>
        /// The _reset video.
        /// </summary>
        private bool _resetVideo = true;

        /// <summary>
        /// The _selected indices.
        /// </summary>
        private List<int> _selectedIndices;

        /// <summary>
        /// The _show earlier or later.
        /// </summary>
        private ShowEarlierLater _showEarlierOrLater = null;

        /// <summary>
        /// The _source view change.
        /// </summary>
        private bool _sourceViewChange;

        /// <summary>
        /// The _spell check form.
        /// </summary>
        private SpellCheck _spellCheckForm;

        /// <summary>
        /// The _split dual sami.
        /// </summary>
        private bool _splitDualSami = false;

        /// <summary>
        /// The _status log.
        /// </summary>
        private StringBuilder _statusLog = new StringBuilder();

        /// <summary>
        /// The _subtitle.
        /// </summary>
        private Subtitle _subtitle = new Subtitle();

        /// <summary>
        /// The _subtitle alternate.
        /// </summary>
        private Subtitle _subtitleAlternate = new Subtitle();

        /// <summary>
        /// The _subtitle alternate file name.
        /// </summary>
        private string _subtitleAlternateFileName;

        /// <summary>
        /// The _subtitle list view index.
        /// </summary>
        private int _subtitleListViewIndex = -1;

        /// <summary>
        /// The _text auto save.
        /// </summary>
        private string _textAutoSave;

        /// <summary>
        /// The _text auto save original.
        /// </summary>
        private string _textAutoSaveOriginal;

        /// <summary>
        /// The _timer auto save.
        /// </summary>
        private Timer _timerAutoSave = new Timer();

        /// <summary>
        /// The _timer check for updates.
        /// </summary>
        private Timer _timerCheckForUpdates;

        /// <summary>
        /// The _timer clear status.
        /// </summary>
        private Timer _timerClearStatus = new Timer();

        /// <summary>
        /// The _timer do syntax coloring.
        /// </summary>
        private Timer _timerDoSyntaxColoring = new Timer();

        /// <summary>
        /// The _title.
        /// </summary>
        private string _title;

        /// <summary>
        /// The _toggle video dock undock.
        /// </summary>
        private Keys _toggleVideoDockUndock = Keys.None;

        /// <summary>
        /// The _undo index.
        /// </summary>
        private int _undoIndex = -1;

        /// <summary>
        /// The _video 1000 ms left.
        /// </summary>
        private Keys _video1000MsLeft = Keys.None;

        /// <summary>
        /// The _video 1000 ms right.
        /// </summary>
        private Keys _video1000MsRight = Keys.None;

        /// <summary>
        /// The _video 100 ms left.
        /// </summary>
        private Keys _video100MsLeft = Keys.None;

        /// <summary>
        /// The _video 100 ms right.
        /// </summary>
        private Keys _video100MsRight = Keys.None;

        /// <summary>
        /// The _video 1 frame left.
        /// </summary>
        private Keys _video1FrameLeft = Keys.None;

        /// <summary>
        /// The _video 1 frame right.
        /// </summary>
        private Keys _video1FrameRight = Keys.None;

        /// <summary>
        /// The _video 500 ms left.
        /// </summary>
        private Keys _video500MsLeft = Keys.None;

        /// <summary>
        /// The _video 500 ms right.
        /// </summary>
        private Keys _video500MsRight = Keys.None;

        /// <summary>
        /// The _video audio track number.
        /// </summary>
        private int _videoAudioTrackNumber = -1;

        /// <summary>
        /// The _video controls undocked.
        /// </summary>
        private VideoControlsUndocked _videoControlsUndocked = null;

        /// <summary>
        /// The _video file name.
        /// </summary>
        private string _videoFileName;

        /// <summary>
        /// The _video info.
        /// </summary>
        private VideoInfo _videoInfo = null;

        /// <summary>
        /// The _video loaded go to sub pos and pause.
        /// </summary>
        private bool _videoLoadedGoToSubPosAndPause = false;

        /// <summary>
        /// The _video pause.
        /// </summary>
        private Keys _videoPause = Keys.None;

        /// <summary>
        /// The _video player undocked.
        /// </summary>
        private VideoPlayerUndocked _videoPlayerUndocked = null;

        /// <summary>
        /// The _video play first selected.
        /// </summary>
        private Keys _videoPlayFirstSelected = Keys.None;

        /// <summary>
        /// The _video play pause toggle.
        /// </summary>
        private Keys _videoPlayPauseToggle = Keys.None;

        /// <summary>
        /// The _waveform add text at here.
        /// </summary>
        private Keys _waveformAddTextAtHere = Keys.None;

        /// <summary>
        /// The _waveform focus list view.
        /// </summary>
        private Keys _waveformFocusListView = Keys.None;

        /// <summary>
        /// The _waveform play selection.
        /// </summary>
        private Keys _waveformPlaySelection = Keys.None;

        /// <summary>
        /// The _waveform search silence back.
        /// </summary>
        private Keys _waveformSearchSilenceBack = Keys.None;

        /// <summary>
        /// The _waveform search silence forward.
        /// </summary>
        private Keys _waveformSearchSilenceForward = Keys.None;

        /// <summary>
        /// The _waveform undocked.
        /// </summary>
        private WaveformUndocked _waveformUndocked = null;

        /// <summary>
        /// The _waveform vertical zoom.
        /// </summary>
        private Keys _waveformVerticalZoom = Keys.None;

        /// <summary>
        /// The _waveform vertical zoom out.
        /// </summary>
        private Keys _waveformVerticalZoomOut = Keys.None;

        /// <summary>
        /// The _waveform zoom in.
        /// </summary>
        private Keys _waveformZoomIn = Keys.None;

        /// <summary>
        /// The _waveform zoom out.
        /// </summary>
        private Keys _waveformZoomOut = Keys.None;

        /// <summary>
        /// Initializes a new instance of the <see cref="Main"/> class.
        /// </summary>
        public Main()
        {
            try
            {
                this.InitializeComponent();
                this.Icon = Properties.Resources.SubtitleEditFormIcon;

                this.textBoxListViewTextAlternate.Visible = false;
                this.labelAlternateText.Visible = false;
                this.labelAlternateCharactersPerSecond.Visible = false;
                this.labelTextAlternateLineLengths.Visible = false;
                this.labelAlternateSingleLine.Visible = false;
                this.labelTextAlternateLineTotal.Visible = false;

                this.SetLanguage(Configuration.Settings.General.Language);
                this.toolStripStatusNetworking.Visible = false;
                this.labelTextLineLengths.Text = string.Empty;
                this.labelCharactersPerSecond.Text = string.Empty;
                this.labelTextLineTotal.Text = string.Empty;
                this.labelStartTimeWarning.Text = string.Empty;
                this.labelDurationWarning.Text = string.Empty;
                this.labelVideoInfo.Text = string.Empty;
                this.labelSingleLine.Text = string.Empty;
                this.Text = this.Title;
                this.timeUpDownStartTime.TimeCode = new TimeCode(0, 0, 0, 0);
                this.checkBoxAutoRepeatOn.Checked = Configuration.Settings.General.AutoRepeatOn;
                this.comboBoxAutoRepeat.SelectedIndex = Configuration.Settings.General.AutoRepeatCount;
                this.checkBoxAutoContinue.Checked = Configuration.Settings.General.AutoContinueOn;
                this.checkBoxSyncListViewWithVideoWhilePlaying.Checked = Configuration.Settings.General.SyncListViewWithVideoWhilePlaying;

                this.SetFormatToSubRip();

                if (Configuration.Settings.General.DefaultSubtitleFormat != "SubRip")
                {
                    this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                }

                this.comboBoxEncoding.Items.Clear();
                this.comboBoxEncoding.Items.Add(Encoding.UTF8.EncodingName);
                foreach (var ei in Encoding.GetEncodings())
                {
                    if (ei.Name != Encoding.UTF8.BodyName && ei.CodePage >= 949 && !ei.DisplayName.Contains("EBCDIC") && ei.CodePage != 1047)
                    {
                        // Configuration.Settings.General.EncodingMinimumCodePage)
                        this.comboBoxEncoding.Items.Add(ei.CodePage + ": " + ei.DisplayName);
                    }
                }

                this.SetEncoding(Configuration.Settings.General.DefaultEncoding);

                this.toolStripComboBoxFrameRate.Items.Add(23.976.ToString());
                this.toolStripComboBoxFrameRate.Items.Add(24.0.ToString());
                this.toolStripComboBoxFrameRate.Items.Add(25.0.ToString());
                this.toolStripComboBoxFrameRate.Items.Add(29.97.ToString());
                this.toolStripComboBoxFrameRate.Items.Add(30.ToString());
                this.toolStripComboBoxFrameRate.Text = Configuration.Settings.General.DefaultFrameRate.ToString();

                this.UpdateRecentFilesUI();
                this.InitializeToolbar();
                Utilities.InitializeSubtitleFont(this.textBoxSource);
                Utilities.InitializeSubtitleFont(this.textBoxListViewText);
                Utilities.InitializeSubtitleFont(this.textBoxListViewTextAlternate);
                Utilities.InitializeSubtitleFont(this.SubtitleListview1);

                if (Configuration.Settings.General.CenterSubtitleInTextBox)
                {
                    this.textBoxListViewText.TextAlign = HorizontalAlignment.Center;
                    this.textBoxListViewTextAlternate.TextAlign = HorizontalAlignment.Center;
                }

                this.tabControlSubtitle.SelectTab(TabControlSourceView); // AC
                this.ShowSourceLineNumber(); // AC
                this.tabControlSubtitle.SelectTab(TabControlListView); // AC
                if (Configuration.Settings.General.StartInSourceView)
                {
                    this.tabControlSubtitle.SelectTab(TabControlSourceView);
                }

                this.audioVisualizer.Visible = Configuration.Settings.General.ShowAudioVisualizer;
                this.audioVisualizer.ShowWaveform = Configuration.Settings.General.ShowWaveform;
                this.audioVisualizer.ShowSpectrogram = Configuration.Settings.General.ShowSpectrogram;
                this.panelWaveformControls.Visible = Configuration.Settings.General.ShowAudioVisualizer;
                this.trackBarWaveformPosition.Visible = Configuration.Settings.General.ShowAudioVisualizer;
                this.toolStripButtonToggleWaveform.Checked = Configuration.Settings.General.ShowAudioVisualizer;
                this.toolStripButtonToggleVideo.Checked = Configuration.Settings.General.ShowVideoPlayer;

                if (Configuration.Settings.General.UseTimeFormatHHMMSSFF)
                {
                    this.numericUpDownDuration.DecimalPlaces = 2;
                    this.numericUpDownDuration.Increment = (decimal)0.01;
                    this.toolStripSeparatorFrameRate.Visible = true;
                    this.toolStripLabelFrameRate.Visible = true;
                    this.toolStripComboBoxFrameRate.Visible = true;
                    this.toolStripButtonGetFrameRate.Visible = true;
                }

                this._timerClearStatus.Interval = Configuration.Settings.General.ClearStatusBarAfterSeconds * 1000;
                this._timerClearStatus.Tick += this.TimerClearStatus_Tick;

                var fileName = string.Empty;
                var args = Environment.GetCommandLineArgs();
                int srcLineNumber = -1;
                if (args.Length >= 2 && args[1].Equals("/convert", StringComparison.OrdinalIgnoreCase))
                {
                    CommandLineConvert.Convert(this.Title, args);
                    return;
                }

                if (args.Length >= 2)
                {
                    fileName = args[1];
                    if (args.Length > 2 && args[2].StartsWith("/srcline:", StringComparison.OrdinalIgnoreCase))
                    {
                        string srcLine = args[2].Remove(0, 9);
                        if (!int.TryParse(srcLine, out srcLineNumber))
                        {
                            srcLineNumber = -1;
                        }
                    }
                }

                if (fileName.Length > 0 && File.Exists(fileName))
                {
                    this.OpenSubtitle(fileName, null);
                    if (srcLineNumber >= 0 && this.GetCurrentSubtitleFormat().GetType() == typeof(SubRip) && srcLineNumber < this.textBoxSource.Lines.Length)
                    {
                        int pos = 0;
                        for (int i = 0; i < srcLineNumber; i++)
                        {
                            pos += this.textBoxSource.Lines[i].Length;
                        }

                        if (pos + 35 < this.textBoxSource.TextLength)
                        {
                            pos += 35;
                        }

                        string s = this.textBoxSource.Text.Substring(0, pos);
                        int lastTimeCode = s.LastIndexOf(" --> ", StringComparison.Ordinal); // 00:02:26,407 --> 00:02:31,356
                        if (lastTimeCode > 14 && lastTimeCode + 16 >= s.Length)
                        {
                            s = s.Substring(0, lastTimeCode - 5);
                            lastTimeCode = s.LastIndexOf(" --> ", StringComparison.Ordinal);
                        }

                        if (lastTimeCode > 14 && lastTimeCode + 16 < s.Length)
                        {
                            string tc = s.Substring(lastTimeCode - 13, 30).Trim();
                            int index = 0;
                            foreach (var p in this._subtitle.Paragraphs)
                            {
                                if (tc == p.StartTime + " --> " + p.EndTime)
                                {
                                    this.SubtitleListview1.SelectNone();
                                    this.SubtitleListview1.Items[0].Selected = false;
                                    this.SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                                    break;
                                }

                                index++;
                            }
                        }
                    }
                }
                else if (Configuration.Settings.General.StartLoadLastFile)
                {
                    if (Configuration.Settings.RecentFiles.Files.Count > 0)
                    {
                        fileName = Configuration.Settings.RecentFiles.Files[0].FileName;
                        if (File.Exists(fileName))
                        {
                            this.OpenSubtitle(fileName, null, Configuration.Settings.RecentFiles.Files[0].VideoFileName, Configuration.Settings.RecentFiles.Files[0].OriginalFileName);
                            this.SetRecentIndices(fileName);
                            this.GotoSubPosAndPause();
                        }
                    }
                }

                this.labelAutoDuration.Visible = false;
                this.mediaPlayer.SubtitleText = string.Empty;

                // comboBoxAutoRepeat.SelectedIndex = 2;
                this.comboBoxAutoContinue.SelectedIndex = 2;
                this.timeUpDownVideoPosition.TimeCode = new TimeCode(0, 0, 0, 0);
                this.timeUpDownVideoPositionAdjust.TimeCode = new TimeCode(0, 0, 0, 0);
                this.timeUpDownVideoPosition.TimeCodeChanged += this.VideoPositionChanged;
                this.timeUpDownVideoPositionAdjust.TimeCodeChanged += this.VideoPositionChanged;
                this.timeUpDownVideoPosition.Enabled = false;
                this.timeUpDownVideoPositionAdjust.Enabled = false;

                switch (Configuration.Settings.VideoControls.LastActiveTab)
                {
                    case "Translate":
                        this.tabControlButtons.SelectedIndex = 0;
                        break;
                    case "Create":
                        this.tabControlButtons.SelectedIndex = 1;
                        break;
                    case "Adjust":
                        this.tabControlButtons.SelectedIndex = 2;
                        break;
                }

                this.tabControl1_SelectedIndexChanged(null, null);

                this.buttonCustomUrl1.Text = Configuration.Settings.VideoControls.CustomSearchText1;
                this.buttonCustomUrl1.Visible = Configuration.Settings.VideoControls.CustomSearchUrl1.Length > 1;

                this.buttonCustomUrl2.Text = Configuration.Settings.VideoControls.CustomSearchText2;
                this.buttonCustomUrl2.Visible = Configuration.Settings.VideoControls.CustomSearchUrl2.Length > 1;

                // Initialize events etc. for audio waveform
                this.audioVisualizer.OnDoubleClickNonParagraph += this.AudioWaveform_OnDoubleClickNonParagraph;
                this.audioVisualizer.OnPositionSelected += this.AudioWaveform_OnPositionSelected;
                this.audioVisualizer.OnTimeChanged += this.AudioWaveform_OnTimeChanged; // start and/or end position of paragraph changed
                this.audioVisualizer.OnNewSelectionRightClicked += this.AudioWaveform_OnNewSelectionRightClicked;
                this.audioVisualizer.OnParagraphRightClicked += this.AudioWaveform_OnParagraphRightClicked;
                this.audioVisualizer.OnNonParagraphRightClicked += this.AudioWaveform_OnNonParagraphRightClicked;
                this.audioVisualizer.OnSingleClick += this.AudioWaveform_OnSingleClick;
                this.audioVisualizer.OnPause += this.AudioWaveform_OnPause;
                this.audioVisualizer.OnTimeChangedAndOffsetRest += this.AudioWaveform_OnTimeChangedAndOffsetRest;
                this.audioVisualizer.OnZoomedChanged += this.AudioWaveform_OnZoomedChanged;
                this.audioVisualizer.InsertAtVideoPosition += this.audioVisualizer_InsertAtVideoPosition;
                this.audioVisualizer.DrawGridLines = Configuration.Settings.VideoControls.WaveformDrawGrid;
                this.audioVisualizer.GridColor = Configuration.Settings.VideoControls.WaveformGridColor;
                this.audioVisualizer.SelectedColor = Configuration.Settings.VideoControls.WaveformSelectedColor;
                this.audioVisualizer.Color = Configuration.Settings.VideoControls.WaveformColor;
                this.audioVisualizer.BackgroundColor = Configuration.Settings.VideoControls.WaveformBackgroundColor;
                this.audioVisualizer.TextColor = Configuration.Settings.VideoControls.WaveformTextColor;
                this.audioVisualizer.TextSize = Configuration.Settings.VideoControls.WaveformTextSize;
                this.audioVisualizer.TextBold = Configuration.Settings.VideoControls.WaveformTextBold;
                this.audioVisualizer.MouseWheelScrollUpIsForward = Configuration.Settings.VideoControls.WaveformMouseWheelScrollUpIsForward;
                this.audioVisualizer.AllowOverlap = Configuration.Settings.VideoControls.WaveformAllowOverlap;
                this.audioVisualizer.ClosenessForBorderSelection = Configuration.Settings.VideoControls.WaveformBorderHitMs;

                for (double zoomCounter = AudioVisualizer.ZoomMinimum; zoomCounter <= AudioVisualizer.ZoomMaximum + 0.001; zoomCounter += 0.1)
                {
                    int percent = (int)Math.Round(zoomCounter * 100);
                    ComboBoxZoomItem item = new ComboBoxZoomItem { Text = percent + "%", ZoomFactor = zoomCounter };
                    this.toolStripComboBoxWaveform.Items.Add(item);
                    if (percent == 100)
                    {
                        this.toolStripComboBoxWaveform.SelectedIndex = this.toolStripComboBoxWaveform.Items.Count - 1;
                    }
                }

                this.toolStripComboBoxWaveform.SelectedIndexChanged += this.toolStripComboBoxWaveform_SelectedIndexChanged;

                this.FixLargeFonts();

                if (Configuration.Settings.General.RightToLeftMode)
                {
                    this.ToolStripMenuItemRightToLeftModeClick(null, null);
                }
            }
            catch (Exception exception)
            {
                this.Cursor = Cursors.Default;
                MessageBox.Show(exception.Message + Environment.NewLine + exception.StackTrace);
            }
        }

        /// <summary>
        /// Gets or sets the video file name.
        /// </summary>
        public string VideoFileName
        {
            get
            {
                return this._videoFileName;
            }

            set
            {
                this._videoFileName = value;
            }
        }

        /// <summary>
        /// Gets a value indicating whether auto repeat continue on.
        /// </summary>
        private bool AutoRepeatContinueOn
        {
            get
            {
                return this.tabControlButtons.SelectedIndex == 0;
            }
        }

        /// <summary>
        /// Gets the title.
        /// </summary>
        public string Title
        {
            get
            {
                if (this._title == null)
                {
                    var versionInfo = Utilities.AssemblyVersion.Split('.');
                    this._title = string.Format("{0} {1}.{2}.{3}", this._languageGeneral.Title, versionInfo[0], versionInfo[1], versionInfo[2]);
                }

                return this._title;
            }
        }

        /// <summary>
        /// Gets the first selected index.
        /// </summary>
        private int FirstSelectedIndex
        {
            get
            {
                if (this.SubtitleListview1.SelectedItems.Count == 0)
                {
                    return -1;
                }

                return this.SubtitleListview1.SelectedItems[0].Index;
            }
        }

        /// <summary>
        /// Gets the first visible index.
        /// </summary>
        private int FirstVisibleIndex
        {
            get
            {
                if (this.SubtitleListview1.Items.Count == 0 || this.SubtitleListview1.TopItem == null)
                {
                    return -1;
                }

                return this.SubtitleListview1.TopItem.Index;
            }
        }

        /// <summary>
        /// Gets a value indicating whether is subtitle loaded.
        /// </summary>
        private bool IsSubtitleLoaded
        {
            get
            {
                if (this._subtitle == null || this._subtitle.Paragraphs.Count == 0)
                {
                    return false;
                }

                if (this._subtitle.Paragraphs.Count == 1 && string.IsNullOrEmpty(this._subtitle.Paragraphs[0].Text))
                {
                    return false;
                }

                return true;
            }
        }

        /// <summary>
        /// Gets the current frame rate.
        /// </summary>
        public double CurrentFrameRate
        {
            get
            {
                double f;
                if (double.TryParse(this.toolStripComboBoxFrameRate.Text, out f))
                {
                    return f;
                }

                return Configuration.Settings.General.DefaultFrameRate;
            }
        }

        /// <summary>
        /// Gets a value indicating whether is frames relevant.
        /// </summary>
        private bool IsFramesRelevant
        {
            get
            {
                return this._subtitle.WasLoadedWithFrameNumbers || this.GetCurrentSubtitleFormat().IsFrameBased;
            }
        }

        /// <summary>
        /// Gets a value indicating whether is unicode.
        /// </summary>
        private bool IsUnicode
        {
            get
            {
                var enc = this.GetCurrentEncoding();
                return enc == Encoding.UTF8 || enc == Encoding.Unicode || enc == Encoding.UTF7 || enc == Encoding.UTF32 || enc == Encoding.BigEndianUnicode;
            }
        }

        /// <summary>
        /// The set current format.
        /// </summary>
        /// <param name="format">
        /// The format.
        /// </param>
        public void SetCurrentFormat(SubtitleFormat format)
        {
            if (format.IsVobSubIndexFile)
            {
                this.comboBoxSubtitleFormats.Items.Clear();
                this.comboBoxSubtitleFormats.Items.Add(format.FriendlyName);

                this.SubtitleListview1.HideNonVobSubColumns();
            }
            else if (this.comboBoxSubtitleFormats.Items.Count == 1)
            {
                this.SetFormatToSubRip();
                this.SubtitleListview1.ShowAllColumns();
            }

            int i = 0;
            foreach (object obj in this.comboBoxSubtitleFormats.Items)
            {
                if (obj.ToString() == format.FriendlyName)
                {
                    this.comboBoxSubtitleFormats.SelectedIndex = i;
                    return;
                }

                i++;
            }
        }

        /// <summary>
        /// The set current format.
        /// </summary>
        /// <param name="subtitleFormatName">
        /// The subtitle format name.
        /// </param>
        public void SetCurrentFormat(string subtitleFormatName)
        {
            foreach (var format in SubtitleFormat.AllSubtitleFormats)
            {
                if (format.Name.Trim().Equals(subtitleFormatName.Trim(), StringComparison.OrdinalIgnoreCase) || format.FriendlyName.Trim().Equals(subtitleFormatName.Trim(), StringComparison.OrdinalIgnoreCase))
                {
                    this.SetCurrentFormat(format);
                    return;
                }
            }

            this.SetCurrentFormat(new SubRip());
        }

        /// <summary>
        /// The on load.
        /// </summary>
        /// <param name="e">
        /// The e.
        /// </param>
        protected override void OnLoad(EventArgs e)
        {
            using (var graphics = this.CreateGraphics())
            {
                // avoid weird looking layout for high DPI
                if (graphics.DpiX > 120)
                {
                    this.Font = new Font(this.Font.FontFamily, (float)(this.Font.Size * graphics.DpiX / 96.0));

                    this.numericUpDownDuration.Left = this.timeUpDownStartTime.Right + 15;
                    this.numericUpDownDuration.Width += 5;
                    this.labelDuration.Left = this.numericUpDownDuration.Left - 3;
                    this.labelAutoDuration.Left = this.labelDuration.Left - (this.labelAutoDuration.Width - 5);
                }
            }

            base.OnLoad(e);
        }

        /// <summary>
        /// The audio visualizer_ insert at video position.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void audioVisualizer_InsertAtVideoPosition(object sender, EventArgs e)
        {
            this.InsertNewTextAtVideoPosition();
        }

        /// <summary>
        /// The timer clear status_ tick.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void TimerClearStatus_Tick(object sender, EventArgs e)
        {
            this.ShowStatus(string.Empty);
        }

        /// <summary>
        /// The set encoding.
        /// </summary>
        /// <param name="encoding">
        /// The encoding.
        /// </param>
        private void SetEncoding(Encoding encoding)
        {
            if (encoding.BodyName == Encoding.UTF8.BodyName)
            {
                this.comboBoxEncoding.SelectedIndex = 0;
                return;
            }

            int i = 0;
            foreach (string s in this.comboBoxEncoding.Items)
            {
                if (s == encoding.CodePage + ": " + encoding.EncodingName)
                {
                    this.comboBoxEncoding.SelectedIndex = i;
                    return;
                }

                i++;
            }

            this.comboBoxEncoding.SelectedIndex = 0;
        }

        /// <summary>
        /// The set encoding.
        /// </summary>
        /// <param name="encodingName">
        /// The encoding name.
        /// </param>
        private void SetEncoding(string encodingName)
        {
            if (encodingName == Encoding.UTF8.BodyName || encodingName == Encoding.UTF8.EncodingName || encodingName == "utf-8")
            {
                this.comboBoxEncoding.SelectedIndex = 0;
                return;
            }

            int i = 0;
            foreach (string s in this.comboBoxEncoding.Items)
            {
                if (s == encodingName || s.StartsWith(encodingName + ":"))
                {
                    this.comboBoxEncoding.SelectedIndex = i;
                    return;
                }

                i++;
            }

            this.comboBoxEncoding.SelectedIndex = 0;
        }

        /// <summary>
        /// The get current encoding.
        /// </summary>
        /// <returns>
        /// The <see cref="Encoding"/>.
        /// </returns>
        private Encoding GetCurrentEncoding()
        {
            if (this.comboBoxEncoding.Text == Encoding.UTF8.BodyName || this.comboBoxEncoding.Text == Encoding.UTF8.EncodingName || this.comboBoxEncoding.Text == "utf-8")
            {
                return Encoding.UTF8;
            }

            foreach (EncodingInfo ei in Encoding.GetEncodings())
            {
                if (ei.CodePage + ": " + ei.DisplayName == this.comboBoxEncoding.Text)
                {
                    return ei.GetEncoding();
                }
            }

            return Encoding.UTF8;
        }

        /// <summary>
        /// The audio waveform_ on non paragraph right clicked.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void AudioWaveform_OnNonParagraphRightClicked(object sender, ParagraphEventArgs e)
        {
            this.addParagraphHereToolStripMenuItem.Visible = false;
            this.addParagraphAndPasteToolStripMenuItem.Visible = false;
            this.deleteParagraphToolStripMenuItem.Visible = false;
            this.toolStripMenuItemFocusTextbox.Visible = true;
            this.splitToolStripMenuItem1.Visible = false;
            this.mergeWithPreviousToolStripMenuItem.Visible = false;
            this.mergeWithNextToolStripMenuItem.Visible = false;
            this.toolStripSeparator11.Visible = false;
            this.toolStripMenuItemWaveformPlaySelection.Visible = false;
            this.toolStripSeparator24.Visible = false;
            this.contextMenuStripWaveform.Show(MousePosition.X, MousePosition.Y);
        }

        /// <summary>
        /// The audio waveform_ on double click non paragraph.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void AudioWaveform_OnDoubleClickNonParagraph(object sender, ParagraphEventArgs e)
        {
            if (this.mediaPlayer.VideoPlayer != null)
            {
                this._endSeconds = -1;
                if (e.Paragraph == null)
                {
                    if (Configuration.Settings.VideoControls.WaveformDoubleClickOnNonParagraphAction == "PlayPause")
                    {
                        this.mediaPlayer.TogglePlayPause();
                    }
                }
                else
                {
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(this._subtitle.GetIndex(e.Paragraph));
                }
            }
        }

        /// <summary>
        /// The audio waveform_ on zoomed changed.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void AudioWaveform_OnZoomedChanged(object sender, EventArgs e)
        {
            this.SelectZoomTextInComboBox();
        }

        /// <summary>
        /// The audio waveform_ on time changed and offset rest.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void AudioWaveform_OnTimeChangedAndOffsetRest(object sender, ParagraphEventArgs e)
        {
            if (this.mediaPlayer.VideoPlayer == null)
            {
                return;
            }

            int index = this._subtitle.Paragraphs.IndexOf(e.Paragraph);
            if (index < 0)
            {
                if (this._subtitleAlternate != null && this.SubtitleListview1.IsAlternateTextColumnVisible && Configuration.Settings.General.ShowOriginalAsPreviewIfAvailable)
                {
                    index = this._subtitleAlternate.GetIndex(e.Paragraph);
                    if (index >= 0)
                    {
                        var current = Utilities.GetOriginalParagraph(index, e.Paragraph, this._subtitle.Paragraphs);
                        if (current != null)
                        {
                            index = this._subtitle.Paragraphs.IndexOf(current);
                        }
                    }
                }
                else if (this._subtitleAlternate != null && this.SubtitleListview1.IsAlternateTextColumnVisible)
                {
                    index = this._subtitle.GetIndex(e.Paragraph);
                }
            }

            if (index >= 0)
            {
                this.SubtitleListview1.SelectIndexAndEnsureVisible(index);
                this.mediaPlayer.CurrentPosition = e.Seconds;
                this.ButtonSetStartAndOffsetRestClick(null, null);
            }

            this.audioVisualizer.Invalidate();
        }

        /// <summary>
        /// The audio waveform_ on pause.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void AudioWaveform_OnPause(object sender, EventArgs e)
        {
            this._endSeconds = -1;
            if (this.mediaPlayer.VideoPlayer != null)
            {
                this.mediaPlayer.Pause();
            }
        }

        /// <summary>
        /// The audio waveform_ on single click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void AudioWaveform_OnSingleClick(object sender, ParagraphEventArgs e)
        {
            this.timerWaveform.Stop();
            this._endSeconds = -1;
            if (this.mediaPlayer.VideoPlayer != null)
            {
                this.mediaPlayer.Pause();
            }

            this.mediaPlayer.CurrentPosition = e.Seconds;

            int index = -1;
            if (this.SubtitleListview1.SelectedItems.Count > 0)
            {
                index = this.SubtitleListview1.SelectedItems[0].Index;
            }

            this.SetWaveformPosition(this.audioVisualizer.StartPositionSeconds, e.Seconds, index);
            this.timerWaveform.Start();
        }

        /// <summary>
        /// The audio waveform_ on paragraph right clicked.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void AudioWaveform_OnParagraphRightClicked(object sender, ParagraphEventArgs e)
        {
            this.SubtitleListview1.SelectIndexAndEnsureVisible(this._subtitle.GetIndex(e.Paragraph));

            this.addParagraphHereToolStripMenuItem.Visible = false;
            this.addParagraphAndPasteToolStripMenuItem.Visible = false;
            this.deleteParagraphToolStripMenuItem.Visible = true;
            this.toolStripMenuItemFocusTextbox.Visible = true;
            this.splitToolStripMenuItem1.Visible = true;
            this.mergeWithPreviousToolStripMenuItem.Visible = true;
            this.mergeWithNextToolStripMenuItem.Visible = true;
            this.toolStripSeparator11.Visible = true;
            this.toolStripMenuItemWaveformPlaySelection.Visible = true;
            this.toolStripSeparator24.Visible = true;

            this._audioWaveformRightClickSeconds = e.Seconds;
            this.contextMenuStripWaveform.Show(MousePosition.X, MousePosition.Y);
        }

        /// <summary>
        /// The audio waveform_ on new selection right clicked.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void AudioWaveform_OnNewSelectionRightClicked(object sender, ParagraphEventArgs e)
        {
            this.SubtitleListview1.SelectIndexAndEnsureVisible(this._subtitle.GetIndex(e.Paragraph));

            this.addParagraphHereToolStripMenuItem.Visible = true;
            this.addParagraphAndPasteToolStripMenuItem.Visible = Clipboard.ContainsText();

            this.deleteParagraphToolStripMenuItem.Visible = false;
            this.toolStripMenuItemFocusTextbox.Visible = false;
            this.splitToolStripMenuItem1.Visible = false;
            this.mergeWithPreviousToolStripMenuItem.Visible = false;
            this.mergeWithNextToolStripMenuItem.Visible = false;

            this.contextMenuStripWaveform.Show(MousePosition.X, MousePosition.Y);
        }

        /// <summary>
        /// The audio waveform_ on time changed.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void AudioWaveform_OnTimeChanged(object sender, ParagraphEventArgs e)
        {
            var paragraph = e.Paragraph;
            var beforeParagraph = e.BeforeParagraph;
            if (beforeParagraph == null)
            {
                beforeParagraph = paragraph;
            }

            if (beforeParagraph.StartTime.TotalMilliseconds == paragraph.StartTime.TotalMilliseconds && beforeParagraph.EndTime.TotalMilliseconds == paragraph.EndTime.TotalMilliseconds)
            {
                this._makeHistoryPaused = true;
            }

            int selectedIndex = this.FirstSelectedIndex;
            int index = this._subtitle.Paragraphs.IndexOf(paragraph);
            if (index == this._subtitleListViewIndex)
            {
                // Make history item for rollback (change paragraph back for history + change again)
                this._subtitle.Paragraphs[index] = new Paragraph(beforeParagraph);
                this.MakeHistoryForUndoOnlyIfNotResent(string.Format(this._language.VideoControls.BeforeChangingTimeInWaveformX, "#" + paragraph.Number + " " + paragraph.Text));
                this._subtitle.Paragraphs[index] = paragraph;
                this._makeHistoryPaused = true;

                Paragraph original = null;
                if (this._subtitleAlternate != null && this.SubtitleListview1.IsAlternateTextColumnVisible)
                {
                    original = Utilities.GetOriginalParagraph(index, beforeParagraph, this._subtitleAlternate.Paragraphs);
                }

                if (Configuration.Settings.General.UseTimeFormatHHMMSSFF)
                { // so we don't get weird rounds we'll use whole frames when moving start time
                    double fr = TimeCode.BaseUnit / Configuration.Settings.General.CurrentFrameRate;
                    if (e.BeforeParagraph != null && e.BeforeParagraph.StartTime.TotalMilliseconds != e.Paragraph.StartTime.TotalMilliseconds && e.BeforeParagraph.Duration.TotalMilliseconds == e.Paragraph.Duration.TotalMilliseconds)
                    {
                        // move paragraph
                        paragraph.StartTime.TotalMilliseconds = ((int)Math.Round(paragraph.StartTime.TotalMilliseconds / fr)) * fr;
                        paragraph.EndTime.TotalMilliseconds = paragraph.StartTime.TotalMilliseconds + e.BeforeParagraph.Duration.TotalMilliseconds;
                    }
                    else if (e.BeforeParagraph != null && e.BeforeParagraph.EndTime.TotalMilliseconds == e.Paragraph.EndTime.TotalMilliseconds)
                    {
                        paragraph.EndTime.TotalMilliseconds = ((int)Math.Round(paragraph.EndTime.TotalMilliseconds / fr)) * fr;
                        int end = SubtitleFormat.MillisecondsToFrames(paragraph.EndTime.TotalMilliseconds);
                        int dur = SubtitleFormat.MillisecondsToFrames(paragraph.Duration.TotalMilliseconds);
                        paragraph.StartTime.TotalMilliseconds = SubtitleFormat.FramesToMilliseconds(end - dur);
                    }
                }

                this.timeUpDownStartTime.TimeCode = paragraph.StartTime;
                var durationInSeconds = (decimal)paragraph.Duration.TotalSeconds;
                if (durationInSeconds >= this.numericUpDownDuration.Minimum && durationInSeconds <= this.numericUpDownDuration.Maximum)
                {
                    this.SetDurationInSeconds((double)durationInSeconds);
                }

                this.MovePrevNext(e, beforeParagraph, index);

                if (original != null)
                {
                    original.StartTime.TotalMilliseconds = paragraph.StartTime.TotalMilliseconds;
                    original.EndTime.TotalMilliseconds = paragraph.EndTime.TotalMilliseconds;
                }
            }
            else if (this._subtitleAlternate != null && this.SubtitleListview1.IsAlternateTextColumnVisible && Configuration.Settings.General.ShowOriginalAsPreviewIfAvailable)
            {
                index = this._subtitleAlternate.GetIndex(paragraph);
                if (index >= 0)
                {
                    // Make history item for rollback (change paragraph back for history + change again)
                    this._subtitleAlternate.Paragraphs[index] = new Paragraph(beforeParagraph);
                    this.MakeHistoryForUndoOnlyIfNotResent(string.Format(this._language.VideoControls.BeforeChangingTimeInWaveformX, "#" + paragraph.Number + " " + paragraph.Text));
                    this._subtitleAlternate.Paragraphs[index] = paragraph;
                    this._makeHistoryPaused = true;

                    var current = Utilities.GetOriginalParagraph(index, beforeParagraph, this._subtitle.Paragraphs);
                    if (current != null)
                    {
                        current.StartTime.TotalMilliseconds = paragraph.StartTime.TotalMilliseconds;
                        current.EndTime.TotalMilliseconds = paragraph.EndTime.TotalMilliseconds;

                        index = this._subtitle.GetIndex(current);

                        this.SubtitleListview1.SetStartTimeAndDuration(index, paragraph);

                        if (index == selectedIndex)
                        {
                            this.timeUpDownStartTime.TimeCode = paragraph.StartTime;
                            var durationInSeconds = (decimal)paragraph.Duration.TotalSeconds;
                            if (durationInSeconds >= this.numericUpDownDuration.Minimum && durationInSeconds <= this.numericUpDownDuration.Maximum)
                            {
                                this.SetDurationInSeconds((double)durationInSeconds);
                            }
                        }
                    }
                }
            }
            else if (this._subtitleAlternate != null && this.SubtitleListview1.IsAlternateTextColumnVisible)
            {
                index = this._subtitle.GetIndex(paragraph);
                if (index >= 0)
                {
                    // Make history item for rollback (change paragraph back for history + change again)
                    this._subtitle.Paragraphs[index] = new Paragraph(beforeParagraph);
                    this.MakeHistoryForUndoOnlyIfNotResent(string.Format(this._language.VideoControls.BeforeChangingTimeInWaveformX, "#" + paragraph.Number + " " + paragraph.Text));
                    this._subtitle.Paragraphs[index] = paragraph;
                    this._makeHistoryPaused = true;

                    this.MovePrevNext(e, beforeParagraph, index);

                    var original = Utilities.GetOriginalParagraph(index, beforeParagraph, this._subtitleAlternate.Paragraphs);
                    if (original != null)
                    {
                        original.StartTime.TotalMilliseconds = paragraph.StartTime.TotalMilliseconds;
                        original.EndTime.TotalMilliseconds = paragraph.EndTime.TotalMilliseconds;
                    }

                    this.SubtitleListview1.SetStartTimeAndDuration(index, paragraph);
                }
            }
            else
            {
                if (index >= 0)
                {
                    // Make history item for rollback (change paragraph back for history + change again)
                    this._subtitle.Paragraphs[index] = new Paragraph(beforeParagraph);
                    this.MakeHistoryForUndoOnlyIfNotResent(string.Format(this._language.VideoControls.BeforeChangingTimeInWaveformX, "#" + paragraph.Number + " " + paragraph.Text));
                    this._subtitle.Paragraphs[index] = paragraph;
                    this._makeHistoryPaused = true;

                    this.MovePrevNext(e, beforeParagraph, index);

                    if (this._subtitleAlternate != null)
                    {
                        var original = Utilities.GetOriginalParagraph(index, beforeParagraph, this._subtitleAlternate.Paragraphs);
                        if (original != null)
                        {
                            original.StartTime.TotalMilliseconds = paragraph.StartTime.TotalMilliseconds;
                            original.EndTime.TotalMilliseconds = paragraph.EndTime.TotalMilliseconds;
                        }
                    }
                }

                this.SubtitleListview1.SetStartTimeAndDuration(index, paragraph);
            }

            beforeParagraph.StartTime.TotalMilliseconds = paragraph.StartTime.TotalMilliseconds;
            beforeParagraph.EndTime.TotalMilliseconds = paragraph.EndTime.TotalMilliseconds;
            this._makeHistoryPaused = false;
        }

        /// <summary>
        /// The move prev next.
        /// </summary>
        /// <param name="e">
        /// The e.
        /// </param>
        /// <param name="beforeParagraph">
        /// The before paragraph.
        /// </param>
        /// <param name="index">
        /// The index.
        /// </param>
        private void MovePrevNext(ParagraphEventArgs e, Paragraph beforeParagraph, int index)
        {
            if (e.MovePreviousOrNext)
            {
                if (e.MouseDownParagraphType == MouseDownParagraphType.Start)
                {
                    var prev = this._subtitle.GetParagraphOrDefault(index - 1);
                    if (prev != null)
                    {
                        Paragraph originalPrev = null;
                        if (this._subtitleAlternate != null && this.SubtitleListview1.IsAlternateTextColumnVisible)
                        {
                            originalPrev = Utilities.GetOriginalParagraph(index - 1, prev, this._subtitleAlternate.Paragraphs);
                        }

                        prev.EndTime.TotalMilliseconds = prev.EndTime.TotalMilliseconds + (e.Paragraph.StartTime.TotalMilliseconds - beforeParagraph.StartTime.TotalMilliseconds);
                        this.SubtitleListview1.SetStartTimeAndDuration(index - 1, prev);
                        this.audioVisualizer.Invalidate();

                        if (originalPrev != null)
                        {
                            originalPrev.EndTime.TotalMilliseconds = prev.EndTime.TotalMilliseconds;
                        }
                    }
                }
                else if (e.MouseDownParagraphType == MouseDownParagraphType.End)
                {
                    var next = this._subtitle.GetParagraphOrDefault(index + 1);
                    if (next != null)
                    {
                        Paragraph originalNext = null;
                        if (this._subtitleAlternate != null && this.SubtitleListview1.IsAlternateTextColumnVisible)
                        {
                            originalNext = Utilities.GetOriginalParagraph(index + 1, next, this._subtitleAlternate.Paragraphs);
                        }

                        next.StartTime.TotalMilliseconds = next.StartTime.TotalMilliseconds + (e.Paragraph.EndTime.TotalMilliseconds - beforeParagraph.EndTime.TotalMilliseconds);
                        this.SubtitleListview1.SetStartTimeAndDuration(index + 1, next);
                        this.audioVisualizer.Invalidate();

                        if (originalNext != null)
                        {
                            originalNext.StartTime.TotalMilliseconds = next.StartTime.TotalMilliseconds;
                        }
                    }
                }
            }
        }

        /// <summary>
        /// The audio waveform_ on position selected.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void AudioWaveform_OnPositionSelected(object sender, ParagraphEventArgs e)
        {
            this.mediaPlayer.CurrentPosition = e.Seconds;
            if (e.Paragraph != null)
            {
                this.SubtitleListview1.SelectIndexAndEnsureVisible(this._subtitle.GetIndex(e.Paragraph));
            }
        }

        /// <summary>
        /// The video position changed.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void VideoPositionChanged(object sender, EventArgs e)
        {
            var tud = (TimeUpDown)sender;
            if (tud.Enabled)
            {
                this.mediaPlayer.CurrentPosition = tud.TimeCode.TotalSeconds;
            }
        }

        /// <summary>
        /// The main_ load.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void Main_Load(object sender, EventArgs e)
        {
            this.splitContainer1.Panel1MinSize = 525;
            this.splitContainer1.Panel2MinSize = 250;
            this.splitContainerMain.Panel1MinSize = 200;
            this.splitContainerMain.Panel2MinSize = 220;

            if (Configuration.Settings.General.StartRememberPositionAndSize && !string.IsNullOrEmpty(Configuration.Settings.General.StartPosition))
            {
                var parts = Configuration.Settings.General.StartPosition.Split(';');
                if (parts.Length == 2)
                {
                    int x;
                    int y;
                    if (int.TryParse(parts[0], out x) && int.TryParse(parts[1], out y))
                    {
                        if (x > -100 || y > -100)
                        {
                            this.Left = x;
                            this.Top = y;
                        }
                    }
                }

                if (Configuration.Settings.General.StartSize == "Maximized")
                {
                    this.CenterFormOnCurrentScreen();
                    this.WindowState = FormWindowState.Maximized;
                    return;
                }

                parts = Configuration.Settings.General.StartSize.Split(';');
                if (parts.Length == 2)
                {
                    int x;
                    int y;
                    if (int.TryParse(parts[0], out x) && int.TryParse(parts[1], out y))
                    {
                        this.Width = x;
                        this.Height = y;
                    }
                }

                var screen = Screen.FromControl(this);

                if (screen.Bounds.Width < this.Width)
                {
                    this.Width = screen.Bounds.Width;
                }

                if (screen.Bounds.Height < this.Height)
                {
                    this.Height = screen.Bounds.Height;
                }

                if (screen.Bounds.X + screen.Bounds.Width - 200 < this.Left)
                {
                    this.Left = screen.Bounds.X + screen.Bounds.Width - this.Width;
                }

                if (screen.Bounds.Y + screen.Bounds.Height - 100 < this.Top)
                {
                    this.Top = screen.Bounds.Y + screen.Bounds.Height - this.Height;
                }
            }
            else
            {
                this.CenterFormOnCurrentScreen();
            }

            if (Environment.OSVersion.Version.Major < 6 && Configuration.Settings.General.SubtitleFontName == Utilities.WinXP2KUnicodeFontName)
            {
                // 6 == Vista/Win2008Server/Win7
                // const string unicodeFontName = Utilities.WinXp2kUnicodeFontName;
                // Configuration.Settings.General.SubtitleFontName = unicodeFontName;
                // float fontSize = toolStripMenuItemInsertUnicodeSymbol.Font.Size;
                // textBoxSource.Font = new Font(unicodeFontName, fontSize);
                // textBoxListViewText.Font = new Font(unicodeFontName, fontSize);
                // SubtitleListview1.Font = new Font(unicodeFontName, fontSize);
                // toolStripWaveControls.RenderMode = ToolStripRenderMode.System;
                // toolStripMenuItemSurroundWithMusicSymbols.Font = new Font(unicodeFontName, fontSize);
                Utilities.InitializeSubtitleFont(this.SubtitleListview1);
                this.Refresh();
            }
        }

        /// <summary>
        /// The initialize language.
        /// </summary>
        private void InitializeLanguage()
        {
            this.fileToolStripMenuItem.Text = this._language.Menu.File.Title;
            this.newToolStripMenuItem.Text = this._language.Menu.File.New;
            this.openToolStripMenuItem.Text = this._language.Menu.File.Open;
            this.toolStripMenuItemOpenKeepVideo.Text = this._language.Menu.File.OpenKeepVideo;
            this.reopenToolStripMenuItem.Text = this._language.Menu.File.Reopen;
            this.saveToolStripMenuItem.Text = this._language.Menu.File.Save;
            this.saveAsToolStripMenuItem.Text = this._language.Menu.File.SaveAs;
            this.toolStripMenuItemRestoreAutoBackup.Text = this._language.Menu.File.RestoreAutoBackup;
            this.openOriginalToolStripMenuItem.Text = this._language.Menu.File.OpenOriginal;
            this.saveOriginalToolStripMenuItem.Text = this._language.Menu.File.SaveOriginal;
            this.saveOriginalAstoolStripMenuItem.Text = this._language.SaveOriginalSubtitleAs;
            this.removeOriginalToolStripMenuItem.Text = this._language.Menu.File.CloseOriginal;

            this.toolStripMenuItemOpenContainingFolder.Text = this._language.Menu.File.OpenContainingFolder;
            this.toolStripMenuItemCompare.Text = this._language.Menu.File.Compare;
            this.toolStripMenuItemStatistics.Text = this._language.Menu.File.Statistics;
            this.toolStripMenuItemPlugins.Text = this._language.Menu.File.Plugins;
            this.toolStripMenuItemImportDvdSubtitles.Text = this._language.Menu.File.ImportOcrFromDvd;
            this.toolStripMenuItemSubIdx.Text = this._language.Menu.File.ImportOcrVobSubSubtitle;
            this.toolStripButtonGetFrameRate.ToolTipText = this._language.GetFrameRateFromVideoFile;
            this.toolStripMenuItemImportBluRaySup.Text = this._language.Menu.File.ImportBluRaySupFile;
            this.toolStripMenuItemImportXSub.Text = this._language.Menu.File.ImportXSub;
            this.matroskaImportStripMenuItem.Text = this._language.Menu.File.ImportSubtitleFromMatroskaFile;
            this.toolStripMenuItemManualAnsi.Text = this._language.Menu.File.ImportSubtitleWithManualChosenEncoding;
            this.toolStripMenuItemImportText.Text = this._language.Menu.File.ImportText;
            this.toolStripMenuItemImportImages.Text = this._language.Menu.File.ImportImages;
            this.toolStripMenuItemImportTimeCodes.Text = this._language.Menu.File.ImportTimecodes;
            this.toolStripMenuItemExport.Text = this._language.Menu.File.Export;
            this.toolStripMenuItemExportPngXml.Text = this._language.Menu.File.ExportBdnXml;
            this.bluraySupToolStripMenuItem.Text = this._language.Menu.File.ExportBluRaySup;
            this.adobeEncoreFABImageScriptToolStripMenuItem.Text = this._language.Menu.File.ExportAdobeEncoreFabImageScript;
            this.toolStripMenuItemTextTimeCodePair.Text = this._language.Menu.File.ExportKoreanAtsFilePair;
            this.vobSubsubidxToolStripMenuItem.Text = this._language.Menu.File.ExportVobSub;
            this.toolStripMenuItemCavena890.Text = this._language.Menu.File.ExportCavena890;
            this.eBUSTLToolStripMenuItem.Text = this._language.Menu.File.ExportEbu;
            this.pACScreenElectronicsToolStripMenuItem.Text = this._language.Menu.File.ExportPac;
            this.plainTextToolStripMenuItem.Text = this._language.Menu.File.ExportPlainText;
            this.toolStripMenuItemAvidStl.Text = this._language.Menu.File.ExportAvidStl;
            this.toolStripMenuItemExportCapMakerPlus.Text = this._language.Menu.File.ExportCapMakerPlus;
            this.toolStripMenuItemExportCaptionInc.Text = this._language.Menu.File.ExportCaptionsInc;
            this.toolStripMenuItemExportCheetahCap.Text = this._language.Menu.File.ExportCheetahCap;
            this.toolStripMenuItemExportUltech130.Text = this._language.Menu.File.ExportUltech130;
            this.exportCustomTextFormatToolStripMenuItem.Text = this._language.Menu.File.ExportCustomTextFormat;
            this.exitToolStripMenuItem.Text = this._language.Menu.File.Exit;

            this.editToolStripMenuItem.Text = this._language.Menu.Edit.Title;
            this.showHistoryforUndoToolStripMenuItem.Text = this._language.Menu.Edit.ShowUndoHistory;
            this.toolStripMenuItemUndo.Text = this._language.Menu.Edit.Undo;
            this.toolStripMenuItemRedo.Text = this._language.Menu.Edit.Redo;

            this.toolStripMenuItemInsertUnicodeCharacter.Text = this._language.Menu.Edit.InsertUnicodeSymbol;

            this.findToolStripMenuItem.Text = this._language.Menu.Edit.Find;
            this.findNextToolStripMenuItem.Text = this._language.Menu.Edit.FindNext;
            this.replaceToolStripMenuItem.Text = this._language.Menu.Edit.Replace;
            this.multipleReplaceToolStripMenuItem.Text = this._language.Menu.Edit.MultipleReplace;
            this.gotoLineNumberToolStripMenuItem.Text = this._language.Menu.Edit.GoToSubtitleNumber;
            this.toolStripMenuItemRightToLeftMode.Text = this._language.Menu.Edit.RightToLeftMode;

            this.toolStripMenuItemRtlUnicodeControlChars.Text = this._language.Menu.Edit.FixTrlViaUnicodeControlCharacters;

            this.toolStripMenuItemReverseRightToLeftStartEnd.Text = this._language.Menu.Edit.ReverseRightToLeftStartEnd;
            this.toolStripMenuItemModifySelection.Text = this._language.Menu.Edit.ModifySelection;
            this.toolStripMenuItemInverseSelection.Text = this._language.Menu.Edit.InverseSelection;
            this.editSelectAllToolStripMenuItem.Text = this._language.Menu.ContextMenu.SelectAll;

            this.toolsToolStripMenuItem.Text = this._language.Menu.Tools.Title;
            this.adjustDisplayTimeToolStripMenuItem.Text = this._language.Menu.Tools.AdjustDisplayDuration;
            this.toolStripMenuItemApplyDurationLimits.Text = this._language.Menu.Tools.ApplyDurationLimits;
            this.toolStripMenuItemDurationBridgeGaps.Text = this._language.Menu.Tools.DurationsBridgeGap;
            this.fixToolStripMenuItem.Text = this._language.Menu.Tools.FixCommonErrors;
            this.startNumberingFromToolStripMenuItem.Text = this._language.Menu.Tools.StartNumberingFrom;
            this.removeTextForHearImparedToolStripMenuItem.Text = this._language.Menu.Tools.RemoveTextForHearingImpaired;
            this.ChangeCasingToolStripMenuItem.Text = this._language.Menu.Tools.ChangeCasing;
            this.toolStripMenuItemChangeFrameRate2.Text = this._language.Menu.Tools.ChangeFrameRate;
            this.changeSpeedInPercentToolStripMenuItem.Text = this._language.Menu.Tools.ChangeSpeedInPercent;
            this.toolStripMenuItemAutoMergeShortLines.Text = this._language.Menu.Tools.MergeShortLines;
            this.toolStripMenuItemMergeDuplicateText.Text = this._language.Menu.Tools.MergeDuplicateText;
            this.toolStripMenuItemMergeLinesWithSameTimeCodes.Text = this._language.Menu.Tools.MergeSameTimeCodes;
            this.toolStripMenuItemAutoSplitLongLines.Text = this._language.Menu.Tools.SplitLongLines;
            this.setMinimumDisplayTimeBetweenParagraphsToolStripMenuItem.Text = this._language.Menu.Tools.MinimumDisplayTimeBetweenParagraphs;
            this.toolStripMenuItem1.Text = this._language.Menu.Tools.SortBy;

            this.sortNumberToolStripMenuItem.Text = this._language.Menu.Tools.Number;
            this.sortStartTimeToolStripMenuItem.Text = this._language.Menu.Tools.StartTime;
            this.sortEndTimeToolStripMenuItem.Text = this._language.Menu.Tools.EndTime;
            this.sortDisplayTimeToolStripMenuItem.Text = this._language.Menu.Tools.Duration;

            this.descendingToolStripMenuItem.Text = this._language.Menu.Tools.Descending;
            this.AscendingToolStripMenuItem.Text = this._language.Menu.Tools.Ascending;

            this.sortTextAlphabeticallytoolStripMenuItem.Text = this._language.Menu.Tools.TextAlphabetically;
            this.sortTextMaxLineLengthToolStripMenuItem.Text = this._language.Menu.Tools.TextSingleLineMaximumLength;
            this.sortTextTotalLengthToolStripMenuItem.Text = this._language.Menu.Tools.TextTotalLength;
            this.sortTextNumberOfLinesToolStripMenuItem.Text = this._language.Menu.Tools.TextNumberOfLines;
            this.textCharssecToolStripMenuItem.Text = this._language.Menu.Tools.TextNumberOfCharactersPerSeconds;
            this.textWordsPerMinutewpmToolStripMenuItem.Text = this._language.Menu.Tools.WordsPerMinute;
            this.styleToolStripMenuItem.Text = this._language.Menu.Tools.Style;

            this.toolStripMenuItemShowOriginalInPreview.Text = this._language.Menu.Edit.ShowOriginalTextInAudioAndVideoPreview;
            this.toolStripMenuItemMakeEmptyFromCurrent.Text = this._language.Menu.Tools.MakeNewEmptyTranslationFromCurrentSubtitle;
            this.toolStripMenuItemBatchConvert.Text = this._language.Menu.Tools.BatchConvert;
            this.generateDatetimeInfoFromVideoToolStripMenuItem.Text = this._language.Menu.Tools.GenerateTimeAsText;
            this.toolStripMenuItemMeasurementConverter.Text = this._language.Menu.Tools.MeasurementConverter;
            this.splitToolStripMenuItem.Text = this._language.Menu.Tools.SplitSubtitle;
            this.appendTextVisuallyToolStripMenuItem.Text = this._language.Menu.Tools.AppendSubtitle;
            this.joinSubtitlesToolStripMenuItem.Text = this._language.Menu.Tools.JoinSubtitles;

            this.toolStripMenuItemVideo.Text = this._language.Menu.Video.Title;
            this.openVideoToolStripMenuItem.Text = this._language.Menu.Video.OpenVideo;
            this.toolStripMenuItemOpenDvd.Text = this._language.Menu.Video.OpenDvd; // TODO: Remove in SE 3.4
            this.toolStripMenuItemSetAudioTrack.Text = this._language.Menu.Video.ChooseAudioTrack;
            this.closeVideoToolStripMenuItem.Text = this._language.Menu.Video.CloseVideo;

            this.toolStripMenuItemImportSceneChanges.Text = this._language.Menu.Video.ImportSceneChanges;

            this.toolStripMenuItemAddWaveformBatch.Text = this._language.Menu.Video.WaveformBatchGenerate;

            if (Configuration.Settings.VideoControls.GenerateSpectrogram)
            {
                this.showhideWaveformToolStripMenuItem.Text = this._language.Menu.Video.ShowHideWaveformAndSpectrogram;
            }
            else
            {
                this.showhideWaveformToolStripMenuItem.Text = this._language.Menu.Video.ShowHideWaveform;
            }

            this.showhideVideoToolStripMenuItem.Text = this._language.Menu.Video.ShowHideVideo;
            this.undockVideoControlsToolStripMenuItem.Text = this._language.Menu.Video.UnDockVideoControls;
            this.redockVideoControlsToolStripMenuItem.Text = this._language.Menu.Video.ReDockVideoControls;

            this.toolStripMenuItemSpellCheckMain.Text = this._language.Menu.SpellCheck.Title;
            this.spellCheckToolStripMenuItem.Text = this._language.Menu.SpellCheck.SpellCheck;
            this.toolStripMenuItemSpellCheckFromCurrentLine.Text = this._language.Menu.SpellCheck.SpellCheckFromCurrentLine;
            this.findDoubleWordsToolStripMenuItem.Text = this._language.Menu.SpellCheck.FindDoubleWords;
            this.FindDoubleLinesToolStripMenuItem.Text = this._language.Menu.SpellCheck.FindDoubleLines;
            this.GetDictionariesToolStripMenuItem.Text = this._language.Menu.SpellCheck.GetDictionaries;
            this.addWordToNamesetcListToolStripMenuItem.Text = this._language.Menu.SpellCheck.AddToNamesEtcList;

            this.toolStripMenuItemSynchronization.Text = this._language.Menu.Synchronization.Title;
            this.toolStripMenuItemAdjustAllTimes.Text = this._language.Menu.Synchronization.AdjustAllTimes;
            this.visualSyncToolStripMenuItem.Text = this._language.Menu.Synchronization.VisualSync;
            this.toolStripMenuItemPointSync.Text = this._language.Menu.Synchronization.PointSync;
            this.pointSyncViaOtherSubtitleToolStripMenuItem.Text = this._language.Menu.Synchronization.PointSyncViaOtherSubtitle;

            this.toolStripMenuItemAutoTranslate.Text = this._language.Menu.AutoTranslate.Title;
            this.translateByGoogleToolStripMenuItem.Text = this._language.Menu.AutoTranslate.TranslatePoweredByGoogle;
            this.translatepoweredByMicrosoftToolStripMenuItem.Text = this._language.Menu.AutoTranslate.TranslatePoweredByMicrosoft;
            this.translatepoweredByMicrosoftToolStripMenuItem.Visible = Configuration.Settings.Tools.MicrosoftBingApiId != "C2C2E9A508E6748F0494D68DFD92FAA1FF9B0BA4";
            this.translateFromSwedishToDanishToolStripMenuItem.Text = this._language.Menu.AutoTranslate.TranslateFromSwedishToDanish;

            this.optionsToolStripMenuItem.Text = this._language.Menu.Options.Title;
            this.settingsToolStripMenuItem.Text = this._language.Menu.Options.Settings;
            this.changeLanguageToolStripMenuItem.Text = this._language.Menu.Options.ChooseLanguage;
            try
            {
                var ci = new CultureInfo(this._languageGeneral.CultureName);
                this.changeLanguageToolStripMenuItem.Text += " [" + ci.NativeName + "]";
            }
            catch
            {
            }

            this.toolStripMenuItemNetworking.Text = this._language.Menu.Networking.Title;
            this.startServerToolStripMenuItem.Text = this._language.Menu.Networking.StartNewSession;
            this.joinSessionToolStripMenuItem.Text = this._language.Menu.Networking.JoinSession;
            this.showSessionKeyLogToolStripMenuItem.Text = this._language.Menu.Networking.ShowSessionInfoAndLog;
            this.chatToolStripMenuItem.Text = this._language.Menu.Networking.Chat;
            this.leaveSessionToolStripMenuItem.Text = this._language.Menu.Networking.LeaveSession;

            this.checkForUpdatesToolStripMenuItem.Text = this._language.Menu.Help.CheckForUpdates;
            this.helpToolStripMenuItem.Text = this._language.Menu.Help.Title;
            this.helpToolStripMenuItem1.Text = this._language.Menu.Help.Help;
            this.aboutToolStripMenuItem.Text = this._language.Menu.Help.About;

            this.toolStripButtonFileNew.ToolTipText = this._language.Menu.ToolBar.New;
            this.toolStripButtonFileOpen.ToolTipText = this._language.Menu.ToolBar.Open;
            this.toolStripButtonSave.ToolTipText = this._language.Menu.ToolBar.Save;
            this.toolStripButtonSaveAs.ToolTipText = this._language.Menu.ToolBar.SaveAs;
            this.toolStripButtonFind.ToolTipText = this._language.Menu.ToolBar.Find;
            this.toolStripButtonReplace.ToolTipText = this._language.Menu.ToolBar.Replace;
            this.toolStripButtonFixCommonErrors.ToolTipText = this._language.Menu.ToolBar.FixCommonErrors;
            this.toolStripButtonVisualSync.ToolTipText = this._language.Menu.ToolBar.VisualSync;
            this.toolStripButtonSpellCheck.ToolTipText = this._language.Menu.ToolBar.SpellCheck;
            this.toolStripButtonSettings.ToolTipText = this._language.Menu.ToolBar.Settings;
            this.toolStripButtonHelp.ToolTipText = this._language.Menu.ToolBar.Help;
            this.toolStripButtonToggleWaveform.ToolTipText = this._language.Menu.ToolBar.ShowHideWaveform;
            this.toolStripButtonToggleVideo.ToolTipText = this._language.Menu.ToolBar.ShowHideVideo;

            this.toolStripMenuItemAssStyles.Text = this._language.Menu.ContextMenu.SubStationAlphaStyles;
            this.setStylesForSelectedLinesToolStripMenuItem.Text = this._language.Menu.ContextMenu.SubStationAlphaSetStyle;

            this.toolStripMenuItemDelete.Text = this._language.Menu.ContextMenu.Delete;
            this.insertLineToolStripMenuItem.Text = this._language.Menu.ContextMenu.InsertFirstLine;
            this.toolStripMenuItemInsertBefore.Text = this._language.Menu.ContextMenu.InsertBefore;
            this.toolStripMenuItemInsertAfter.Text = this._language.Menu.ContextMenu.InsertAfter;
            this.toolStripMenuItemInsertSubtitle.Text = this._language.Menu.ContextMenu.InsertSubtitleAfter;

            this.toolStripMenuItemCopySourceText.Text = this._language.Menu.ContextMenu.CopyToClipboard;

            this.toolStripMenuItemColumn.Text = this._language.Menu.ContextMenu.Column;
            this.columnDeleteTextOnlyToolStripMenuItem.Text = this._language.Menu.ContextMenu.ColumnDeleteText;
            this.toolStripMenuItemColumnDeleteText.Text = this._language.Menu.ContextMenu.ColumnDeleteTextAndShiftCellsUp;
            this.ShiftTextCellsDownToolStripMenuItem.Text = this._language.Menu.ContextMenu.ColumnInsertEmptyTextAndShiftCellsDown;
            this.toolStripMenuItemInsertTextFromSub.Text = this._language.Menu.ContextMenu.ColumnInsertTextFromSubtitle;
            this.toolStripMenuItemColumnImportText.Text = this._language.Menu.ContextMenu.ColumnImportTextAndShiftCellsDown;
            this.toolStripMenuItemPasteSpecial.Text = this._language.Menu.ContextMenu.ColumnPasteFromClipboard;
            this.copyOriginalTextToCurrentToolStripMenuItem.Text = this._language.Menu.ContextMenu.ColumnCopyOriginalTextToCurrent;

            this.splitLineToolStripMenuItem.Text = this._language.Menu.ContextMenu.Split;
            this.toolStripMenuItemMergeLines.Text = this._language.Menu.ContextMenu.MergeSelectedLines;
            this.toolStripMenuItemMergeDialog.Text = this._language.Menu.ContextMenu.MergeSelectedLinesAsDialog;
            this.mergeBeforeToolStripMenuItem.Text = this._language.Menu.ContextMenu.MergeWithLineBefore;
            this.mergeAfterToolStripMenuItem.Text = this._language.Menu.ContextMenu.MergeWithLineAfter;
            this.normalToolStripMenuItem.Text = this._language.Menu.ContextMenu.Normal;
            this.boldToolStripMenuItem.Text = this._languageGeneral.Bold;
            this.underlineToolStripMenuItem.Text = this._language.Menu.ContextMenu.Underline;
            this.italicToolStripMenuItem.Text = this._languageGeneral.Italic;
            this.colorToolStripMenuItem.Text = this._language.Menu.ContextMenu.Color;
            this.toolStripMenuItemFont.Text = this._language.Menu.ContextMenu.FontName;
            this.toolStripMenuItemAlignment.Text = this._language.Menu.ContextMenu.Alignment;
            this.toolStripMenuItemAutoBreakLines.Text = this._language.Menu.ContextMenu.AutoBalanceSelectedLines;
            this.toolStripMenuItemUnbreakLines.Text = this._language.Menu.ContextMenu.RemoveLineBreaksFromSelectedLines;
            this.typeEffectToolStripMenuItem.Text = this._language.Menu.ContextMenu.TypewriterEffect;
            this.karokeeEffectToolStripMenuItem.Text = this._language.Menu.ContextMenu.KaraokeEffect;
            this.showSelectedLinesEarlierlaterToolStripMenuItem.Text = this._language.Menu.ContextMenu.ShowSelectedLinesEarlierLater;
            this.visualSyncSelectedLinesToolStripMenuItem.Text = this._language.Menu.ContextMenu.VisualSyncSelectedLines;
            this.toolStripMenuItemGoogleMicrosoftTranslateSelLine.Text = this._language.Menu.ContextMenu.GoogleAndMicrosoftTranslateSelectedLine;
            this.googleTranslateSelectedLinesToolStripMenuItem.Text = this._language.Menu.ContextMenu.GoogleTranslateSelectedLines;
            this.adjustDisplayTimeForSelectedLinesToolStripMenuItem.Text = this._language.Menu.ContextMenu.AdjustDisplayDurationForSelectedLines;
            this.fixCommonErrorsInSelectedLinesToolStripMenuItem.Text = this._language.Menu.ContextMenu.FixCommonErrorsInSelectedLines;
            this.changeCasingForSelectedLinesToolStripMenuItem.Text = this._language.Menu.ContextMenu.ChangeCasingForSelectedLines;
            this.toolStripMenuItemSaveSelectedLines.Text = this._language.Menu.ContextMenu.SaveSelectedLines;

            // textbox context menu
            this.cutToolStripMenuItem.Text = this._language.Menu.ContextMenu.Cut;
            this.copyToolStripMenuItem.Text = this._language.Menu.ContextMenu.Copy;
            this.pasteToolStripMenuItem.Text = this._language.Menu.ContextMenu.Paste;
            this.deleteToolStripMenuItem.Text = this._language.Menu.ContextMenu.Delete;
            this.toolStripMenuItemSplitTextAtCursor.Text = this._language.Menu.ContextMenu.SplitLineAtCursorPosition;
            this.selectAllToolStripMenuItem.Text = this._language.Menu.ContextMenu.SelectAll;
            this.normalToolStripMenuItem1.Text = this._language.Menu.ContextMenu.Normal;
            this.boldToolStripMenuItem1.Text = this._languageGeneral.Bold;
            this.italicToolStripMenuItem1.Text = this._languageGeneral.Italic;
            this.underlineToolStripMenuItem1.Text = this._language.Menu.ContextMenu.Underline;
            this.colorToolStripMenuItem1.Text = this._language.Menu.ContextMenu.Color;
            this.fontNameToolStripMenuItem.Text = this._language.Menu.ContextMenu.FontName;
            this.toolStripMenuItemInsertUnicodeSymbol.Text = this._language.Menu.Edit.InsertUnicodeSymbol;
            this.toolStripMenuItemInsertUnicodeControlCharacters.Text = this._language.Menu.Edit.InsertUnicodeControlCharacters;
            this.leftToolStripMenuItem.Text = this._language.Menu.Edit.InsertUnicodeControlCharactersLRM;
            this.righttoleftMarkToolStripMenuItem.Text = this._language.Menu.Edit.InsertUnicodeControlCharactersRLM;
            this.startOfLefttorightEmbeddingLREToolStripMenuItem.Text = this._language.Menu.Edit.InsertUnicodeControlCharactersLRE;
            this.startOfRighttoleftEmbeddingRLEToolStripMenuItem.Text = this._language.Menu.Edit.InsertUnicodeControlCharactersRLE;
            this.startOfLefttorightOverrideLROToolStripMenuItem.Text = this._language.Menu.Edit.InsertUnicodeControlCharactersLRO;
            this.startOfRighttoleftOverrideRLOToolStripMenuItem.Text = this._language.Menu.Edit.InsertUnicodeControlCharactersRLO;

            // main controls
            this.SubtitleListview1.InitializeLanguage(this._languageGeneral, Configuration.Settings);
            this.toolStripLabelSubtitleFormat.Text = this._language.Controls.SubtitleFormat;
            this.toolStripLabelEncoding.Text = this._language.Controls.FileEncoding;
            this.tabControlSubtitle.TabPages[0].Text = this._language.Controls.ListView;
            this.tabControlSubtitle.TabPages[1].Text = this._language.Controls.SourceView;
            this.labelDuration.Text = this._languageGeneral.Duration;
            this.labelStartTime.Text = this._languageGeneral.StartTime;
            this.labelText.Text = this._languageGeneral.Text;
            this.labelAlternateText.Text = this._languageGeneral.OriginalText;
            this.toolStripLabelFrameRate.Text = this._languageGeneral.FrameRate;
            this.buttonPrevious.Text = this._language.Controls.Previous;
            this.buttonNext.Text = this._language.Controls.Next;
            this.buttonAutoBreak.Text = this._language.Controls.AutoBreak;
            this.buttonUnBreak.Text = this._language.Controls.Unbreak;
            this.buttonSplitLine.Text = this._languageGeneral.SplitLine;
            this.ShowSourceLineNumber();

            // Video controls
            this.tabPageTranslate.Text = this._language.VideoControls.Translate + "  ";
            this.tabPageCreate.Text = this._language.VideoControls.Create + "  ";
            this.tabPageAdjust.Text = this._language.VideoControls.Adjust + "  ";
            this.checkBoxSyncListViewWithVideoWhilePlaying.Text = this._language.VideoControls.SelectCurrentElementWhilePlaying;
            if (this._videoFileName == null)
            {
                this.labelVideoInfo.Text = this._languageGeneral.NoVideoLoaded;
            }

            this.toolStripButtonLockCenter.Text = this._language.VideoControls.Center;
            this.toolStripSplitButtonPlayRate.Text = this._language.VideoControls.PlayRate;
            this.toolStripMenuItemPlayRateSlow.Text = this._language.VideoControls.Slow;
            this.toolStripMenuItemPlayRateNormal.Text = this._language.VideoControls.Normal;
            this.toolStripMenuItemPlayRateFast.Text = this._language.VideoControls.Fast;
            this.toolStripMenuItemPlayRateVeryFast.Text = this._language.VideoControls.VeryFast;

            this.groupBoxAutoRepeat.Text = this._language.VideoControls.AutoRepeat;
            this.checkBoxAutoRepeatOn.Text = this._language.VideoControls.AutoRepeatOn;
            this.labelAutoRepeatCount.Text = this._language.VideoControls.AutoRepeatCount;
            this.groupBoxAutoContinue.Text = this._language.VideoControls.AutoContinue;
            this.checkBoxAutoContinue.Text = this._language.VideoControls.AutoContinueOn;
            this.labelAutoContinueDelay.Text = this._language.VideoControls.DelayInSeconds;
            this.buttonPlayPrevious.Text = this._language.VideoControls.Previous;
            this.buttonPlayCurrent.Text = this._language.VideoControls.PlayCurrent;
            this.buttonPlayNext.Text = this._language.VideoControls.Next;
            this.buttonStop.Text = this._language.VideoControls.Pause;
            this.groupBoxTranslateSearch.Text = this._language.VideoControls.SearchTextOnline;
            this.buttonGoogleIt.Text = this._language.VideoControls.GoogleIt;
            this.buttonGoogleTranslateIt.Text = this._language.VideoControls.GoogleTranslate;
            this.labelTranslateTip.Text = this._language.VideoControls.TranslateTip;

            this.buttonInsertNewText.Text = this._language.VideoControls.InsertNewSubtitleAtVideoPosition;
            this.buttonBeforeText.Text = this._language.VideoControls.PlayFromJustBeforeText;
            this.buttonGotoSub.Text = this._language.VideoControls.GoToSubtitlePositionAndPause;
            this.buttonSetStartTime.Text = this._language.VideoControls.SetStartTime;
            this.buttonSetEnd.Text = this._language.VideoControls.SetEndTime;
            this.buttonSecBack1.Text = this._language.VideoControls.SecondsBackShort;
            this.buttonSecBack2.Text = this._language.VideoControls.SecondsBackShort;
            this.buttonForward1.Text = this._language.VideoControls.SecondsForwardShort;
            this.buttonForward2.Text = this._language.VideoControls.SecondsForwardShort;
            this.labelVideoPosition.Text = this._language.VideoControls.VideoPosition;
            this.labelVideoPosition2.Text = this._language.VideoControls.VideoPosition;
            this.labelCreateTip.Text = this._language.VideoControls.CreateTip;

            this.buttonSetStartAndOffsetRest.Text = this._language.VideoControls.SetstartTimeAndOffsetOfRest;
            this.buttonSetEndAndGoToNext.Text = this._language.VideoControls.SetEndTimeAndGoToNext;
            this.buttonAdjustSetStartTime.Text = this._language.VideoControls.SetStartTime;
            this.buttonAdjustSetEndTime.Text = this._language.VideoControls.SetEndTime;
            this.buttonAdjustPlayBefore.Text = this._language.VideoControls.PlayFromJustBeforeText;
            this.buttonAdjustGoToPosAndPause.Text = this._language.VideoControls.GoToSubtitlePositionAndPause;
            this.buttonAdjustSecBack1.Text = this._language.VideoControls.SecondsBackShort;
            this.buttonAdjustSecBack2.Text = this._language.VideoControls.SecondsBackShort;
            this.buttonAdjustSecForward1.Text = this._language.VideoControls.SecondsForwardShort;
            this.buttonAdjustSecForward2.Text = this._language.VideoControls.SecondsForwardShort;
            this.labelAdjustTip.Text = this._language.VideoControls.CreateTip;

            // waveform
            var languageWaveform = Configuration.Settings.Language.Waveform;
            this.addParagraphHereToolStripMenuItem.Text = languageWaveform.AddParagraphHere;
            this.addParagraphAndPasteToolStripMenuItem.Text = languageWaveform.AddParagraphHereAndPasteText;
            this.deleteParagraphToolStripMenuItem.Text = languageWaveform.DeleteParagraph;
            this.toolStripMenuItemFocusTextbox.Text = languageWaveform.FocusTextBox;

            this.splitToolStripMenuItem1.Text = languageWaveform.Split;
            this.mergeWithPreviousToolStripMenuItem.Text = languageWaveform.MergeWithPrevious;
            this.mergeWithNextToolStripMenuItem.Text = languageWaveform.MergeWithNext;
            this.toolStripMenuItemWaveformPlaySelection.Text = languageWaveform.PlaySelection;
            this.showWaveformAndSpectrogramToolStripMenuItem.Text = languageWaveform.ShowWaveformAndSpectrogram;
            this.showOnlyWaveformToolStripMenuItem.Text = languageWaveform.ShowWaveformOnly;
            this.showOnlySpectrogramToolStripMenuItem.Text = languageWaveform.ShowSpectrogramOnly;
            this.seekSilenceToolStripMenuItem.Text = languageWaveform.SeekSilence;
            this.guessTimeCodesToolStripMenuItem.Text = languageWaveform.GuessTimeCodes;

            this.toolStripButtonWaveformZoomOut.ToolTipText = languageWaveform.ZoomOut;
            this.toolStripButtonWaveformZoomIn.ToolTipText = languageWaveform.ZoomIn;

            if (Configuration.Settings.VideoControls.GenerateSpectrogram)
            {
                this.audioVisualizer.WaveformNotLoadedText = languageWaveform.ClickToAddWaveformAndSpectrogram;
            }
            else
            {
                this.audioVisualizer.WaveformNotLoadedText = languageWaveform.ClickToAddWaveform;
            }
        }

        /// <summary>
        /// The set format to sub rip.
        /// </summary>
        private void SetFormatToSubRip()
        {
            this.comboBoxSubtitleFormats.SelectedIndexChanged -= this.ComboBoxSubtitleFormatsSelectedIndexChanged;
            foreach (var format in SubtitleFormat.AllSubtitleFormats)
            {
                if (!format.IsVobSubIndexFile)
                {
                    this.comboBoxSubtitleFormats.Items.Add(format.FriendlyName);
                }
            }

            this.comboBoxSubtitleFormats.SelectedIndex = 0;
            this.comboBoxSubtitleFormats.SelectedIndexChanged += this.ComboBoxSubtitleFormatsSelectedIndexChanged;
        }

        /// <summary>
        /// The continue new or exit.
        /// </summary>
        /// <returns>
        /// The <see cref="bool"/>.
        /// </returns>
        private bool ContinueNewOrExit()
        {
            if (this._changeSubtitleToString != SerializeSubtitle(this._subtitle))
            {
                if (this._lastDoNotPrompt != SerializeSubtitle(this._subtitle))
                {
                    string promptText = this._language.SaveChangesToUntitled;
                    if (!string.IsNullOrEmpty(this._fileName))
                    {
                        promptText = string.Format(this._language.SaveChangesToX, this._fileName);
                    }

                    var dr = MessageBox.Show(this, promptText, this.Title, MessageBoxButtons.YesNoCancel, MessageBoxIcon.Exclamation);

                    if (dr == DialogResult.Cancel)
                    {
                        return false;
                    }

                    if (dr == DialogResult.Yes)
                    {
                        if (string.IsNullOrEmpty(this._fileName))
                        {
                            if (!string.IsNullOrEmpty(this.openFileDialog1.InitialDirectory))
                            {
                                this.saveFileDialog1.InitialDirectory = this.openFileDialog1.InitialDirectory;
                            }

                            this.saveFileDialog1.Title = this._language.SaveSubtitleAs;
                            if (this.saveFileDialog1.ShowDialog(this) == DialogResult.OK)
                            {
                                this.openFileDialog1.InitialDirectory = this.saveFileDialog1.InitialDirectory;
                                this._fileName = this.saveFileDialog1.FileName;
                                this.SetTitle();
                                Configuration.Settings.RecentFiles.Add(this._fileName, this.FirstVisibleIndex, this.FirstSelectedIndex, this._videoFileName, this._subtitleAlternateFileName);
                                Configuration.Settings.Save();
                            }
                            else
                            {
                                return false;
                            }
                        }

                        if (this.SaveSubtitle(this.GetCurrentSubtitleFormat()) != DialogResult.OK)
                        {
                            return false;
                        }
                    }
                }
            }

            return this.ContinueNewOrExitAlternate();
        }

        /// <summary>
        /// The continue new or exit alternate.
        /// </summary>
        /// <returns>
        /// The <see cref="bool"/>.
        /// </returns>
        private bool ContinueNewOrExitAlternate()
        {
            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && this._subtitleAlternate != null && this._subtitleAlternate.Paragraphs.Count > 0 && this._changeAlternateSubtitleToString != this._subtitleAlternate.ToText(new SubRip()).Trim())
            {
                string promptText = this._language.SaveChangesToUntitledOriginal;
                if (!string.IsNullOrEmpty(this._subtitleAlternateFileName))
                {
                    promptText = string.Format(this._language.SaveChangesToOriginalX, this._subtitleAlternateFileName);
                }

                var dr = MessageBox.Show(this, promptText, this.Title, MessageBoxButtons.YesNoCancel, MessageBoxIcon.Exclamation);

                if (dr == DialogResult.Cancel)
                {
                    return false;
                }

                if (dr == DialogResult.Yes)
                {
                    if (string.IsNullOrEmpty(this._subtitleAlternateFileName))
                    {
                        if (!string.IsNullOrEmpty(this.openFileDialog1.InitialDirectory))
                        {
                            this.saveFileDialog1.InitialDirectory = this.openFileDialog1.InitialDirectory;
                        }

                        this.saveFileDialog1.Title = this._language.SaveOriginalSubtitleAs;
                        if (this.saveFileDialog1.ShowDialog(this) == DialogResult.OK)
                        {
                            this.openFileDialog1.InitialDirectory = this.saveFileDialog1.InitialDirectory;
                            this._subtitleAlternateFileName = this.saveFileDialog1.FileName;
                        }
                        else
                        {
                            return false;
                        }
                    }

                    if (this.SaveOriginalSubtitle(this.GetCurrentSubtitleFormat()) != DialogResult.OK)
                    {
                        return false;
                    }
                }
            }

            this._lastDoNotPrompt = SerializeSubtitle(this._subtitle);
            return true;
        }

        /// <summary>
        /// The exit tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ExitToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.ReloadFromSourceView();
            Application.Exit();
        }

        /// <summary>
        /// The about tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void AboutToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.ReloadFromSourceView();
            using (var about = new About())
            {
                about.Initialize();
                about.ShowDialog(this);
            }
        }

        /// <summary>
        /// The visual sync tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void VisualSyncToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.ReloadFromSourceView();
            this.ShowVisualSync(false);
        }

        /// <summary>
        /// The make history for undo.
        /// </summary>
        /// <param name="description">
        /// The description.
        /// </param>
        /// <param name="resetTextUndo">
        /// The reset text undo.
        /// </param>
        public void MakeHistoryForUndo(string description, bool resetTextUndo)
        {
            if (this._makeHistoryPaused)
            {
                return;
            }

            if (resetTextUndo)
            {
                this._listViewTextUndoLast = null;
                this._listViewAlternateTextUndoLast = null;
            }

            if (this._undoIndex == -1)
            {
                this._subtitle.HistoryItems.Clear();
            }
            else
            {
                // remove items for redo
                while (this._subtitle.HistoryItems.Count > this._undoIndex + 1)
                {
                    this._subtitle.HistoryItems.RemoveAt(this._subtitle.HistoryItems.Count - 1);
                }
            }

            this._subtitle.FileName = this._fileName;
            this._subtitle.MakeHistoryForUndo(description, this.GetCurrentSubtitleFormat(), this._fileDateTime, this._subtitleAlternate, this._subtitleAlternateFileName, this._subtitleListViewIndex, this.textBoxListViewText.SelectionStart, this.textBoxListViewTextAlternate.SelectionStart);
            this._undoIndex++;

            if (this._undoIndex > Subtitle.MaximumHistoryItems)
            {
                this._undoIndex--;
            }
        }

        /// <summary>
        /// The make history for undo.
        /// </summary>
        /// <param name="description">
        /// The description.
        /// </param>
        public void MakeHistoryForUndo(string description)
        {
            this.MakeHistoryForUndo(description, true);
        }

        /// <summary>
        /// Add undo history - but only if last entry is older than 500 ms
        /// </summary>
        /// <param name="description">
        /// Undo description
        /// </param>
        public void MakeHistoryForUndoOnlyIfNotResent(string description)
        {
            if (this._makeHistoryPaused)
            {
                return;
            }

            if ((DateTime.Now.Ticks - this._lastHistoryTicks) > 10000 * 500)
            {
                // only if last change was longer ago than 500 milliseconds
                this.MakeHistoryForUndo(description);
                this._lastHistoryTicks = DateTime.Now.Ticks;
            }
        }

        /// <summary>
        /// The show visual sync.
        /// </summary>
        /// <param name="onlySelectedLines">
        /// The only selected lines.
        /// </param>
        private void ShowVisualSync(bool onlySelectedLines)
        {
            if (!this.IsSubtitleLoaded)
            {
                this.DisplaySubtitleNotLoadedMessage();
                return;
            }

            using (var visualSync = new VisualSync())
            {
                visualSync.VideoFileName = this._videoFileName;
                visualSync.AudioTrackNumber = this._videoAudioTrackNumber;

                this.SaveSubtitleListviewIndices();
                if (onlySelectedLines)
                {
                    var selectedLines = new Subtitle { WasLoadedWithFrameNumbers = this._subtitle.WasLoadedWithFrameNumbers };
                    foreach (int index in this.SubtitleListview1.SelectedIndices)
                    {
                        selectedLines.Paragraphs.Add(this._subtitle.Paragraphs[index]);
                    }

                    visualSync.Initialize(this.toolStripButtonVisualSync.Image as Bitmap, selectedLines, this._fileName, this._language.VisualSyncSelectedLines, this.CurrentFrameRate);
                }
                else
                {
                    visualSync.Initialize(this.toolStripButtonVisualSync.Image as Bitmap, this._subtitle, this._fileName, this._language.VisualSyncTitle, this.CurrentFrameRate);
                }

                this._endSeconds = -1;
                this.mediaPlayer.Pause();
                if (visualSync.ShowDialog(this) == DialogResult.OK)
                {
                    this.MakeHistoryForUndo(this._language.BeforeVisualSync);

                    if (onlySelectedLines)
                    { // we only update selected lines
                        int i = 0;
                        foreach (int index in this.SubtitleListview1.SelectedIndices)
                        {
                            this._subtitle.Paragraphs[index] = visualSync.Paragraphs[i];
                            i++;
                        }

                        this.ShowStatus(this._language.VisualSyncPerformedOnSelectedLines);
                    }
                    else
                    {
                        this._subtitle.Paragraphs.Clear();
                        foreach (var p in visualSync.Paragraphs)
                        {
                            this._subtitle.Paragraphs.Add(new Paragraph(p));
                        }

                        this.ShowStatus(this._language.VisualSyncPerformed);
                    }

                    if (visualSync.FrameRateChanged)
                    {
                        this.toolStripComboBoxFrameRate.Text = string.Format("{0:0.###}", visualSync.FrameRate);
                    }

                    if (this.IsFramesRelevant && this.CurrentFrameRate > 0)
                    {
                        this._subtitle.CalculateFrameNumbersFromTimeCodesNoCheck(this.CurrentFrameRate);
                        if (this.tabControlSubtitle.SelectedIndex == TabControlSourceView)
                        {
                            this.ShowSource();
                        }
                    }

                    this.ShowSource();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this.RestoreSubtitleListviewIndices();
                    if (onlySelectedLines && this.SubtitleListview1.SelectedItems.Count > 0)
                    {
                        this.SubtitleListview1.EnsureVisible(this.SubtitleListview1.SelectedItems[this.SubtitleListview1.SelectedItems.Count - 1].Index);
                    }
                }

                this._videoFileName = visualSync.VideoFileName;
            }
        }

        /// <summary>
        /// The open tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void OpenToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.openToolStripMenuItem.Enabled = false;
            this.ReloadFromSourceView();
            this.OpenNewFile();
            this.openToolStripMenuItem.Enabled = true;
        }

        /// <summary>
        /// The open new file.
        /// </summary>
        private void OpenNewFile()
        {
            if (this._openFileDialogOn)
            {
                return;
            }

            this._openFileDialogOn = true;
            this._lastDoNotPrompt = string.Empty;
            if (!this.ContinueNewOrExit())
            {
                this._openFileDialogOn = false;
                return;
            }

            this.openFileDialog1.Title = this._languageGeneral.OpenSubtitle;
            this.openFileDialog1.FileName = string.Empty;
            this.openFileDialog1.Filter = Utilities.GetOpenDialogFilter();
            if (this.openFileDialog1.ShowDialog(this) == DialogResult.OK)
            {
                this.RemoveAlternate(true);
                this.OpenSubtitle(this.openFileDialog1.FileName, null);
            }

            this._openFileDialogOn = false;
        }

        /// <summary>
        /// The open subtitle.
        /// </summary>
        /// <param name="fileName">
        /// The file name.
        /// </param>
        /// <param name="encoding">
        /// The encoding.
        /// </param>
        private void OpenSubtitle(string fileName, Encoding encoding)
        {
            this.OpenSubtitle(fileName, encoding, null, null);
        }

        /// <summary>
        /// The reset history.
        /// </summary>
        private void ResetHistory()
        {
            this._undoIndex = -1;
            this._subtitle.HistoryItems.Clear();
        }

        /// <summary>
        /// The open subtitle.
        /// </summary>
        /// <param name="fileName">
        /// The file name.
        /// </param>
        /// <param name="encoding">
        /// The encoding.
        /// </param>
        /// <param name="videoFileName">
        /// The video file name.
        /// </param>
        /// <param name="originalFileName">
        /// The original file name.
        /// </param>
        private void OpenSubtitle(string fileName, Encoding encoding, string videoFileName, string originalFileName)
        {
            if (File.Exists(fileName))
            {
                bool videoFileLoaded = false;
                var file = new FileInfo(fileName);
                var ext = file.Extension.ToLowerInvariant();

                // save last first visible index + first selected index from listview
                if (!string.IsNullOrEmpty(this._fileName))
                {
                    Configuration.Settings.RecentFiles.Add(this._fileName, this.FirstVisibleIndex, this.FirstSelectedIndex, this._videoFileName, originalFileName);
                }

                this.openFileDialog1.InitialDirectory = file.DirectoryName;

                if (ext == ".sub" && this.IsVobSubFile(fileName, false))
                {
                    if (MessageBox.Show(this, this._language.ImportThisVobSubSubtitle, this._title, MessageBoxButtons.YesNo) == DialogResult.Yes)
                    {
                        this.ImportAndOcrVobSubSubtitleNew(fileName, this._loading);
                    }

                    return;
                }

                if (ext == ".sup")
                {
                    if (FileUtil.IsBluRaySup(fileName))
                    {
                        this.ImportAndOcrBluRaySup(fileName, this._loading);
                        return;
                    }
                    else if (FileUtil.IsSpDvdSup(fileName))
                    {
                        this.ImportAndOcrSpDvdSup(fileName, this._loading);
                        return;
                    }
                }

                if (ext == ".mkv" || ext == ".mks")
                {
                    this.ImportSubtitleFromMatroskaFile(fileName);
                    return;
                }

                if (ext == ".divx" || ext == ".avi")
                {
                    if (this.ImportSubtitleFromDivX(fileName))
                    {
                        return;
                    }
                }

                if ((ext == ".ts" || ext == ".rec" || ext == ".mpeg" || ext == ".mpg") && file.Length > 10000 && FileUtil.IsTransportStream(fileName))
                {
                    this.ImportSubtitleFromTransportStream(fileName);
                    return;
                }

                if ((ext == ".m2ts") && file.Length > 10000 && FileUtil.IsM2TransportStream(fileName))
                {
                    bool isTextSt = false;
                    if (file.Length < 2000000)
                    {
                        var textSt = new TextST();
                        isTextSt = textSt.IsMine(null, fileName);
                    }

                    if (!isTextSt)
                    {
                        this.ImportSubtitleFromTransportStream(fileName);
                        return;
                    }
                }

                if ((ext == ".mp4" || ext == ".m4v" || ext == ".3gp") && file.Length > 10000)
                {
                    if (this.ImportSubtitleFromMp4(fileName))
                    {
                        this.OpenVideo(fileName);
                    }

                    return;
                }

                if (ext == ".mxf")
                {
                    if (FileUtil.IsMaterialExchangeFormat(fileName))
                    {
                        var parser = new MxfParser(fileName);
                        if (parser.IsValid)
                        {
                            var subtitles = parser.GetSubtitles();
                            if (subtitles.Count > 0)
                            {
                                this.SetEncoding(Configuration.Settings.General.DefaultEncoding);
                                encoding = this.GetCurrentEncoding();
                                var list = new List<string>(subtitles[0].Replace(Environment.NewLine, "\r").Replace("\n", "\r").Split('\r'));
                                this._subtitle = new Subtitle();
                                var mxfFormat = this._subtitle.ReloadLoadSubtitle(list, null);
                                this.SetCurrentFormat(mxfFormat);
                                this._fileName = Path.GetFileNameWithoutExtension(fileName);
                                this.SetTitle();
                                this.ShowStatus(string.Format(this._language.LoadedSubtitleX, this._fileName));
                                this._sourceViewChange = false;
                                this._changeSubtitleToString = SerializeSubtitle(this._subtitle);
                                this.ResetHistory();
                                this.SetUndockedWindowsTitle();
                                this._converted = true;
                                this.ShowStatus(string.Format(this._language.LoadedSubtitleX, this._fileName) + " - " + string.Format(this._language.ConvertedToX, mxfFormat.FriendlyName));

                                this.ShowSource();
                                this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                                this._subtitleListViewIndex = -1;
                                this.SubtitleListview1.FirstVisibleIndex = -1;
                                this.SubtitleListview1.SelectIndexAndEnsureVisible(0);

                                return;
                            }

                            MessageBox.Show("No subtitles found!");
                            return;
                        }
                    }
                }

                if (file.Length > 1024 * 1024 * 10)
                {
                    // max 10 mb
                    // retry Blu-ray sup (file with wrong extension)
                    if (FileUtil.IsBluRaySup(fileName))
                    {
                        this.ImportAndOcrBluRaySup(fileName, this._loading);
                        return;
                    }

                    // retry vobsub (file with wrong extension)
                    if (this.IsVobSubFile(fileName, false))
                    {
                        if (MessageBox.Show(this, this._language.ImportThisVobSubSubtitle, this._title, MessageBoxButtons.YesNo) == DialogResult.Yes)
                        {
                            this.ImportAndOcrVobSubSubtitleNew(fileName, this._loading);
                        }

                        return;
                    }

                    var text = string.Format(this._language.FileXIsLargerThan10MB + Environment.NewLine + Environment.NewLine + this._language.ContinueAnyway, fileName);
                    if (MessageBox.Show(this, text, this.Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                    {
                        return;
                    }
                }

                if (this._subtitle.HistoryItems.Count > 0 || this._subtitle.Paragraphs.Count > 0)
                {
                    this.MakeHistoryForUndo(string.Format(this._language.BeforeLoadOf, Path.GetFileName(fileName)));
                }

                bool change = this._changeSubtitleToString != SerializeSubtitle(this._subtitle);
                if (change)
                {
                    change = this._lastDoNotPrompt != SerializeSubtitle(this._subtitle);
                }

                SubtitleFormat format = this._subtitle.LoadSubtitle(fileName, out encoding, encoding);
                if (!change)
                {
                    this._changeSubtitleToString = SerializeSubtitle(this._subtitle);
                }

                this.ShowHideTextBasedFeatures(format);

                bool justConverted = false;
                if (format == null)
                {
                    var ebu = new Ebu();
                    if (ebu.IsMine(null, fileName))
                    {
                        ebu.LoadSubtitle(this._subtitle, null, fileName);
                        this._oldSubtitleFormat = ebu;
                        this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        this.SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = this.GetCurrentEncoding();
                        justConverted = true;
                        format = this.GetCurrentSubtitleFormat();
                    }
                }

                if (format == null)
                {
                    var pac = new Pac();
                    if (pac.IsMine(null, fileName))
                    {
                        pac.LoadSubtitle(this._subtitle, null, fileName);
                        this._oldSubtitleFormat = pac;
                        this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        this.SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = this.GetCurrentEncoding();
                        justConverted = true;
                        format = this.GetCurrentSubtitleFormat();
                    }
                }

                if (ext == ".m2ts")
                {
                    var textST = new TextST();
                    if (textST.IsMine(null, fileName))
                    {
                        textST.LoadSubtitle(this._subtitle, null, fileName);
                        this._oldSubtitleFormat = textST;
                        this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        this.SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = this.GetCurrentEncoding();
                        justConverted = true;
                        format = this.GetCurrentSubtitleFormat();
                    }
                }

                if (format == null)
                {
                    var pns = new Pns();
                    if (pns.IsMine(null, fileName))
                    {
                        pns.LoadSubtitle(this._subtitle, null, fileName);
                        this._oldSubtitleFormat = pns;
                        this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        this.SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = this.GetCurrentEncoding();
                        justConverted = true;
                        format = this.GetCurrentSubtitleFormat();
                    }
                }

                if (format == null)
                {
                    var cavena890 = new Cavena890();
                    if (cavena890.IsMine(null, fileName))
                    {
                        cavena890.LoadSubtitle(this._subtitle, null, fileName);
                        this._oldSubtitleFormat = cavena890;
                        this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        this.SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = this.GetCurrentEncoding();
                        justConverted = true;
                        format = this.GetCurrentSubtitleFormat();
                    }
                }

                if (format == null)
                {
                    var spt = new Spt();
                    if (spt.IsMine(null, fileName))
                    {
                        spt.LoadSubtitle(this._subtitle, null, fileName);
                        this._oldSubtitleFormat = spt;
                        this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        this.SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = this.GetCurrentEncoding();
                        justConverted = true;
                        format = this.GetCurrentSubtitleFormat();
                    }
                }

                if (format == null && ext == ".wsb")
                {
                    var wsb = new Wsb();
                    var list = new List<string>(File.ReadAllLines(fileName, Utilities.GetEncodingFromFile(fileName)));
                    if (wsb.IsMine(list, fileName))
                    {
                        wsb.LoadSubtitle(this._subtitle, list, fileName);
                        this._oldSubtitleFormat = wsb;
                        this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        this.SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = this.GetCurrentEncoding();
                        justConverted = true;
                        format = this.GetCurrentSubtitleFormat();
                    }
                }

                if (format == null)
                {
                    var cheetahCaption = new CheetahCaption();
                    if (cheetahCaption.IsMine(null, fileName))
                    {
                        cheetahCaption.LoadSubtitle(this._subtitle, null, fileName);
                        this._oldSubtitleFormat = cheetahCaption;
                        this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        this.SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = this.GetCurrentEncoding();
                        justConverted = true;
                        format = this.GetCurrentSubtitleFormat();
                    }
                }

                if (format == null)
                {
                    var capMakerPlus = new CapMakerPlus();
                    if (capMakerPlus.IsMine(null, fileName))
                    {
                        capMakerPlus.LoadSubtitle(this._subtitle, null, fileName);
                        this._oldSubtitleFormat = capMakerPlus;
                        this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        this.SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = this.GetCurrentEncoding();
                        justConverted = true;
                        format = this.GetCurrentSubtitleFormat();
                    }
                }

                if (format == null)
                {
                    var captionsInc = new CaptionsInc();
                    if (captionsInc.IsMine(null, fileName))
                    {
                        captionsInc.LoadSubtitle(this._subtitle, null, fileName);
                        this._oldSubtitleFormat = captionsInc;
                        this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        this.SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = this.GetCurrentEncoding();
                        justConverted = true;
                        format = this.GetCurrentSubtitleFormat();
                    }
                }

                if (format == null)
                {
                    var ultech130 = new Ultech130();
                    if (ultech130.IsMine(null, fileName))
                    {
                        ultech130.LoadSubtitle(this._subtitle, null, fileName);
                        this._oldSubtitleFormat = ultech130;
                        this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        this.SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = this.GetCurrentEncoding();
                        justConverted = true;
                        format = this.GetCurrentSubtitleFormat();
                    }
                }

                if (format == null)
                {
                    var nciCaption = new NciCaption();
                    if (nciCaption.IsMine(null, fileName))
                    {
                        nciCaption.LoadSubtitle(this._subtitle, null, fileName);
                        this._oldSubtitleFormat = nciCaption;
                        this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        this.SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = this.GetCurrentEncoding();
                        justConverted = true;
                        format = this.GetCurrentSubtitleFormat();
                    }
                }

                if (format == null)
                {
                    var tsb4 = new TSB4();
                    if (tsb4.IsMine(null, fileName))
                    {
                        tsb4.LoadSubtitle(this._subtitle, null, fileName);
                        this._oldSubtitleFormat = tsb4;
                        this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        this.SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = this.GetCurrentEncoding();
                        justConverted = true;
                        format = this.GetCurrentSubtitleFormat();
                    }
                }

                if (format == null)
                {
                    var avidStl = new AvidStl();
                    if (avidStl.IsMine(null, fileName))
                    {
                        avidStl.LoadSubtitle(this._subtitle, null, fileName);
                        this._oldSubtitleFormat = avidStl;
                        this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        this.SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = this.GetCurrentEncoding();
                        justConverted = true;
                        format = this.GetCurrentSubtitleFormat();
                    }
                }

                if (format == null)
                {
                    var chk = new Chk();
                    if (chk.IsMine(null, fileName))
                    {
                        chk.LoadSubtitle(this._subtitle, null, fileName);
                        this._oldSubtitleFormat = chk;
                        this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        this.SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = this.GetCurrentEncoding();
                        justConverted = true;
                        format = this.GetCurrentSubtitleFormat();
                    }
                }

                if (format == null)
                {
                    var ayato = new Ayato();
                    if (ayato.IsMine(null, fileName))
                    {
                        ayato.LoadSubtitle(this._subtitle, null, fileName);
                        this._oldSubtitleFormat = ayato;
                        this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        this.SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = this.GetCurrentEncoding();
                        justConverted = true;
                        format = this.GetCurrentSubtitleFormat();
                    }
                }

                if (format == null)
                {
                    var pacUnicode = new PacUnicode();
                    if (pacUnicode.IsMine(null, fileName))
                    {
                        pacUnicode.LoadSubtitle(this._subtitle, null, fileName);
                        this._oldSubtitleFormat = pacUnicode;
                        this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        this.SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = this.GetCurrentEncoding();
                        justConverted = true;
                        format = this.GetCurrentSubtitleFormat();
                    }
                }

                if (format == null)
                {
                    try
                    {
                        var bdnXml = new BdnXml();
                        var list = new List<string>(File.ReadAllLines(fileName, Utilities.GetEncodingFromFile(fileName)));
                        if (bdnXml.IsMine(list, fileName))
                        {
                            if (this.ContinueNewOrExit())
                            {
                                this.ImportAndOcrBdnXml(fileName, bdnXml, list);
                            }

                            return;
                        }
                    }
                    catch
                    {
                        format = null;
                    }
                }

                if (format == null)
                {
                    try
                    {
                        var fcpImage = new FinalCutProImage();
                        var list = new List<string>(File.ReadAllLines(fileName, Utilities.GetEncodingFromFile(fileName)));
                        if (fcpImage.IsMine(list, fileName))
                        {
                            if (this.ContinueNewOrExit())
                            {
                                this.ImportAndOcrDost(fileName, fcpImage, list);
                            }

                            return;
                        }
                    }
                    catch
                    {
                        format = null;
                    }
                }

                if (format == null)
                {
                    var elr = new ELRStudioClosedCaption();
                    if (elr.IsMine(null, fileName))
                    {
                        elr.LoadSubtitle(this._subtitle, null, fileName);
                        this._oldSubtitleFormat = elr;
                        this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        this.SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = this.GetCurrentEncoding();
                        justConverted = true;
                        format = this.GetCurrentSubtitleFormat();
                    }
                }

                if (format == null)
                {
                    var asc = new TimeLineAscii();
                    if (asc.IsMine(null, fileName))
                    {
                        asc.LoadSubtitle(this._subtitle, null, fileName);
                        this._oldSubtitleFormat = asc;
                        this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        this.SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = this.GetCurrentEncoding();
                        justConverted = true;
                        format = this.GetCurrentSubtitleFormat();
                    }
                }

                if (format == null)
                {
                    var asc = new TimeLineFootageAscii();
                    if (asc.IsMine(null, fileName))
                    {
                        asc.LoadSubtitle(this._subtitle, null, fileName);
                        this._oldSubtitleFormat = asc;
                        this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        this.SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = this.GetCurrentEncoding();
                        justConverted = true;
                        format = this.GetCurrentSubtitleFormat();
                    }
                }

                if (format == null)
                {
                    var mtv = new TimeLineMvt();
                    if (mtv.IsMine(null, fileName))
                    {
                        mtv.LoadSubtitle(this._subtitle, null, fileName);
                        this._oldSubtitleFormat = mtv;
                        this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                        this.SetEncoding(Configuration.Settings.General.DefaultEncoding);
                        encoding = this.GetCurrentEncoding();
                        justConverted = true;
                        format = this.GetCurrentSubtitleFormat();
                    }
                }

                if (ext == ".dost")
                {
                    try
                    {
                        var dost = new Dost();
                        var list = new List<string>(File.ReadAllLines(fileName, Utilities.GetEncodingFromFile(fileName)));
                        if (dost.IsMine(list, fileName))
                        {
                            if (this.ContinueNewOrExit())
                            {
                                this.ImportAndOcrDost(fileName, dost, list);
                            }

                            return;
                        }
                    }
                    catch
                    {
                        format = null;
                    }
                }

                if (format == null || format.Name == Scenarist.NameOfFormat)
                {
                    try
                    {
                        var son = new Son();
                        var list = new List<string>(File.ReadAllLines(fileName, Utilities.GetEncodingFromFile(fileName)));
                        if (son.IsMine(list, fileName))
                        {
                            if (this.ContinueNewOrExit())
                            {
                                this.ImportAndOcrSon(fileName, son, list);
                            }

                            return;
                        }
                    }
                    catch
                    {
                        format = null;
                    }
                }

                if (format == null || format.Name == SubRip.NameOfFormat)
                {
                    if (this._subtitle.Paragraphs.Count > 1)
                    {
                        int imageCount = 0;
                        foreach (var p in this._subtitle.Paragraphs)
                        {
                            string s = p.Text.ToLowerInvariant();
                            if (s.EndsWith(".bmp", StringComparison.Ordinal) || s.EndsWith(".png", StringComparison.Ordinal) || s.EndsWith(".jpg", StringComparison.Ordinal) || s.EndsWith(".tif", StringComparison.Ordinal))
                            {
                                imageCount++;
                            }
                        }

                        if (imageCount > 2 && imageCount >= this._subtitle.Paragraphs.Count - 2)
                        {
                            if (this.ContinueNewOrExit())
                            {
                                this.ImportAndOcrSrt(this._subtitle);
                            }

                            return;
                        }
                    }
                }

                if (format == null)
                {
                    try
                    {
                        var satBoxPng = new SatBoxPng();
                        var list = new List<string>(File.ReadAllLines(fileName, Utilities.GetEncodingFromFile(fileName)));
                        if (satBoxPng.IsMine(list, fileName))
                        {
                            var subtitle = new Subtitle();
                            satBoxPng.LoadSubtitle(subtitle, list, fileName);
                            if (this.ContinueNewOrExit())
                            {
                                this.ImportAndOcrSrt(subtitle);
                            }

                            return;
                        }
                    }
                    catch
                    {
                        format = null;
                    }
                }

                if (format == null || format.Name == Scenarist.NameOfFormat)
                {
                    try
                    {
                        var sst = new SonicScenaristBitmaps();
                        var list = new List<string>(File.ReadAllLines(fileName, Utilities.GetEncodingFromFile(fileName)));
                        if (sst.IsMine(list, fileName))
                        {
                            if (this.ContinueNewOrExit())
                            {
                                this.ImportAndOcrSst(fileName, sst, list);
                            }

                            return;
                        }
                    }
                    catch
                    {
                        format = null;
                    }
                }

                if (format == null)
                {
                    try
                    {
                        var htmlSamiArray = new HtmlSamiArray();
                        var list = new List<string>(File.ReadAllLines(fileName, Utilities.GetEncodingFromFile(fileName)));
                        if (htmlSamiArray.IsMine(list, fileName))
                        {
                            htmlSamiArray.LoadSubtitle(this._subtitle, list, fileName);
                            this._oldSubtitleFormat = htmlSamiArray;
                            this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                            this.SetEncoding(Configuration.Settings.General.DefaultEncoding);
                            encoding = this.GetCurrentEncoding();
                            justConverted = true;
                            format = this.GetCurrentSubtitleFormat();
                        }
                    }
                    catch
                    {
                        format = null;
                    }
                }

                // retry vobsub (file with wrong extension)
                if (format == null && file.Length > 500 && this.IsVobSubFile(fileName, false))
                {
                    if (MessageBox.Show(this, this._language.ImportThisVobSubSubtitle, this._title, MessageBoxButtons.YesNo) == DialogResult.Yes)
                    {
                        this.ImportAndOcrVobSubSubtitleNew(fileName, this._loading);
                    }

                    return;
                }

                // retry Blu-ray (file with wrong extension)
                if (format == null && file.Length > 500 && FileUtil.IsBluRaySup(fileName))
                {
                    this.ImportAndOcrBluRaySup(fileName, this._loading);
                    return;
                }

                // retry SP DVD (file with wrong extension)
                if (format == null && file.Length > 500 && FileUtil.IsSpDvdSup(fileName))
                {
                    this.ImportAndOcrSpDvdSup(fileName, this._loading);
                    return;
                }

                // retry Matroska (file with wrong extension)
                if (format == null && !string.IsNullOrWhiteSpace(fileName))
                {
                    var matroska = new MatroskaFile(fileName);
                    if (matroska.IsValid)
                    {
                        var subtitleList = matroska.GetTracks(true);
                        if (subtitleList.Count > 0)
                        {
                            this.ImportSubtitleFromMatroskaFile(fileName);
                            return;
                        }
                    }
                }

                // check for idx file
                if (format == null && file.Length > 100 && ext == ".idx")
                {
                    MessageBox.Show(this._language.ErrorLoadIdx);
                    return;
                }

                // check for .rar file
                if (format == null && file.Length > 100 && FileUtil.IsRar(fileName))
                {
                    MessageBox.Show(this._language.ErrorLoadRar);
                    return;
                }

                // check for .zip file
                if (format == null && file.Length > 100 && FileUtil.IsZip(fileName))
                {
                    MessageBox.Show(this._language.ErrorLoadZip);
                    return;
                }

                // check for .png file
                if (format == null && file.Length > 100 && FileUtil.IsPng(fileName))
                {
                    MessageBox.Show(this._language.ErrorLoadPng);
                    return;
                }

                // check for .jpg file
                if (format == null && file.Length > 100 && FileUtil.IsJpg(fileName))
                {
                    MessageBox.Show(this._language.ErrorLoadJpg);
                    return;
                }

                // check for .srr file
                if (format == null && file.Length > 100 && ext == ".srr" && FileUtil.IsSrr(fileName))
                {
                    MessageBox.Show(this._language.ErrorLoadSrr);
                    return;
                }

                // check for Torrent file
                if (format == null && file.Length > 50 && FileUtil.IsTorrentFile(fileName))
                {
                    MessageBox.Show(this._language.ErrorLoadTorrent);
                    return;
                }

                // check for all binary zeroes (I've heard about this a few times... perhaps related to crashes?)
                if (format == null && file.Length > 50 && FileUtil.IsSubtitleFileAllBinaryZeroes(fileName))
                {
                    MessageBox.Show(this._language.ErrorLoadBinaryZeroes);
                    return;
                }

                if (format == null && file.Length < 100 * 1000000 && TransportStreamParser.IsDvbSup(fileName))
                {
                    this.ImportSubtitleFromDvbSupFile(fileName);
                    return;
                }

                if (format == null && file.Length < 500000)
                {
                    // Try to use a generic subtitle format parser (guessing subtitle format)
                    try
                    {
                        var enc = Utilities.GetEncodingFromFile(fileName);
                        var s = File.ReadAllText(fileName, enc);

                        // check for RTF file
                        if (ext == ".rtf" && s.TrimStart().StartsWith("{\\rtf", StringComparison.Ordinal))
                        {
                            using (var rtb = new RichTextBox { Rtf = s })
                            {
                                s = rtb.Text;
                            }
                        }

                        var uknownFormatImporter = new UknownFormatImporter { UseFrames = true };
                        var genericParseSubtitle = uknownFormatImporter.AutoGuessImport(s.SplitToLines());
                        if (genericParseSubtitle.Paragraphs.Count > 1)
                        {
                            this._subtitle = genericParseSubtitle;
                            this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                            this.SetEncoding(Configuration.Settings.General.DefaultEncoding);
                            encoding = this.GetCurrentEncoding();
                            justConverted = true;
                            format = this.GetCurrentSubtitleFormat();
                            this.ShowStatus("Guessed subtitle format via generic subtitle parser!");
                        }
                    }
                    catch
                    {
                    }
                }

                this._fileDateTime = File.GetLastWriteTime(fileName);

                if (format != null && format.IsFrameBased)
                {
                    this._subtitle.CalculateTimeCodesFromFrameNumbers(this.CurrentFrameRate);
                }
                else
                {
                    this._subtitle.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                }

                if (format != null)
                {
                    if (Configuration.Settings.General.RemoveBlankLinesWhenOpening)
                    {
                        this._subtitle.RemoveEmptyLines();
                    }

                    foreach (var p in this._subtitle.Paragraphs)
                    {
                        // Replace U+0456 (CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I) by U+0069 (LATIN SMALL LETTER I)
                        p.Text = p.Text.Replace("<і>", "<i>").Replace("</і>", "</i>");
                    }

                    this._subtitleListViewIndex = -1;
                    this.SetCurrentFormat(format);
                    this._subtitleAlternateFileName = null;
                    if (this.LoadAlternateSubtitleFile(originalFileName))
                    {
                        this._subtitleAlternateFileName = originalFileName;
                    }

                    // Seungki begin
                    this._splitDualSami = false;
                    if (Configuration.Settings.SubtitleSettings.SamiDisplayTwoClassesAsTwoSubtitles && format.GetType() == typeof(Sami) && Sami.GetStylesFromHeader(this._subtitle.Header).Count == 2)
                    {
                        var classes = Sami.GetStylesFromHeader(this._subtitle.Header);
                        var s1 = new Subtitle(this._subtitle);
                        var s2 = new Subtitle(this._subtitle);
                        s1.Paragraphs.Clear();
                        s2.Paragraphs.Clear();
                        foreach (var p in this._subtitle.Paragraphs)
                        {
                            if (p.Extra != null && p.Extra.Equals(classes[0], StringComparison.OrdinalIgnoreCase))
                            {
                                s1.Paragraphs.Add(p);
                            }
                            else
                            {
                                s2.Paragraphs.Add(p);
                            }
                        }

                        if (s1.Paragraphs.Count == 0 || s2.Paragraphs.Count == 0)
                        {
                            return;
                        }

                        this._subtitle = s1;
                        this._subtitleAlternate = s2;
                        this._subtitleAlternateFileName = this._fileName;
                        this.SubtitleListview1.HideExtraColumn();
                        this.SubtitleListview1.ShowAlternateTextColumn(classes[1]);
                        this._splitDualSami = true;
                    }

                    // Seungki end
                    this.textBoxSource.Text = this._subtitle.ToText(format);
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    if (this.SubtitleListview1.Items.Count > 0)
                    {
                        this.SubtitleListview1.Items[0].Selected = true;
                    }

                    this._findHelper = null;
                    this._spellCheckForm = null;

                    if (this._resetVideo)
                    {
                        this._videoFileName = null;
                        this._videoInfo = null;
                        this._videoAudioTrackNumber = -1;
                        this.labelVideoInfo.Text = this._languageGeneral.NoVideoLoaded;
                        this.audioVisualizer.WavePeaks = null;
                        this.audioVisualizer.ResetSpectrogram();
                        this.audioVisualizer.Invalidate();
                    }

                    if (Configuration.Settings.General.ShowVideoPlayer || Configuration.Settings.General.ShowAudioVisualizer)
                    {
                        if (!Configuration.Settings.General.DisableVideoAutoLoading)
                        {
                            if (!string.IsNullOrEmpty(videoFileName) && File.Exists(videoFileName))
                            {
                                this.OpenVideo(videoFileName);
                            }
                            else if (!string.IsNullOrEmpty(fileName) && (this.toolStripButtonToggleVideo.Checked || this.toolStripButtonToggleWaveform.Checked))
                            {
                                this.TryToFindAndOpenVideoFile(Path.Combine(Path.GetDirectoryName(fileName), Path.GetFileNameWithoutExtension(fileName)));
                            }
                        }
                    }

                    videoFileLoaded = this._videoFileName != null;

                    if (Configuration.Settings.RecentFiles.Files.Count > 0 && Configuration.Settings.RecentFiles.Files[0].FileName == fileName)
                    {
                    }
                    else
                    {
                        Configuration.Settings.RecentFiles.Add(fileName, this._videoFileName, this._subtitleAlternateFileName);
                        Configuration.Settings.Save();
                        this.UpdateRecentFilesUI();
                    }

                    this._fileName = fileName;
                    this.SetTitle();
                    this.ShowStatus(string.Format(this._language.LoadedSubtitleX, this._fileName));
                    this._sourceViewChange = false;
                    this._changeSubtitleToString = SerializeSubtitle(this._subtitle);
                    this._converted = false;
                    this.ResetHistory();

                    this.SetUndockedWindowsTitle();

                    if (justConverted)
                    {
                        this._converted = true;
                        this.ShowStatus(string.Format(this._language.LoadedSubtitleX, this._fileName) + " - " + string.Format(this._language.ConvertedToX, format.FriendlyName));
                    }

                    if (Configuration.Settings.General.AutoConvertToUtf8)
                    {
                        encoding = Encoding.UTF8;
                    }

                    this.SetEncoding(encoding);

                    if (format.GetType() == typeof(SubStationAlpha))
                    {
                        string errors = AdvancedSubStationAlpha.CheckForErrors(this._subtitle.Header);
                        if (!string.IsNullOrEmpty(errors))
                        {
                            MessageBox.Show(this, errors, this.Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }

                        errors = (format as SubStationAlpha).Errors;
                        if (!string.IsNullOrEmpty(errors))
                        {
                            MessageBox.Show(this, errors, this.Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                    }
                    else if (format.GetType() == typeof(AdvancedSubStationAlpha))
                    {
                        string errors = AdvancedSubStationAlpha.CheckForErrors(this._subtitle.Header);
                        if (!string.IsNullOrEmpty(errors))
                        {
                            MessageBox.Show(this, errors, this.Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }

                        errors = (format as AdvancedSubStationAlpha).Errors;
                        if (!string.IsNullOrEmpty(errors))
                        {
                            MessageBox.Show(errors, this.Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                    }
                    else if (format.GetType() == typeof(SubRip))
                    {
                        string errors = (format as SubRip).Errors;
                        if (!string.IsNullOrEmpty(errors))
                        {
                            MessageBox.Show(this, errors, this.Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                    }
                    else if (format.GetType() == typeof(MicroDvd))
                    {
                        string errors = (format as MicroDvd).Errors;
                        if (!string.IsNullOrEmpty(errors))
                        {
                            MessageBox.Show(this, errors, this.Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                    }
                }
                else
                {
                    if (file.Length < 50)
                    {
                        this._findHelper = null;
                        this._spellCheckForm = null;
                        this._videoFileName = null;
                        this._videoInfo = null;
                        this._videoAudioTrackNumber = -1;
                        this.labelVideoInfo.Text = this._languageGeneral.NoVideoLoaded;
                        this.audioVisualizer.WavePeaks = null;
                        this.audioVisualizer.ResetSpectrogram();
                        this.audioVisualizer.Invalidate();

                        Configuration.Settings.RecentFiles.Add(fileName, this.FirstVisibleIndex, this.FirstSelectedIndex, this._videoFileName, this._subtitleAlternateFileName);
                        Configuration.Settings.Save();
                        this.UpdateRecentFilesUI();
                        this._fileName = fileName;
                        this.SetTitle();
                        this.ShowStatus(string.Format(this._language.LoadedEmptyOrShort, this._fileName));
                        this._sourceViewChange = false;
                        this._converted = false;

                        MessageBox.Show(this._language.FileIsEmptyOrShort);
                    }
                    else
                    {
                        if (ext == ".xml")
                        {
                            var sb = new StringBuilder();
                            foreach (var line in File.ReadAllLines(fileName, Utilities.GetEncodingFromFile(fileName)))
                            {
                                sb.AppendLine(line);
                            }

                            var xmlAsString = sb.ToString().Trim();

                            if (xmlAsString.Contains("http://www.w3.org/ns/ttml") && xmlAsString.Contains("<?xml version=") || xmlAsString.Contains("http://www.w3.org/") && xmlAsString.Contains("/ttaf1"))
                            {
                                var xml = new System.Xml.XmlDocument();
                                try
                                {
                                    xml.LoadXml(xmlAsString);
                                }
                                catch (Exception ex)
                                {
                                    MessageBox.Show("Timed text is not valid: " + ex.Message);
                                    return;
                                }
                            }
                        }

                        this.ShowUnknownSubtitle();
                        return;
                    }
                }

                if (!videoFileLoaded && this.mediaPlayer.VideoPlayer != null)
                {
                    this.mediaPlayer.VideoPlayer.DisposeVideoPlayer();
                    this.mediaPlayer.VideoPlayer = null;
                    this.timer1.Stop();
                }

                this.ResetShowEarlierOrLater();
            }
            else
            {
                MessageBox.Show(string.Format(this._language.FileNotFound, fileName));
            }
        }

        /// <summary>
        /// The show hide text based features.
        /// </summary>
        /// <param name="format">
        /// The format.
        /// </param>
        private void ShowHideTextBasedFeatures(SubtitleFormat format)
        {
            if (format != null && !format.IsTextBased)
            {
                this.textBoxSource.Enabled = false;
            }
            else
            {
                this.textBoxSource.Enabled = true;
            }
        }

        /// <summary>
        /// The set undocked windows title.
        /// </summary>
        private void SetUndockedWindowsTitle()
        {
            string title = this._languageGeneral.NoVideoLoaded;
            if (!string.IsNullOrEmpty(this._videoFileName))
            {
                title = Path.GetFileNameWithoutExtension(this._videoFileName);
            }

            if (this._videoControlsUndocked != null && !this._videoControlsUndocked.IsDisposed)
            {
                this._videoControlsUndocked.Text = string.Format(this._languageGeneral.ControlsWindowTitle, title);
            }

            if (this._videoPlayerUndocked != null && !this._videoPlayerUndocked.IsDisposed)
            {
                this._videoPlayerUndocked.Text = string.Format(this._languageGeneral.VideoWindowTitle, title);
            }

            if (this._waveformUndocked != null && !this._waveformUndocked.IsDisposed)
            {
                this._waveformUndocked.Text = string.Format(this._languageGeneral.AudioWindowTitle, title);
            }
        }

        /// <summary>
        /// The import and ocr bdn xml.
        /// </summary>
        /// <param name="fileName">
        /// The file name.
        /// </param>
        /// <param name="bdnXml">
        /// The bdn xml.
        /// </param>
        /// <param name="list">
        /// The list.
        /// </param>
        private void ImportAndOcrBdnXml(string fileName, BdnXml bdnXml, List<string> list)
        {
            using (var formSubOcr = new VobSubOcr())
            {
                var bdnSubtitle = new Subtitle();
                bdnXml.LoadSubtitle(bdnSubtitle, list, fileName);
                bdnSubtitle.FileName = fileName;
                formSubOcr.Initialize(bdnSubtitle, Configuration.Settings.VobSubOcr, false);
                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    this.MakeHistoryForUndo(this._language.BeforeImportingBdnXml);
                    this.FileNew();
                    this._subtitle.Paragraphs.Clear();
                    this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    this._subtitle.WasLoadedWithFrameNumbers = false;
                    this._subtitle.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        this._subtitle.Paragraphs.Add(p);
                    }

                    this.ShowSource();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this._subtitleListViewIndex = -1;
                    this.SubtitleListview1.FirstVisibleIndex = -1;
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(0);

                    this._fileName = Path.ChangeExtension(formSubOcr.FileName, ".srt");
                    this.SetTitle();
                    this._converted = true;
                }
            }
        }

        /// <summary>
        /// The import and ocr son.
        /// </summary>
        /// <param name="fileName">
        /// The file name.
        /// </param>
        /// <param name="format">
        /// The format.
        /// </param>
        /// <param name="list">
        /// The list.
        /// </param>
        private void ImportAndOcrSon(string fileName, Son format, List<string> list)
        {
            using (var formSubOcr = new VobSubOcr())
            {
                var sub = new Subtitle();
                format.LoadSubtitle(sub, list, fileName);
                sub.FileName = fileName;
                formSubOcr.Initialize(sub, Configuration.Settings.VobSubOcr, true);
                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    this.MakeHistoryForUndo(this._language.BeforeImportingBdnXml);
                    this.FileNew();
                    this._subtitle.Paragraphs.Clear();
                    this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    this._subtitle.WasLoadedWithFrameNumbers = false;
                    this._subtitle.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        this._subtitle.Paragraphs.Add(p);
                    }

                    this.ShowSource();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this._subtitleListViewIndex = -1;
                    this.SubtitleListview1.FirstVisibleIndex = -1;
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(0);

                    this._fileName = Path.ChangeExtension(formSubOcr.FileName, ".srt");
                    this.SetTitle();
                    this._converted = true;
                }
            }
        }

        /// <summary>
        /// The import and ocr dost.
        /// </summary>
        /// <param name="fileName">
        /// The file name.
        /// </param>
        /// <param name="format">
        /// The format.
        /// </param>
        /// <param name="list">
        /// The list.
        /// </param>
        private void ImportAndOcrDost(string fileName, SubtitleFormat format, List<string> list)
        {
            using (var formSubOcr = new VobSubOcr())
            {
                var sub = new Subtitle();
                format.LoadSubtitle(sub, list, fileName);
                sub.FileName = fileName;
                formSubOcr.Initialize(sub, Configuration.Settings.VobSubOcr, false);
                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    this.MakeHistoryForUndo(this._language.BeforeImportingBdnXml);
                    this.FileNew();
                    this._subtitle.Paragraphs.Clear();
                    this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    this._subtitle.WasLoadedWithFrameNumbers = false;
                    this._subtitle.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        this._subtitle.Paragraphs.Add(p);
                    }

                    this.ShowSource();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this._subtitleListViewIndex = -1;
                    this.SubtitleListview1.FirstVisibleIndex = -1;
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(0);

                    this._fileName = Path.ChangeExtension(formSubOcr.FileName, ".srt");
                    this.SetTitle();
                    this._converted = true;
                }
            }
        }

        /// <summary>
        /// The import and ocr sst.
        /// </summary>
        /// <param name="fileName">
        /// The file name.
        /// </param>
        /// <param name="format">
        /// The format.
        /// </param>
        /// <param name="list">
        /// The list.
        /// </param>
        private void ImportAndOcrSst(string fileName, SonicScenaristBitmaps format, List<string> list)
        {
            using (var formSubOcr = new VobSubOcr())
            {
                var sub = new Subtitle();
                format.LoadSubtitle(sub, list, fileName);
                sub.FileName = fileName;
                formSubOcr.Initialize(sub, Configuration.Settings.VobSubOcr, true);
                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    this.MakeHistoryForUndo(this._language.BeforeImportingBdnXml);
                    this.FileNew();
                    this._subtitle.Paragraphs.Clear();
                    this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    this._subtitle.WasLoadedWithFrameNumbers = false;
                    this._subtitle.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        this._subtitle.Paragraphs.Add(p);
                    }

                    this.ShowSource();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this._subtitleListViewIndex = -1;
                    this.SubtitleListview1.FirstVisibleIndex = -1;
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(0);

                    this._fileName = Path.ChangeExtension(formSubOcr.FileName, ".srt");
                    this.SetTitle();
                    this._converted = true;
                }
            }
        }

        /// <summary>
        /// The import and ocr srt.
        /// </summary>
        /// <param name="subtitle">
        /// The subtitle.
        /// </param>
        private void ImportAndOcrSrt(Subtitle subtitle)
        {
            using (var formSubOcr = new VobSubOcr())
            {
                formSubOcr.Initialize(subtitle, Configuration.Settings.VobSubOcr, false);
                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    this.MakeHistoryForUndo(this._language.BeforeImportingBdnXml);
                    this.FileNew();
                    this._subtitle.Paragraphs.Clear();
                    this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    this._subtitle.WasLoadedWithFrameNumbers = false;
                    this._subtitle.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        this._subtitle.Paragraphs.Add(p);
                    }

                    this.ShowSource();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this._subtitleListViewIndex = -1;
                    this.SubtitleListview1.FirstVisibleIndex = -1;
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(0);

                    this._fileName = Path.ChangeExtension(formSubOcr.FileName, ".srt");
                    this.SetTitle();
                    this._converted = true;
                }
            }
        }

        /// <summary>
        /// The show unknown subtitle.
        /// </summary>
        private void ShowUnknownSubtitle()
        {
            using (var unknownSubtitle = new UnknownSubtitle())
            {
                unknownSubtitle.Initialize(this.Title);
                unknownSubtitle.ShowDialog(this);
            }
        }

        /// <summary>
        /// The update recent files ui.
        /// </summary>
        private void UpdateRecentFilesUI()
        {
            this.reopenToolStripMenuItem.DropDownItems.Clear();
            if (Configuration.Settings.General.ShowRecentFiles && Configuration.Settings.RecentFiles.Files.Count > 0)
            {
                this.reopenToolStripMenuItem.Visible = true;
                foreach (var file in Configuration.Settings.RecentFiles.Files)
                {
                    if (File.Exists(file.FileName))
                    {
                        this.reopenToolStripMenuItem.DropDownItems.Add(file.FileName, null, this.ReopenSubtitleToolStripMenuItemClick);
                    }
                }
            }
            else
            {
                Configuration.Settings.RecentFiles.Files.Clear();
                this.reopenToolStripMenuItem.Visible = false;
            }
        }

        /// <summary>
        /// The reopen subtitle tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ReopenSubtitleToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.ReloadFromSourceView();
            var item = sender as ToolStripItem;

            if (this.ContinueNewOrExit())
            {
                RecentFileEntry rfe = null;
                foreach (var file in Configuration.Settings.RecentFiles.Files)
                {
                    if (file.FileName == item.Text)
                    {
                        rfe = file;
                    }
                }

                if (rfe == null)
                {
                    this.OpenSubtitle(item.Text, null);
                }
                else
                {
                    this.OpenSubtitle(rfe.FileName, null, rfe.VideoFileName, rfe.OriginalFileName);
                }

                this.SetRecentIndices(item.Text);
                this.GotoSubPosAndPause();
            }
        }

        /// <summary>
        /// The goto sub pos and pause.
        /// </summary>
        private void GotoSubPosAndPause()
        {
            if (!string.IsNullOrEmpty(this._videoFileName))
            {
                this._videoLoadedGoToSubPosAndPause = true;
            }
            else
            {
                this.mediaPlayer.SubtitleText = string.Empty;
            }
        }

        /// <summary>
        /// The set recent indices.
        /// </summary>
        /// <param name="fileName">
        /// The file name.
        /// </param>
        private void SetRecentIndices(string fileName)
        {
            if (!Configuration.Settings.General.RememberSelectedLine)
            {
                return;
            }

            foreach (var x in Configuration.Settings.RecentFiles.Files)
            {
                if (fileName.Equals(x.FileName, StringComparison.OrdinalIgnoreCase))
                {
                    int sIndex = x.FirstSelectedIndex;
                    if (sIndex >= 0 && sIndex < this.SubtitleListview1.Items.Count)
                    {
                        this.SubtitleListview1.SelectedIndexChanged -= this.SubtitleListview1_SelectedIndexChanged;
                        for (int i = 0; i < this.SubtitleListview1.Items.Count; i++)
                        {
                            this.SubtitleListview1.Items[i].Selected = i == sIndex;
                        }

                        this._subtitleListViewIndex = -1;
                        this.SubtitleListview1.EnsureVisible(sIndex);
                        this.SubtitleListview1.SelectedIndexChanged += this.SubtitleListview1_SelectedIndexChanged;
                        this.SubtitleListview1.Items[sIndex].Focused = true;
                    }

                    int topIndex = x.FirstVisibleIndex;
                    if (topIndex >= 0 && topIndex < this.SubtitleListview1.Items.Count)
                    {
                        // to fix bug in .net framework we have to set topitem 3 times... wtf!?
                        this.SubtitleListview1.TopItem = this.SubtitleListview1.Items[topIndex];
                        this.SubtitleListview1.TopItem = this.SubtitleListview1.Items[topIndex];
                        this.SubtitleListview1.TopItem = this.SubtitleListview1.Items[topIndex];
                    }

                    this.RefreshSelectedParagraph();
                    break;
                }
            }
        }

        /// <summary>
        /// The save tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void SaveToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.ReloadFromSourceView();
            this.SaveSubtitle(this.GetCurrentSubtitleFormat());
        }

        /// <summary>
        /// The save as tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void SaveAsToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.ReloadFromSourceView();
            this.FileSaveAs(true);
        }

        /// <summary>
        /// The file save as.
        /// </summary>
        /// <param name="allowUsingLastSaveAsFormat">
        /// The allow using last save as format.
        /// </param>
        /// <returns>
        /// The <see cref="DialogResult"/>.
        /// </returns>
        private DialogResult FileSaveAs(bool allowUsingLastSaveAsFormat)
        {
            SubtitleFormat currentFormat = null;
            if (allowUsingLastSaveAsFormat && !string.IsNullOrEmpty(Configuration.Settings.General.LastSaveAsFormat))
            {
                currentFormat = Utilities.GetSubtitleFormatByFriendlyName(Configuration.Settings.General.LastSaveAsFormat);
            }

            if (currentFormat == null)
            {
                currentFormat = this.GetCurrentSubtitleFormat();
            }

            Utilities.SetSaveDialogFilter(this.saveFileDialog1, currentFormat);

            this.saveFileDialog1.Title = this._language.SaveSubtitleAs;
            this.saveFileDialog1.DefaultExt = "*" + currentFormat.Extension;
            this.saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(this._videoFileName))
            {
                this.saveFileDialog1.FileName = Path.GetFileNameWithoutExtension(this._videoFileName);
            }
            else
            {
                this.saveFileDialog1.FileName = Path.GetFileNameWithoutExtension(this._fileName);
            }

            if (!string.IsNullOrEmpty(this.openFileDialog1.InitialDirectory))
            {
                this.saveFileDialog1.InitialDirectory = this.openFileDialog1.InitialDirectory;
            }

            var result = this.saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                this.openFileDialog1.InitialDirectory = this.saveFileDialog1.InitialDirectory;
                this._converted = false;
                this._fileName = this.saveFileDialog1.FileName;
                this._fileDateTime = File.GetLastWriteTime(this._fileName);
                this.SetTitle();
                this.MakeHistoryForUndo(this._language.Menu.File.SaveAs);
                Configuration.Settings.RecentFiles.Add(this._fileName, this.FirstVisibleIndex, this.FirstSelectedIndex, this._videoFileName, this._subtitleAlternateFileName);
                Configuration.Settings.Save();

                int index = 0;
                foreach (SubtitleFormat format in SubtitleFormat.AllSubtitleFormats)
                {
                    if (this.saveFileDialog1.FilterIndex == index + 1)
                    {
                        // only allow current extension or ".txt"
                        string ext = Path.GetExtension(this._fileName).ToLowerInvariant();
                        bool extOk = ext.Equals(format.Extension, StringComparison.OrdinalIgnoreCase) || format.AlternateExtensions.Contains(ext) || ext == ".txt";
                        if (!extOk)
                        {
                            if (this._fileName.EndsWith('.'))
                            {
                                this._fileName = this._fileName.Substring(0, this._fileName.Length - 1);
                            }

                            this._fileName += format.Extension;
                        }

                        if (this.SaveSubtitle(format) == DialogResult.OK)
                        {
                            Configuration.Settings.General.LastSaveAsFormat = format.Name;
                            this.SetCurrentFormat(format);
                        }
                    }

                    index++;
                }
            }

            return result;
        }

        /// <summary>
        /// The save subtitle.
        /// </summary>
        /// <param name="format">
        /// The format.
        /// </param>
        /// <returns>
        /// The <see cref="DialogResult"/>.
        /// </returns>
        private DialogResult SaveSubtitle(SubtitleFormat format)
        {
            if (string.IsNullOrEmpty(this._fileName) || this._converted)
            {
                return this.FileSaveAs(false);
            }

            try
            {
                if (format != null && !format.IsTextBased)
                {
                    if (format.GetType() == typeof(Ebu))
                    {
                        Ebu.Save(this._fileName, this._subtitle);
                    }

                    return DialogResult.OK;
                }

                string allText = this._subtitle.ToText(format);

                // Seungki begin
                if (this._splitDualSami && this._subtitleAlternate != null)
                {
                    var s = new Subtitle(this._subtitle);
                    foreach (var p in this._subtitleAlternate.Paragraphs)
                    {
                        s.Paragraphs.Add(p);
                    }

                    allText = s.ToText(format);
                }

                // Seungki end
                var currentEncoding = this.GetCurrentEncoding();
                bool isUnicode = currentEncoding == Encoding.Unicode || currentEncoding == Encoding.UTF32 || currentEncoding == Encoding.UTF7 || currentEncoding == Encoding.UTF8;
                if (!isUnicode && allText.Contains(new[] { '♪', '♫', '♥', '—', '―', '…' }))
                {
                    // ANSI & music/unicode symbols
                    if (MessageBox.Show(string.Format(this._language.UnicodeMusicSymbolsAnsiWarning), this.Title, MessageBoxButtons.YesNo) == DialogResult.No)
                    {
                        return DialogResult.No;
                    }
                }

                if (!isUnicode)
                {
                    allText = this.NormalizeUnicode(allText);
                }

                bool containsNegativeTime = false;
                foreach (var p in this._subtitle.Paragraphs)
                {
                    if (p.StartTime.TotalMilliseconds < 0 || p.EndTime.TotalMilliseconds < 0)
                    {
                        containsNegativeTime = true;
                        break;
                    }
                }

                if (containsNegativeTime)
                {
                    if (MessageBox.Show(this._language.NegativeTimeWarning, this.Title, MessageBoxButtons.YesNo) == DialogResult.No)
                    {
                        return DialogResult.No;
                    }
                }

                if (File.Exists(this._fileName))
                {
                    var fileInfo = new FileInfo(this._fileName);
                    var fileOnDisk = fileInfo.LastWriteTime;
                    if (this._fileDateTime != fileOnDisk && this._fileDateTime != new DateTime())
                    {
                        if (MessageBox.Show(string.Format(this._language.OverwriteModifiedFile, this._fileName, fileOnDisk.ToShortDateString(), fileOnDisk.ToString("HH:mm:ss"), Environment.NewLine, this._fileDateTime.ToShortDateString(), this._fileDateTime.ToString("HH:mm:ss")), this.Title + " - " + this._language.FileOnDiskModified, MessageBoxButtons.YesNo) == DialogResult.No)
                        {
                            return DialogResult.No;
                        }
                    }

                    if (fileInfo.IsReadOnly)
                    {
                        MessageBox.Show(string.Format(this._language.FileXIsReadOnly, this._fileName));
                        return DialogResult.No;
                    }
                }

                if (format.GetType() == typeof(WebVTT) || format.GetType() == typeof(WebVTTFileWithLineNumber))
                {
                    this.SetEncoding(Encoding.UTF8);
                    currentEncoding = Encoding.UTF8;
                }

                if (ModifierKeys == (Keys.Control | Keys.Shift))
                {
                    allText = allText.Replace("\r\n", "\n");
                }

                if (format.GetType() == typeof(ItunesTimedText) || format.GetType() == typeof(ScenaristClosedCaptions) || format.GetType() == typeof(ScenaristClosedCaptionsDropFrame))
                {
                    var outputEnc = new UTF8Encoding(false); // create encoding with no BOM
                    using (var file = new StreamWriter(this._fileName, false, outputEnc))
                    {
                        // open file with encoding
                        file.Write(allText);
                    }
                }
                else if (currentEncoding == Encoding.UTF8 && (format.GetType() == typeof(TmpegEncAW5) || format.GetType() == typeof(TmpegEncXml)))
                {
                    var outputEnc = new UTF8Encoding(false); // create encoding with no BOM
                    using (var file = new StreamWriter(this._fileName, false, outputEnc))
                    {
                        // open file with encoding
                        file.Write(allText);
                    }
                }
                else
                {
                    if (string.IsNullOrWhiteSpace(allText))
                    {
                        MessageBox.Show(string.Format(this._language.UnableToSaveSubtitleX, this._fileName), string.Empty, MessageBoxButtons.OK, MessageBoxIcon.Stop);
                        return DialogResult.Cancel;
                    }

                    using (var fs = File.Open(this._fileName, FileMode.Create, FileAccess.Write, FileShare.Read))
                    using (var sw = new StreamWriter(fs, currentEncoding))
                    {
                        sw.Write(allText);
                    }
                }

                this._fileDateTime = File.GetLastWriteTime(this._fileName);
                this.ShowStatus(string.Format(this._language.SavedSubtitleX, this._fileName));
                this._changeSubtitleToString = SerializeSubtitle(this._subtitle);
                return DialogResult.OK;
            }
            catch (Exception exception)
            {
                MessageBox.Show(exception.Message);
                return DialogResult.Cancel;
            }
        }

        /// <summary>
        /// The save original subtitle.
        /// </summary>
        /// <param name="format">
        /// The format.
        /// </param>
        /// <returns>
        /// The <see cref="DialogResult"/>.
        /// </returns>
        private DialogResult SaveOriginalSubtitle(SubtitleFormat format)
        {
            try
            {
                string allText = this._subtitleAlternate.ToText(format).Trim();
                var currentEncoding = this.GetCurrentEncoding();
                bool isUnicode = currentEncoding == Encoding.Unicode || currentEncoding == Encoding.UTF32 || currentEncoding == Encoding.UTF7 || currentEncoding == Encoding.UTF8;
                if (!isUnicode && allText.Contains(new[] { '♪', '♫', '♥', '—', '―', '…' }))
                {
                    // ANSI & music/unicode symbols
                    if (MessageBox.Show(string.Format(this._language.UnicodeMusicSymbolsAnsiWarning), this.Title, MessageBoxButtons.YesNo) == DialogResult.No)
                    {
                        return DialogResult.No;
                    }
                }

                if (!isUnicode)
                {
                    allText = this.NormalizeUnicode(allText);
                }

                bool containsNegativeTime = false;
                foreach (var p in this._subtitleAlternate.Paragraphs)
                {
                    if (p.StartTime.TotalMilliseconds < 0 || p.EndTime.TotalMilliseconds < 0)
                    {
                        containsNegativeTime = true;
                        break;
                    }
                }

                if (containsNegativeTime)
                {
                    if (MessageBox.Show(this._language.NegativeTimeWarning, this.Title, MessageBoxButtons.YesNo) == DialogResult.No)
                    {
                        return DialogResult.No;
                    }
                }

                File.WriteAllText(this._subtitleAlternateFileName, allText, currentEncoding);
                this.ShowStatus(string.Format(this._language.SavedOriginalSubtitleX, this._subtitleAlternateFileName));
                this._changeAlternateSubtitleToString = this._subtitleAlternate.ToText(new SubRip()).Trim();
                return DialogResult.OK;
            }
            catch
            {
                MessageBox.Show(string.Format(this._language.UnableToSaveSubtitleX, this._fileName));
                return DialogResult.Cancel;
            }
        }

        /// <summary>
        /// The normalize unicode.
        /// </summary>
        /// <param name="text">
        /// The text.
        /// </param>
        /// <returns>
        /// The <see cref="string"/>.
        /// </returns>
        public string NormalizeUnicode(string text)
        {
            const char defHyphen = '-'; // - Hyphen-minus (\u002D) (Basic Latin)
            const char defColon = ':'; // : Colon (\u003A) (Basic Latin)

            // Hyphens
            text = text.Replace('\u2043', defHyphen); // ⁃ Hyphen bullet (\u2043)
            text = text.Replace('\u2010', defHyphen); // ‐ Hyphen (\u2010)
            text = text.Replace('\u2012', defHyphen); // ‒ Figure dash (\u2012)
            text = text.Replace('\u2013', defHyphen); // – En dash (\u2013)
            text = text.Replace('\u2014', defHyphen); // — Em dash (\u2014)
            text = text.Replace('\u2015', defHyphen); // ― Horizontal bar (\u2015)

            // Colons:
            text = text.Replace('\u02F8', defColon); // ˸ Modifier Letter Raised Colon (\u02F8)
            text = text.Replace('\uFF1A', defColon); // ： Fullwidth Colon (\uFF1A)
            text = text.Replace('\uFE13', defColon); // ︓ Presentation Form for Vertical Colon (\uFE13)

            // Others
            text = text.Replace("…", "...");
            text = text.Replace('♪', '#');
            text = text.Replace('♫', '#');

            // Spaces
            text = text.Replace('\u00A0', ' '); // No-Break Space
            text = text.Replace("\u200B", string.Empty); // Zero Width Space
            text = text.Replace("\uFEFF", string.Empty); // Zero Width No-Break Space

            // Intellectual property
            text = text.Replace("\u00A9", "(Copyright)"); // © copyright
            text = text.Replace("\u2117", "(Sound-recording Copyright)"); // ℗ sound-recording copyright
            text = text.Replace("\u00AE", "(Registered Trademark)"); // ® registered trademark
            text = text.Replace("\u2120", "(Service Mark)"); // ℠ service mark
            text = text.Replace("\u2122", "(Trademark)"); // ™ trademark

            return text;
        }

        /// <summary>
        /// The new tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void NewToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.ReloadFromSourceView();
            this.FileNew();
        }

        /// <summary>
        /// The reset subtitle.
        /// </summary>
        private void ResetSubtitle()
        {
            this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);

            this._subtitle = new Subtitle(this._subtitle.HistoryItems);
            this._changeAlternateSubtitleToString = string.Empty;
            this._changeSubtitleToString = string.Empty;
            this._subtitleAlternateFileName = null;
            this.textBoxSource.Text = string.Empty;
            this.SubtitleListview1.Items.Clear();
            this._fileName = string.Empty;
            this._fileDateTime = new DateTime();
            this.Text = this.Title;
            this._oldSubtitleFormat = null;
            this.labelSingleLine.Text = string.Empty;
            this.RemoveAlternate(true);
            this._splitDualSami = false;

            this.SubtitleListview1.HideExtraColumn();
            this.SubtitleListview1.DisplayExtraFromExtra = false;

            this.ComboBoxSubtitleFormatsSelectedIndexChanged(null, null);

            this.toolStripComboBoxFrameRate.Text = Configuration.Settings.General.DefaultFrameRate.ToString();

            this.SetEncoding(Configuration.Settings.General.DefaultEncoding);

            this.toolStripComboBoxFrameRate.Text = Configuration.Settings.General.DefaultFrameRate.ToString();
            this._findHelper = null;
            this._spellCheckForm = null;
            this._videoFileName = null;
            this._videoInfo = null;
            this._videoAudioTrackNumber = -1;
            this.labelVideoInfo.Text = this._languageGeneral.NoVideoLoaded;
            this.audioVisualizer.WavePeaks = null;
            this.audioVisualizer.ResetSpectrogram();
            this.audioVisualizer.Invalidate();

            this._sourceViewChange = false;

            this._subtitleListViewIndex = -1;
            this.textBoxListViewText.Text = string.Empty;
            this.textBoxListViewTextAlternate.Text = string.Empty;
            this.textBoxListViewText.Enabled = false;
            this.labelTextLineLengths.Text = string.Empty;
            this.labelCharactersPerSecond.Text = string.Empty;
            this.labelTextLineTotal.Text = string.Empty;

            this._listViewTextUndoLast = null;
            this._listViewAlternateTextUndoLast = null;
            this._listViewTextUndoIndex = -1;

            if (this.mediaPlayer.VideoPlayer != null)
            {
                this.mediaPlayer.VideoPlayer.DisposeVideoPlayer();
                this.mediaPlayer.VideoPlayer = null;
            }

            this._changeSubtitleToString = SerializeSubtitle(this._subtitle);
            this._converted = false;

            this.SetUndockedWindowsTitle();
            this.mediaPlayer.SubtitleText = string.Empty;
            this.ShowStatus(this._language.New);

            this.ResetShowEarlierOrLater();
        }

        /// <summary>
        /// The reset show earlier or later.
        /// </summary>
        private void ResetShowEarlierOrLater()
        {
            try
            {
                if (this._showEarlierOrLater != null && !this._showEarlierOrLater.IsDisposed)
                {
                    this._showEarlierOrLater.ResetTotalAdjustment();
                }
            }
            catch
            {
                // form closing or alike
            }
        }

        /// <summary>
        /// The file new.
        /// </summary>
        private void FileNew()
        {
            if (this.ContinueNewOrExit())
            {
                this.MakeHistoryForUndo(this._language.BeforeNew);
                this.ResetSubtitle();
            }
        }

        /// <summary>
        /// The combo box subtitle formats selected index changed.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ComboBoxSubtitleFormatsSelectedIndexChanged(object sender, EventArgs e)
        {
            this._converted = true;
            if (this._oldSubtitleFormat == null)
            {
                if (!this._loading)
                {
                    this.MakeHistoryForUndo(string.Format(this._language.BeforeConvertingToX, this.GetCurrentSubtitleFormat().FriendlyName));
                }
            }
            else
            {
                this._subtitle.MakeHistoryForUndo(string.Format(this._language.BeforeConvertingToX, this.GetCurrentSubtitleFormat().FriendlyName), this._oldSubtitleFormat, this._fileDateTime, this._subtitleAlternate, this._subtitleAlternateFileName, this._subtitleListViewIndex, this.textBoxListViewText.SelectionStart, this.textBoxListViewTextAlternate.SelectionStart);
                this._oldSubtitleFormat.RemoveNativeFormatting(this._subtitle, this.GetCurrentSubtitleFormat());
                this.SaveSubtitleListviewIndices();
                this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                this.RestoreSubtitleListviewIndices();

                if (this._oldSubtitleFormat.HasStyleSupport && this._networkSession == null)
                {
                    this.SubtitleListview1.HideExtraColumn();
                }
            }

            SubtitleFormat format = this.GetCurrentSubtitleFormat();
            if (this._oldSubtitleFormat != null && !this._oldSubtitleFormat.IsFrameBased && format.IsFrameBased)
            {
                this._subtitle.CalculateFrameNumbersFromTimeCodesNoCheck(this.CurrentFrameRate);
            }
            else if (this._oldSubtitleFormat != null && this._oldSubtitleFormat.IsFrameBased && !format.IsFrameBased)
            {
                this._subtitle.CalculateTimeCodesFromFrameNumbers(this.CurrentFrameRate);
            }

            this.ShowSource();
            this.SubtitleListview1.DisplayExtraFromExtra = false;
            if (format != null)
            {
                this.ShowStatus(string.Format(this._language.ConvertedToX, format.FriendlyName));
                this._oldSubtitleFormat = format;

                if (format.HasStyleSupport && this._networkSession == null)
                {
                    var styles = new List<string>();
                    if (format.GetType() == typeof(AdvancedSubStationAlpha) || format.GetType() == typeof(SubStationAlpha))
                    {
                        styles = AdvancedSubStationAlpha.GetStylesFromHeader(this._subtitle.Header);
                    }
                    else if (format.GetType() == typeof(TimedText10) || format.GetType() == typeof(ItunesTimedText))
                    {
                        styles = TimedText10.GetStylesFromHeader(this._subtitle.Header);
                    }
                    else if (format.GetType() == typeof(Sami) || format.GetType() == typeof(SamiModern))
                    {
                        styles = Sami.GetStylesFromHeader(this._subtitle.Header);
                    }
                    else if (format.Name == "Nuendo")
                    {
                        styles = GetNuendoStyles();
                    }

                    foreach (var p in this._subtitle.Paragraphs)
                    {
                        if (string.IsNullOrEmpty(p.Extra) && styles.Count > 0)
                        {
                            p.Extra = styles[0];
                        }
                    }

                    if (format.GetType() == typeof(Sami) || format.GetType() == typeof(SamiModern))
                    {
                        this.SubtitleListview1.ShowExtraColumn(this._languageGeneral.Class);
                    }
                    else if (format.GetType() == typeof(TimedText10) || format.GetType() == typeof(ItunesTimedText))
                    {
                        this.SubtitleListview1.ShowExtraColumn(this._languageGeneral.StyleLanguage);
                    }
                    else if (format.Name == "Nuendo")
                    {
                        this.SubtitleListview1.ShowExtraColumn(this._languageGeneral.Character);
                    }
                    else
                    {
                        this.SubtitleListview1.ShowExtraColumn(this._languageGeneral.Style);
                    }

                    this.SubtitleListview1.DisplayExtraFromExtra = true;
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                }
            }

            this.ShowHideTextBasedFeatures(format);
        }

        /// <summary>
        /// The get nuendo styles.
        /// </summary>
        /// <returns>
        /// The <see cref="List"/>.
        /// </returns>
        private static List<string> GetNuendoStyles()
        {
            if (!string.IsNullOrEmpty(Configuration.Settings.SubtitleSettings.NuendoCharacterListFile) && File.Exists(Configuration.Settings.SubtitleSettings.NuendoCharacterListFile))
            {
                return NuendoProperties.LoadCharacters(Configuration.Settings.SubtitleSettings.NuendoCharacterListFile);
            }

            return new List<string>();
        }

        /// <summary>
        /// The combo box subtitle formats enter.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ComboBoxSubtitleFormatsEnter(object sender, EventArgs e)
        {
            SubtitleFormat format = this.GetCurrentSubtitleFormat();
            if (format != null)
            {
                this._oldSubtitleFormat = format;
            }
        }

        /// <summary>
        /// The get current subtitle format.
        /// </summary>
        /// <returns>
        /// The <see cref="SubtitleFormat"/>.
        /// </returns>
        private SubtitleFormat GetCurrentSubtitleFormat()
        {
            return Utilities.GetSubtitleFormatByFriendlyName(this.comboBoxSubtitleFormats.SelectedItem.ToString());
        }

        /// <summary>
        /// The show source.
        /// </summary>
        private void ShowSource()
        {
            if (this._subtitle != null && this._subtitle.Paragraphs.Count > 0)
            {
                SubtitleFormat format = this.GetCurrentSubtitleFormat();
                if (format != null)
                {
                    if (this.GetCurrentSubtitleFormat().IsFrameBased)
                    {
                        this._subtitle.CalculateTimeCodesFromFrameNumbers(this.CurrentFrameRate);
                    }
                    else
                    {
                        this._subtitle.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                    }

                    this.textBoxSource.TextChanged -= this.TextBoxSourceTextChanged;
                    this.textBoxSource.Text = this._subtitle.ToText(format);
                    this.textBoxSource.TextChanged += this.TextBoxSourceTextChanged;
                    return;
                }
            }

            this.textBoxSource.TextChanged -= this.TextBoxSourceTextChanged;
            this.textBoxSource.Text = string.Empty;
            this.textBoxSource.TextChanged += this.TextBoxSourceTextChanged;
        }

        /// <summary>
        /// The settings tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void SettingsToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.ShowSettings();
        }

        /// <summary>
        /// The show settings.
        /// </summary>
        private void ShowSettings()
        {
            string oldVideoPlayer = Configuration.Settings.General.VideoPlayer;
            string oldListViewLineSeparatorString = Configuration.Settings.General.ListViewLineSeparatorString;
            string oldSubtitleFontSettings = Configuration.Settings.General.SubtitleFontName + Configuration.Settings.General.SubtitleFontBold + Configuration.Settings.General.CenterSubtitleInTextBox + Configuration.Settings.General.SubtitleFontSize + Configuration.Settings.General.SubtitleFontColor.ToArgb() + Configuration.Settings.General.SubtitleBackgroundColor.ToArgb();
            bool oldUseTimeFormatHHMMSSFF = Configuration.Settings.General.UseTimeFormatHHMMSSFF;

            string oldSyntaxColoring = Configuration.Settings.Tools.ListViewSyntaxColorDurationSmall.ToString() + Configuration.Settings.Tools.ListViewSyntaxColorDurationBig + Configuration.Settings.Tools.ListViewSyntaxColorLongLines + Configuration.Settings.Tools.ListViewSyntaxColorOverlap + Configuration.Settings.Tools.ListViewSyntaxMoreThanXLines + Configuration.Settings.Tools.ListViewSyntaxMoreThanXLinesX + Configuration.Settings.Tools.ListViewSyntaxErrorColor.ToArgb();

            var oldAllowEditOfOriginalSubtitle = Configuration.Settings.General.AllowEditOfOriginalSubtitle;
            using (var settings = new Settings())
            {
                settings.Initialize(this.Icon, this.toolStripButtonFileNew.Image, this.toolStripButtonFileOpen.Image, this.toolStripButtonSave.Image, this.toolStripButtonSaveAs.Image, this.toolStripButtonFind.Image, this.toolStripButtonReplace.Image, this.toolStripButtonFixCommonErrors.Image, this.toolStripButtonVisualSync.Image, this.toolStripButtonSpellCheck.Image, this.toolStripButtonSettings.Image, this.toolStripButtonHelp.Image);
                settings.ShowDialog(this);
            }

            try
            { // can have some problems with fonts...
                Utilities.InitializeSubtitleFont(this.textBoxSource);
                Utilities.InitializeSubtitleFont(this.textBoxListViewText);
                Utilities.InitializeSubtitleFont(this.textBoxListViewTextAlternate);
                Utilities.InitializeSubtitleFont(this.SubtitleListview1);
                this.InitializeToolbar();
            }
            catch (Exception exception)
            {
                System.Diagnostics.Debug.WriteLine(exception.Message + Environment.NewLine + exception.StackTrace);
            }

            this.UpdateRecentFilesUI();
            this.buttonCustomUrl1.Text = Configuration.Settings.VideoControls.CustomSearchText1;
            this.buttonCustomUrl1.Visible = Configuration.Settings.VideoControls.CustomSearchUrl1.Length > 1;
            this.buttonCustomUrl2.Text = Configuration.Settings.VideoControls.CustomSearchText2;
            this.buttonCustomUrl2.Visible = Configuration.Settings.VideoControls.CustomSearchUrl2.Length > 1;

            this.audioVisualizer.DrawGridLines = Configuration.Settings.VideoControls.WaveformDrawGrid;
            this.audioVisualizer.GridColor = Configuration.Settings.VideoControls.WaveformGridColor;
            this.audioVisualizer.SelectedColor = Configuration.Settings.VideoControls.WaveformSelectedColor;
            this.audioVisualizer.Color = Configuration.Settings.VideoControls.WaveformColor;
            this.audioVisualizer.BackgroundColor = Configuration.Settings.VideoControls.WaveformBackgroundColor;
            this.audioVisualizer.TextColor = Configuration.Settings.VideoControls.WaveformTextColor;
            this.audioVisualizer.TextSize = Configuration.Settings.VideoControls.WaveformTextSize;
            this.audioVisualizer.TextBold = Configuration.Settings.VideoControls.WaveformTextBold;
            this.audioVisualizer.MouseWheelScrollUpIsForward = Configuration.Settings.VideoControls.WaveformMouseWheelScrollUpIsForward;
            this.audioVisualizer.AllowOverlap = Configuration.Settings.VideoControls.WaveformAllowOverlap;
            this.audioVisualizer.ClosenessForBorderSelection = Configuration.Settings.VideoControls.WaveformBorderHitMs;

            string newSyntaxColoring = Configuration.Settings.Tools.ListViewSyntaxColorDurationSmall.ToString() + Configuration.Settings.Tools.ListViewSyntaxColorDurationBig + Configuration.Settings.Tools.ListViewSyntaxColorLongLines + Configuration.Settings.Tools.ListViewSyntaxColorOverlap + Configuration.Settings.Tools.ListViewSyntaxMoreThanXLines + Configuration.Settings.Tools.ListViewSyntaxMoreThanXLinesX + Configuration.Settings.Tools.ListViewSyntaxErrorColor.ToArgb();

            if (oldSubtitleFontSettings != Configuration.Settings.General.SubtitleFontName + Configuration.Settings.General.SubtitleFontBold + Configuration.Settings.General.CenterSubtitleInTextBox + Configuration.Settings.General.SubtitleFontSize + Configuration.Settings.General.SubtitleFontColor.ToArgb() + Configuration.Settings.General.SubtitleBackgroundColor.ToArgb() || oldSyntaxColoring != newSyntaxColoring)
            {
                try
                { // can have some problems with fonts...
                    Utilities.InitializeSubtitleFont(this.textBoxListViewText);
                    Utilities.InitializeSubtitleFont(this.textBoxListViewTextAlternate);
                    Utilities.InitializeSubtitleFont(this.textBoxSource);
                    this.SubtitleListview1.SubtitleFontName = Configuration.Settings.General.SubtitleFontName;
                    this.SubtitleListview1.SubtitleFontBold = Configuration.Settings.General.SubtitleFontBold;
                    this.SubtitleListview1.SubtitleFontSize = Configuration.Settings.General.SubtitleFontSize;
                }
                catch (Exception exception)
                {
                    System.Diagnostics.Debug.WriteLine(exception.Message + Environment.NewLine + exception.StackTrace);
                }

                this.SubtitleListview1.ForeColor = Configuration.Settings.General.SubtitleFontColor;
                this.SubtitleListview1.BackColor = Configuration.Settings.General.SubtitleBackgroundColor;
                if (Configuration.Settings.General.CenterSubtitleInTextBox)
                {
                    this.textBoxListViewText.TextAlign = HorizontalAlignment.Center;
                    this.textBoxListViewTextAlternate.TextAlign = HorizontalAlignment.Center;
                }
                else if (this.textBoxListViewText.TextAlign == HorizontalAlignment.Center)
                {
                    this.textBoxListViewText.TextAlign = HorizontalAlignment.Left;
                    this.textBoxListViewTextAlternate.TextAlign = HorizontalAlignment.Left;
                }

                this.SaveSubtitleListviewIndices();
                Utilities.InitializeSubtitleFont(this.SubtitleListview1);
                this.SubtitleListview1.AutoSizeAllColumns(this);
                this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                this.RestoreSubtitleListviewIndices();
                this.mediaPlayer.SetSubtitleFont();
                this.ShowSubtitle();
            }

            this.mediaPlayer.SetSubtitleFont();
            this.mediaPlayer.ShowStopButton = Configuration.Settings.General.VideoPlayerShowStopButton;
            this.mediaPlayer.ShowMuteButton = Configuration.Settings.General.VideoPlayerShowMuteButton;
            this.mediaPlayer.ShowFullscreenButton = Configuration.Settings.General.VideoPlayerShowFullscreenButton;

            if (oldListViewLineSeparatorString != Configuration.Settings.General.ListViewLineSeparatorString)
            {
                this.SubtitleListview1.InitializeLanguage(this._languageGeneral, Configuration.Settings);
                this.SaveSubtitleListviewIndices();
                this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                this.RestoreSubtitleListviewIndices();
            }

            if (oldAllowEditOfOriginalSubtitle != Configuration.Settings.General.AllowEditOfOriginalSubtitle && this._subtitleAlternate != null && this._subtitleAlternate.Paragraphs.Count > 0)
            {
                if (Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                {
                    this.AddAlternate();
                }
                else
                {
                    this.RemoveAlternate(false);
                }

                this.Main_Resize(null, null);
            }

            this.textBoxListViewTextAlternate.Enabled = Configuration.Settings.General.AllowEditOfOriginalSubtitle && this._subtitleListViewIndex >= 0;

            this.SetShortcuts();

            this._timerAutoSave.Stop();
            if (!string.IsNullOrEmpty(this._videoFileName) && oldVideoPlayer != Configuration.Settings.General.VideoPlayer && this.mediaPlayer.VideoPlayer != null)
            {
                string vfn = this._videoFileName;
                this.CloseVideoToolStripMenuItemClick(null, null);
                this.OpenVideo(vfn);
            }

            if (Configuration.Settings.General.AutoBackupSeconds > 0)
            {
                this._timerAutoSave.Interval = 1000 * Configuration.Settings.General.AutoBackupSeconds; // take backup every x second if changes were made
                this._timerAutoSave.Start();
            }

            this.SetTitle();
            if (Configuration.Settings.VideoControls.GenerateSpectrogram)
            {
                this.audioVisualizer.WaveformNotLoadedText = Configuration.Settings.Language.Waveform.ClickToAddWaveformAndSpectrogram;
                this.showhideWaveformToolStripMenuItem.Text = this._language.Menu.Video.ShowHideWaveformAndSpectrogram;
            }
            else
            {
                this.audioVisualizer.WaveformNotLoadedText = Configuration.Settings.Language.Waveform.ClickToAddWaveform;
                this.showhideWaveformToolStripMenuItem.Text = this._language.Menu.Video.ShowHideWaveform;
            }

            this.audioVisualizer.Invalidate();

            if (oldUseTimeFormatHHMMSSFF != Configuration.Settings.General.UseTimeFormatHHMMSSFF)
            {
                this.RefreshTimeCodeMode();
            }
        }

        /// <summary>
        /// The add alternate.
        /// </summary>
        private void AddAlternate()
        {
            this.buttonUnBreak.Visible = false;
            this.buttonAutoBreak.Visible = false;
            this.buttonSplitLine.Visible = false;
            this.textBoxListViewTextAlternate.Visible = true;
            this.labelAlternateText.Visible = true;
            this.labelAlternateCharactersPerSecond.Visible = true;
            this.labelTextAlternateLineLengths.Visible = true;
            this.labelAlternateSingleLine.Visible = true;
            this.labelTextAlternateLineTotal.Visible = true;
        }

        /// <summary>
        /// The show subtitle.
        /// </summary>
        /// <returns>
        /// The <see cref="int"/>.
        /// </returns>
        private int ShowSubtitle()
        {
            if (this._splitDualSami)
            {
                return Utilities.ShowSubtitle(this._subtitle.Paragraphs, this._subtitleAlternate, this.mediaPlayer);
            }

            if (this.SubtitleListview1.IsAlternateTextColumnVisible && Configuration.Settings.General.ShowOriginalAsPreviewIfAvailable)
            {
                return Utilities.ShowSubtitle(this._subtitleAlternate.Paragraphs, this.mediaPlayer);
            }

            return Utilities.ShowSubtitle(this._subtitle.Paragraphs, this.mediaPlayer);
        }

        /// <summary>
        /// The try load icon.
        /// </summary>
        /// <param name="button">
        /// The button.
        /// </param>
        /// <param name="iconName">
        /// The icon name.
        /// </param>
        private static void TryLoadIcon(ToolStripButton button, string iconName)
        {
            string fullPath = Configuration.IconsFolder + iconName + ".png";
            if (File.Exists(fullPath))
            {
                button.Image = new Bitmap(fullPath);
            }
        }

        /// <summary>
        /// The initialize toolbar.
        /// </summary>
        private void InitializeToolbar()
        {
            var gs = Configuration.Settings.General;

            TryLoadIcon(this.toolStripButtonFileNew, "New");
            TryLoadIcon(this.toolStripButtonFileOpen, "Open");
            TryLoadIcon(this.toolStripButtonSave, "Save");
            TryLoadIcon(this.toolStripButtonSaveAs, "SaveAs");
            TryLoadIcon(this.toolStripButtonFind, "Find");
            TryLoadIcon(this.toolStripButtonReplace, "Replace");
            TryLoadIcon(this.toolStripButtonFixCommonErrors, "FixCommonErrors");
            TryLoadIcon(this.toolStripButtonVisualSync, "VisualSync");
            TryLoadIcon(this.toolStripButtonSpellCheck, "SpellCheck");
            TryLoadIcon(this.toolStripButtonSettings, "Settings");
            TryLoadIcon(this.toolStripButtonHelp, "Help");

            TryLoadIcon(this.toolStripButtonToggleWaveform, "WaveformToggle");
            TryLoadIcon(this.toolStripButtonToggleVideo, "VideoToggle");

            this.toolStripButtonFileNew.Visible = gs.ShowToolbarNew;
            this.toolStripButtonFileOpen.Visible = gs.ShowToolbarOpen;
            this.toolStripButtonSave.Visible = gs.ShowToolbarSave;
            this.toolStripButtonSaveAs.Visible = gs.ShowToolbarSaveAs;
            this.toolStripButtonFind.Visible = gs.ShowToolbarFind;
            this.toolStripButtonReplace.Visible = gs.ShowToolbarReplace;
            this.toolStripButtonFixCommonErrors.Visible = gs.ShowToolbarFixCommonErrors;
            this.toolStripButtonVisualSync.Visible = gs.ShowToolbarVisualSync;
            this.toolStripButtonSpellCheck.Visible = gs.ShowToolbarSpellCheck;
            this.toolStripButtonSettings.Visible = gs.ShowToolbarSettings;
            this.toolStripButtonHelp.Visible = gs.ShowToolbarHelp;

            this.toolStripSeparatorFrameRate.Visible = gs.ShowFrameRate;
            this.toolStripLabelFrameRate.Visible = gs.ShowFrameRate;
            this.toolStripComboBoxFrameRate.Visible = gs.ShowFrameRate;
            this.toolStripButtonGetFrameRate.Visible = gs.ShowFrameRate;

            this.toolStripSeparatorFindReplace.Visible = gs.ShowToolbarFind || gs.ShowToolbarReplace;
            this.toolStripSeparatorFixSyncSpell.Visible = gs.ShowToolbarFixCommonErrors || gs.ShowToolbarVisualSync || gs.ShowToolbarSpellCheck || gs.ShowToolbarSettings;
            this.toolStripSeparatorHelp.Visible = gs.ShowToolbarHelp;

            this.toolStrip1.Visible = gs.ShowToolbarNew || gs.ShowToolbarOpen || gs.ShowToolbarSave || gs.ShowToolbarSaveAs || gs.ShowToolbarFind || gs.ShowToolbarReplace || gs.ShowToolbarFixCommonErrors || gs.ShowToolbarVisualSync || gs.ShowToolbarSpellCheck || gs.ShowToolbarSettings || gs.ShowToolbarHelp;
        }

        /// <summary>
        /// The tool strip button file new click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripButtonFileNewClick(object sender, EventArgs e)
        {
            this._lastDoNotPrompt = string.Empty;
            this.ReloadFromSourceView();
            this.FileNew();
            this.ShowHideTextBasedFeatures(this.GetCurrentSubtitleFormat());
        }

        /// <summary>
        /// The tool strip button file open click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripButtonFileOpenClick(object sender, EventArgs e)
        {
            this.toolStripButtonFileOpen.Enabled = false;
            this.ReloadFromSourceView();
            this.OpenNewFile();
            this.toolStripButtonFileOpen.Enabled = true;
        }

        /// <summary>
        /// The tool strip button save click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripButtonSaveClick(object sender, EventArgs e)
        {
            this.ReloadFromSourceView();
            bool oldChange = this._changeSubtitleToString != SerializeSubtitle(this._subtitle);
            this.SaveSubtitle(this.GetCurrentSubtitleFormat());

            if (this._subtitleAlternate != null && this._changeAlternateSubtitleToString != this._subtitleAlternate.ToText(new SubRip()).Trim() && Configuration.Settings.General.AllowEditOfOriginalSubtitle && this._subtitleAlternate.Paragraphs.Count > 0)
            {
                this.SaveOriginalToolStripMenuItemClick(null, null);
                if (oldChange && this._changeSubtitleToString == SerializeSubtitle(this._subtitle) && this._changeAlternateSubtitleToString == this._subtitleAlternate.ToText(new SubRip()).Trim())
                {
                    this.ShowStatus(string.Format(this._language.SavedSubtitleX, Path.GetFileName(this._fileName)) + " + " + string.Format(this._language.SavedOriginalSubtitleX, Path.GetFileName(this._subtitleAlternateFileName)));
                }
            }
        }

        /// <summary>
        /// The tool strip button save as click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripButtonSaveAsClick(object sender, EventArgs e)
        {
            this.ReloadFromSourceView();
            this.FileSaveAs(true);
        }

        /// <summary>
        /// The tool strip button find click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripButtonFindClick(object sender, EventArgs e)
        {
            this.ReloadFromSourceView();
            this.Find();
        }

        /// <summary>
        /// The tool strip button visual sync click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripButtonVisualSyncClick(object sender, EventArgs e)
        {
            this.ReloadFromSourceView();
            this.ShowVisualSync(false);
        }

        /// <summary>
        /// The tool strip button settings click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripButtonSettingsClick(object sender, EventArgs e)
        {
            this.ReloadFromSourceView();
            this.ShowSettings();
        }

        /// <summary>
        /// The text box source click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void TextBoxSourceClick(object sender, EventArgs e)
        {
            this.ShowSourceLineNumber();
        }

        /// <summary>
        /// The text box source key down.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void TextBoxSourceKeyDown(object sender, KeyEventArgs e)
        {
            this.ShowSourceLineNumber();
            if (e.Modifiers == Keys.Control && e.KeyCode == Keys.A)
            {
                this.textBoxSource.SelectAll();
                e.SuppressKeyPress = true;
            }

            if (e.Modifiers == Keys.Control && e.KeyCode == Keys.D)
            {
                this.textBoxSource.SelectionLength = 0;
                e.SuppressKeyPress = true;
            }
        }

        /// <summary>
        /// The text box source text changed.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void TextBoxSourceTextChanged(object sender, EventArgs e)
        {
            this.ShowSourceLineNumber();
            this._sourceViewChange = true;
            this.labelStatus.Text = string.Empty;
        }

        /// <summary>
        /// The show source line number.
        /// </summary>
        private void ShowSourceLineNumber()
        {
            if (this.tabControlSubtitle.SelectedIndex == TabControlSourceView)
            {
                string number = this.textBoxSource.GetLineFromCharIndex(this.textBoxSource.SelectionStart).ToString();
                if (number.Length > 0)
                {
                    this.toolStripSelected.Text = string.Format(this._language.LineNumberX, int.Parse(number) + 1);
                }
                else
                {
                    this.toolStripSelected.Text = string.Empty;
                }
            }
        }

        /// <summary>
        /// The button get frame rate click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ButtonGetFrameRateClick(object sender, EventArgs e)
        {
            this.openFileDialog1.Title = this._language.OpenVideoFile;
            this.openFileDialog1.FileName = string.Empty;
            this.openFileDialog1.Filter = Utilities.GetVideoFileFilter(false);
            if (this.openFileDialog1.ShowDialog(this) == DialogResult.OK)
            {
                this._videoFileName = this.openFileDialog1.FileName;
                var info = Utilities.GetVideoInfo(this.openFileDialog1.FileName);
                if (info != null && info.Success)
                {
                    string oldFrameRate = this.toolStripComboBoxFrameRate.Text;
                    this.toolStripComboBoxFrameRate.Text = string.Format("{0:0.###}", info.FramesPerSecond);

                    if (oldFrameRate != this.toolStripComboBoxFrameRate.Text)
                    {
                        this.ShowSource();
                        this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);

                        SubtitleFormat format = Utilities.GetSubtitleFormatByFriendlyName(this.comboBoxSubtitleFormats.SelectedItem.ToString());
                        if (this._subtitle.WasLoadedWithFrameNumbers && format.IsTimeBased)
                        {
                            MessageBox.Show(string.Format(this._language.NewFrameRateUsedToCalculateTimeCodes, info.FramesPerSecond));
                        }
                        else if (!this._subtitle.WasLoadedWithFrameNumbers && format.IsFrameBased)
                        {
                            MessageBox.Show(string.Format(this._language.NewFrameRateUsedToCalculateFrameNumbers, info.FramesPerSecond));
                        }
                    }
                }
            }
        }

        /// <summary>
        /// The find tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void FindToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.ReloadFromSourceView();
            this.Find();
        }

        /// <summary>
        /// The find.
        /// </summary>
        private void Find()
        {
            string selectedText;
            if (this.tabControlSubtitle.SelectedIndex == TabControlSourceView)
            {
                selectedText = this.textBoxSource.SelectedText;
            }
            else
            {
                selectedText = this.textBoxListViewText.SelectedText;
            }

            if (selectedText.Length == 0 && this._findHelper != null)
            {
                if (this._clearLastFind)
                {
                    this._clearLastFind = false;
                    this._findHelper.FindType = this._clearLastFindType;
                    selectedText = this._clearLastFindText;
                }
                else
                {
                    selectedText = this._findHelper.FindText;
                }
            }

            using (var findDialog = new FindDialog())
            {
                findDialog.SetIcon(this.toolStripButtonFind.Image as Bitmap);
                findDialog.Initialize(selectedText, this._findHelper);
                if (findDialog.ShowDialog(this) != DialogResult.OK)
                {
                    return;
                }

                this._findHelper = findDialog.GetFindDialogHelper(this._subtitleListViewIndex);
                if (!string.IsNullOrWhiteSpace(this._findHelper.FindText))
                {
                    Configuration.Settings.Tools.FindHistory.Insert(0, this._findHelper.FindText);
                }

                this.ShowStatus(string.Format(this._language.SearchingForXFromLineY, this._findHelper.FindText, this._subtitleListViewIndex + 1));
                if (this.tabControlSubtitle.SelectedIndex == TabControlListView)
                {
                    int selectedIndex = -1;

                    // set the starting selectedIndex if a row is highlighted
                    if (this.SubtitleListview1.SelectedItems.Count > 0)
                    {
                        selectedIndex = this.SubtitleListview1.SelectedItems[0].Index;
                    }

                    // if we fail to find the text, we might want to start searching from the top of the file.
                    bool foundIt = false;
                    if (this._findHelper.Find(this._subtitle, this._subtitleAlternate, selectedIndex))
                    {
                        foundIt = true;
                    }
                    else if (this._findHelper.StartLineIndex >= 1)
                    {
                        if (MessageBox.Show(this._language.FindContinue, this._language.FindContinueTitle, MessageBoxButtons.YesNo) == DialogResult.Yes)
                        {
                            selectedIndex = -1;
                            if (this._findHelper.Find(this._subtitle, this._subtitleAlternate, selectedIndex))
                            {
                                foundIt = true;
                            }
                        }
                    }

                    if (foundIt)
                    {
                        this.SubtitleListview1.SelectIndexAndEnsureVisible(this._findHelper.SelectedIndex);
                        TextBox tb;
                        if (this._findHelper.MatchInOriginal)
                        {
                            tb = this.textBoxListViewTextAlternate;
                        }
                        else
                        {
                            tb = this.textBoxListViewText;
                        }

                        tb.Focus();
                        tb.SelectionStart = this._findHelper.SelectedPosition;
                        tb.SelectionLength = this._findHelper.FindTextLength;
                        this.ShowStatus(string.Format(this._language.XFoundAtLineNumberY, this._findHelper.FindText, this._findHelper.SelectedIndex + 1));
                        this._findHelper.SelectedPosition++;
                    }
                    else
                    {
                        this.ShowStatus(string.Format(this._language.XNotFound, this._findHelper.FindText));
                    }
                }
                else if (this.tabControlSubtitle.SelectedIndex == TabControlSourceView)
                {
                    if (this._findHelper.Find(this.textBoxSource, this.textBoxSource.SelectionStart))
                    {
                        this.textBoxSource.SelectionStart = this._findHelper.SelectedIndex;
                        this.textBoxSource.SelectionLength = this._findHelper.FindTextLength;
                        this.textBoxSource.ScrollToCaret();
                        this.ShowStatus(string.Format(this._language.XFoundAtLineNumberY, this._findHelper.FindText, this.textBoxSource.GetLineFromCharIndex(this.textBoxSource.SelectionStart)));
                    }
                    else
                    {
                        this.ShowStatus(string.Format(this._language.XNotFound, this._findHelper.FindText));
                    }
                }
            }
        }

        /// <summary>
        /// The find next tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void FindNextToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.ReloadFromSourceView();
            this.FindNext();
        }

        /// <summary>
        /// The find next.
        /// </summary>
        private void FindNext()
        {
            if (this._findHelper != null)
            {
                TextBox tb;
                if (this._findHelper.MatchInOriginal)
                {
                    tb = this.textBoxListViewTextAlternate;
                }
                else
                {
                    tb = this.textBoxListViewText;
                }

                if (this.tabControlSubtitle.SelectedIndex == TabControlListView)
                {
                    int selectedIndex = -1;
                    if (this.SubtitleListview1.SelectedItems.Count > 0)
                    {
                        selectedIndex = this.SubtitleListview1.SelectedItems[0].Index;
                    }

                    int textBoxStart = tb.SelectionStart;
                    if (this._findHelper.SelectedPosition - 1 == tb.SelectionStart && tb.SelectionLength > 0)
                    {
                        textBoxStart = tb.SelectionStart + 1;
                    }

                    if (this._findHelper.FindNext(this._subtitle, this._subtitleAlternate, selectedIndex, textBoxStart, Configuration.Settings.General.AllowEditOfOriginalSubtitle))
                    {
                        this.SubtitleListview1.SelectIndexAndEnsureVisible(this._findHelper.SelectedIndex);
                        this.ShowStatus(string.Format(this._language.XFoundAtLineNumberY, this._findHelper.FindText, this._findHelper.SelectedIndex + 1));
                        tb.Focus();
                        tb.SelectionStart = this._findHelper.SelectedPosition;
                        tb.SelectionLength = this._findHelper.FindTextLength;
                        this._findHelper.SelectedPosition++;
                    }
                    else
                    {
                        if (this._findHelper.StartLineIndex >= 1)
                        {
                            if (MessageBox.Show(this._language.FindContinue, this._language.FindContinueTitle, MessageBoxButtons.YesNo) == DialogResult.Yes)
                            {
                                this._findHelper.StartLineIndex = 0;
                                if (this._findHelper.Find(this._subtitle, this._subtitleAlternate, 0))
                                {
                                    this.SubtitleListview1.SelectIndexAndEnsureVisible(this._findHelper.SelectedIndex);
                                    tb.Focus();
                                    tb.SelectionStart = this._findHelper.SelectedPosition;
                                    tb.SelectionLength = this._findHelper.FindTextLength;
                                    this.ShowStatus(string.Format(this._language.XFoundAtLineNumberY, this._findHelper.FindText, this._findHelper.SelectedIndex + 1));
                                    this._findHelper.SelectedPosition++;
                                    return;
                                }
                            }
                        }

                        this.ShowStatus(string.Format(this._language.XNotFound, this._findHelper.FindText));
                    }
                }
                else if (this.tabControlSubtitle.SelectedIndex == TabControlSourceView)
                {
                    if (this._findHelper.FindNext(this.textBoxSource, this.textBoxSource.SelectionStart))
                    {
                        this.textBoxSource.SelectionStart = this._findHelper.SelectedIndex;
                        this.textBoxSource.SelectionLength = this._findHelper.FindTextLength;
                        this.textBoxSource.ScrollToCaret();
                        this.ShowStatus(string.Format(this._language.XFoundAtLineNumberY, this._findHelper.FindText, this.textBoxSource.GetLineFromCharIndex(this.textBoxSource.SelectionStart)));
                    }
                    else
                    {
                        this.ShowStatus(string.Format(this._language.XNotFound, this._findHelper.FindText));
                    }
                }
            }
            else
            {
                this.Find();
            }
        }

        /// <summary>
        /// The tool strip button replace click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripButtonReplaceClick(object sender, EventArgs e)
        {
            this.ReloadFromSourceView();
            this.Replace(null);
        }

        /// <summary>
        /// The replace tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ReplaceToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.ReloadFromSourceView();
            this.Replace(null);
        }

        /// <summary>
        /// The replace source view.
        /// </summary>
        /// <param name="replaceDialog">
        /// The replace dialog.
        /// </param>
        private void ReplaceSourceView(ReplaceDialog replaceDialog)
        {
            bool isFirst = true;
            string selectedText = this.textBoxSource.SelectedText;
            if (selectedText.Length == 0 && this._findHelper != null)
            {
                selectedText = this._findHelper.FindText;
            }

            if (replaceDialog == null)
            {
                replaceDialog = new ReplaceDialog();
                replaceDialog.SetIcon(this.toolStripButtonReplace.Image as Bitmap);
                if (this._findHelper == null)
                {
                    this._findHelper = replaceDialog.GetFindDialogHelper(this._subtitleListViewIndex);
                    this._findHelper.WindowPositionLeft = this.Left + (this.Width / 2) - (replaceDialog.Width / 2);
                    this._findHelper.WindowPositionTop = this.Top + (this.Height / 2) - (replaceDialog.Height / 2);
                }
            }
            else
            {
                isFirst = false;
            }

            replaceDialog.Initialize(selectedText, this._findHelper);
            if (replaceDialog.ShowDialog(this) == DialogResult.OK)
            {
                this._findHelper = replaceDialog.GetFindDialogHelper(this._subtitleListViewIndex);
                this.ShowStatus(string.Format(this._language.SearchingForXFromLineY, this._findHelper.FindText, this._subtitleListViewIndex + 1));
                int replaceCount = 0;
                bool searchStringFound = true;
                while (searchStringFound)
                {
                    searchStringFound = false;
                    int start = this.textBoxSource.SelectionStart;
                    if (isFirst)
                    {
                        this.MakeHistoryForUndo(string.Format(this._language.BeforeReplace, this._findHelper.FindText));
                        isFirst = false;
                        this._makeHistoryPaused = true;
                        if (start >= 0)
                        {
                            start--;
                        }
                    }
                    else
                    {
                        if (this.textBoxSource.SelectionLength > 0 && start > 0 && !replaceDialog.FindOnly)
                        {
                            start--;
                        }
                    }

                    if (this._findHelper.FindNext(this.textBoxSource, start))
                    {
                        this.textBoxSource.SelectionStart = this._findHelper.SelectedIndex;
                        this.textBoxSource.SelectionLength = this._findHelper.FindTextLength;
                        if (!replaceDialog.FindOnly)
                        {
                            this.textBoxSource.SelectedText = this._findHelper.ReplaceText;
                        }

                        this.textBoxSource.ScrollToCaret();

                        replaceCount++;
                        searchStringFound = true;

                        if (!replaceDialog.ReplaceAll && !replaceDialog.FindOnly)
                        {
                            if (this._findHelper.FindNext(this.textBoxSource, start))
                            {
                                this.textBoxSource.SelectionStart = this._findHelper.SelectedIndex;
                                this.textBoxSource.SelectionLength = this._findHelper.FindTextLength;
                                this.textBoxSource.ScrollToCaret();
                            }

                            this.Replace(replaceDialog);
                            return;
                        }
                    }

                    if (replaceDialog.FindOnly)
                    {
                        if (searchStringFound)
                        {
                            this.ShowStatus(string.Format(this._language.MatchFoundX, this._findHelper.FindText));
                        }
                        else
                        {
                            this.ShowStatus(string.Format(this._language.NoMatchFoundX, this._findHelper.FindText));
                        }

                        this.Replace(replaceDialog);
                        return;
                    }

                    if (!replaceDialog.ReplaceAll)
                    {
                        break; // out of while loop
                    }
                }

                this.ReloadFromSourceView();
                if (replaceCount == 0)
                {
                    this.ShowStatus(this._language.FoundNothingToReplace);
                }
                else
                {
                    this.ShowStatus(string.Format(this._language.ReplaceCountX, replaceCount));
                }
            }

            if (this._makeHistoryPaused)
            {
                this.RestartHistory();
            }

            replaceDialog.Dispose();
        }

        /// <summary>
        /// The replace list view.
        /// </summary>
        /// <param name="replaceDialog">
        /// The replace dialog.
        /// </param>
        private void ReplaceListView(ReplaceDialog replaceDialog)
        {
            this.SaveSubtitleListviewIndices();
            int firstIndex = this.FirstSelectedIndex;
            bool isFirst = true;
            string selectedText = this.textBoxListViewText.SelectedText;
            if (selectedText.Length == 0 && this._findHelper != null)
            {
                selectedText = this._findHelper.FindText;
            }

            if (replaceDialog == null)
            {
                replaceDialog = new ReplaceDialog();
                replaceDialog.SetIcon(this.toolStripButtonReplace.Image as Bitmap);
                if (this._findHelper == null)
                {
                    this._findHelper = replaceDialog.GetFindDialogHelper(this._subtitleListViewIndex);
                    this._findHelper.WindowPositionLeft = this.Left + (this.Width / 2) - (replaceDialog.Width / 2);
                    this._findHelper.WindowPositionTop = this.Top + (this.Height / 2) - (replaceDialog.Height / 2);
                }

                int index = 0;

                if (this.SubtitleListview1.SelectedItems.Count > 0)
                {
                    index = this.SubtitleListview1.SelectedItems[0].Index;
                }

                this._findHelper.SelectedIndex = index;
                this._findHelper.SelectedPosition = index;
                this._replaceStartLineIndex = index;
            }
            else
            {
                isFirst = false;
                if (this._findHelper != null)
                {
                    selectedText = this._findHelper.FindText;
                }
            }

            replaceDialog.Initialize(selectedText, this._findHelper);
            if (replaceDialog.ShowDialog(this) == DialogResult.OK)
            {
                if (this._findHelper == null)
                {
                    this._findHelper = replaceDialog.GetFindDialogHelper(this._subtitleListViewIndex);
                }
                else
                {
                    int line = this._findHelper.SelectedIndex;
                    int pos = this._findHelper.SelectedPosition;
                    bool success = this._findHelper.Success;
                    this._findHelper = replaceDialog.GetFindDialogHelper(this._subtitleListViewIndex);
                    this._findHelper.SelectedIndex = line;
                    this._findHelper.SelectedPosition = pos;
                    this._findHelper.Success = success;
                }

                this.ShowStatus(string.Format(this._language.SearchingForXFromLineY, this._findHelper.FindText, this._subtitleListViewIndex + 1));
                int replaceCount = 0;
                bool searchStringFound = true;
                while (searchStringFound)
                {
                    searchStringFound = false;
                    if (isFirst)
                    {
                        this.MakeHistoryForUndo(string.Format(this._language.BeforeReplace, this._findHelper.FindText));
                        isFirst = false;
                        this._makeHistoryPaused = true;
                    }

                    if (replaceDialog.ReplaceAll)
                    {
                        if (this._findHelper.FindNext(this._subtitle, this._subtitleAlternate, this._findHelper.SelectedIndex, this._findHelper.SelectedPosition, Configuration.Settings.General.AllowEditOfOriginalSubtitle))
                        {
                            this.textBoxListViewText.Visible = false;
                            this.SetTextForFindAndReplace(true);
                            this._findHelper.SelectedPosition += this._findHelper.ReplaceText.Length;
                            searchStringFound = true;
                            replaceCount++;
                        }
                        else
                        {
                            this.textBoxListViewText.Visible = true;
                            this._subtitleListViewIndex = -1;
                            if (firstIndex >= 0 && firstIndex < this.SubtitleListview1.Items.Count)
                            {
                                this.SubtitleListview1.Items[firstIndex].Selected = true;
                                this.SubtitleListview1.Items[firstIndex].Focused = true;
                                this.SubtitleListview1.Focus();
                                this.textBoxListViewText.Text = this._subtitle.Paragraphs[firstIndex].Text;
                                if (this._subtitleAlternate != null && this.textBoxListViewTextAlternate.Visible)
                                {
                                    var orginial = Utilities.GetOriginalParagraph(this._findHelper.SelectedIndex, this._subtitle.Paragraphs[this._findHelper.SelectedIndex], this._subtitleAlternate.Paragraphs);
                                    if (orginial != null)
                                    {
                                        this.textBoxListViewTextAlternate.Text = orginial.Text;
                                    }
                                }
                            }
                            else
                            {
                                this.SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                            }

                            this.ShowStatus(string.Format(this._language.NoMatchFoundX, this._findHelper.FindText));

                            if (this._replaceStartLineIndex >= 1)
                            {
                                // Prompt for start over
                                this._replaceStartLineIndex = 0;
                                string msgText = this._language.ReplaceContinueNotFound;
                                if (replaceCount > 0)
                                {
                                    msgText = string.Format(this._language.ReplaceXContinue, replaceCount);
                                }

                                if (MessageBox.Show(msgText, this._language.ReplaceContinueTitle, MessageBoxButtons.YesNo) == DialogResult.Yes)
                                {
                                    this._findHelper.StartLineIndex = 0;
                                    this._findHelper.SelectedIndex = 0;
                                    this._findHelper.SelectedPosition = 0;
                                    this.SetTextForFindAndReplace(false);

                                    if (this._findHelper.FindNext(this._subtitle, this._subtitleAlternate, this._findHelper.SelectedIndex, this._findHelper.SelectedPosition, Configuration.Settings.General.AllowEditOfOriginalSubtitle))
                                    {
                                        this.SetTextForFindAndReplace(true);
                                        this._findHelper.SelectedPosition += this._findHelper.ReplaceText.Length;
                                        searchStringFound = true;
                                        replaceCount++;
                                    }
                                }
                            }
                        }
                    }
                    else if (replaceDialog.FindOnly)
                    {
                        if (this._findHelper.FindNext(this._subtitle, this._subtitleAlternate, this._findHelper.SelectedIndex, this._findHelper.SelectedPosition, Configuration.Settings.General.AllowEditOfOriginalSubtitle))
                        {
                            this.SubtitleListview1.SelectIndexAndEnsureVisible(this._findHelper.SelectedIndex, true);
                            this.textBoxListViewText.Focus();
                            this.textBoxListViewText.SelectionStart = this._findHelper.SelectedPosition;
                            this.textBoxListViewText.SelectionLength = this._findHelper.FindTextLength;
                            this._findHelper.SelectedPosition += this._findHelper.FindTextLength;
                            this.ShowStatus(string.Format(this._language.NoXFoundAtLineY, this._findHelper.SelectedIndex + 1, this._findHelper.FindText));
                            this.Replace(replaceDialog);
                            if (replaceDialog != null && !replaceDialog.IsDisposed)
                            {
                                replaceDialog.Dispose();
                                replaceDialog = null;
                            }

                            return;
                        }

                        if (this._replaceStartLineIndex >= 1)
                        {
                            // Prompt for start over
                            this._replaceStartLineIndex = 0;
                            if (MessageBox.Show(this._language.FindContinue, this._language.FindContinueTitle, MessageBoxButtons.YesNo) == DialogResult.Yes)
                            {
                                this.SubtitleListview1.SelectIndexAndEnsureVisible(0);
                                this._findHelper.StartLineIndex = 0;
                                this._findHelper.SelectedIndex = 0;
                                this._findHelper.SelectedPosition = 0;
                                if (this._findHelper.FindNext(this._subtitle, this._subtitleAlternate, this._findHelper.SelectedIndex, this._findHelper.SelectedPosition, Configuration.Settings.General.AllowEditOfOriginalSubtitle))
                                {
                                    this.SubtitleListview1.SelectIndexAndEnsureVisible(this._findHelper.SelectedIndex);
                                    this.textBoxListViewText.Focus();
                                    this.textBoxListViewText.SelectionStart = this._findHelper.SelectedPosition;
                                    this.textBoxListViewText.SelectionLength = this._findHelper.FindTextLength;
                                    this._findHelper.SelectedPosition += this._findHelper.FindTextLength;
                                    this.ShowStatus(string.Format(this._language.NoXFoundAtLineY, this._findHelper.SelectedIndex + 1, this._findHelper.FindText));
                                    this.Replace(replaceDialog);
                                    if (replaceDialog != null)
                                    {
                                        replaceDialog.Dispose();
                                        replaceDialog = null;
                                    }

                                    return;
                                }
                            }
                            else
                            {
                                if (replaceDialog != null && !replaceDialog.IsDisposed)
                                {
                                    replaceDialog.Dispose();
                                    replaceDialog = null;
                                }

                                return;
                            }
                        }

                        this.ShowStatus(string.Format(this._language.NoMatchFoundX, this._findHelper.FindText));
                    }
                    else if (!replaceDialog.FindOnly)
                    {
                        // replace once only
                        string msg = string.Empty;
                        if (this._findHelper.FindType == FindType.RegEx && this._findHelper.Success)
                        {
                            if (this._findHelper.FindType == FindType.RegEx)
                            {
                                this.ReplaceViaRegularExpression();
                            }
                            else
                            {
                                this.textBoxListViewText.SelectedText = this._findHelper.ReplaceText;
                            }

                            msg = this._language.OneReplacementMade + " ";
                        }
                        else if (this.textBoxListViewText.SelectionLength == this._findHelper.FindTextLength)
                        {
                            this.textBoxListViewText.SelectedText = this._findHelper.ReplaceText;
                            msg = this._language.OneReplacementMade + " ";
                        }

                        if (this._findHelper.FindNext(this._subtitle, this._subtitleAlternate, this._findHelper.SelectedIndex, this._findHelper.SelectedPosition, Configuration.Settings.General.AllowEditOfOriginalSubtitle))
                        {
                            this.SubtitleListview1.SelectIndexAndEnsureVisible(this._findHelper.SelectedIndex);
                            if (this._findHelper.MatchInOriginal)
                            {
                                this.textBoxListViewTextAlternate.Focus();
                                this.textBoxListViewTextAlternate.SelectionStart = this._findHelper.SelectedPosition;
                                this.textBoxListViewTextAlternate.SelectionLength = this._findHelper.FindTextLength;
                            }
                            else
                            {
                                this.textBoxListViewText.Focus();
                                this.textBoxListViewText.SelectionStart = this._findHelper.SelectedPosition;
                                this.textBoxListViewText.SelectionLength = this._findHelper.FindTextLength;
                            }

                            this._findHelper.SelectedPosition += this._findHelper.ReplaceText.Length;
                            this.ShowStatus(string.Format(msg + this._language.XFoundAtLineNumberY, this._findHelper.FindText, this._findHelper.SelectedIndex + 1));
                        }
                        else
                        {
                            this.ShowStatus(msg + string.Format(this._language.XNotFound, this._findHelper.FindText));

                            // Prompt for start over
                            if (this._replaceStartLineIndex >= 1)
                            {
                                this._replaceStartLineIndex = 0;
                                if (MessageBox.Show(this._language.FindContinue, this._language.FindContinueTitle, MessageBoxButtons.YesNo) == DialogResult.Yes)
                                {
                                    this.SubtitleListview1.SelectIndexAndEnsureVisible(0);
                                    this._findHelper.StartLineIndex = 0;
                                    this._findHelper.SelectedIndex = 0;
                                    this._findHelper.SelectedPosition = 0;

                                    if (this._findHelper.FindNext(this._subtitle, this._subtitleAlternate, this._findHelper.SelectedIndex, this._findHelper.SelectedPosition, Configuration.Settings.General.AllowEditOfOriginalSubtitle))
                                    {
                                        this.SubtitleListview1.SelectIndexAndEnsureVisible(this._findHelper.SelectedIndex, true);
                                        this.textBoxListViewText.Focus();
                                        this.textBoxListViewText.SelectionStart = this._findHelper.SelectedPosition;
                                        this.textBoxListViewText.SelectionLength = this._findHelper.FindTextLength;
                                        this._findHelper.SelectedPosition += this._findHelper.ReplaceText.Length;
                                        this.ShowStatus(string.Format(msg + this._language.XFoundAtLineNumberY, this._findHelper.FindText, this._findHelper.SelectedIndex + 1));
                                    }
                                }
                                else
                                {
                                    if (replaceDialog != null && !replaceDialog.IsDisposed)
                                    {
                                        replaceDialog.Dispose();
                                        replaceDialog = null;
                                    }

                                    return;
                                }
                            }
                        }

                        this.Replace(replaceDialog);
                        if (replaceDialog != null && !replaceDialog.IsDisposed)
                        {
                            replaceDialog.Dispose();
                            replaceDialog = null;
                        }

                        return;
                    }
                }

                this.ShowSource();
                if (replaceCount == 0)
                {
                    this.ShowStatus(this._language.FoundNothingToReplace);
                }
                else
                {
                    this.ShowStatus(string.Format(this._language.ReplaceCountX, replaceCount));
                }
            }

            this.RestoreSubtitleListviewIndices();
            if (this._makeHistoryPaused)
            {
                this.RestartHistory();
            }

            replaceDialog.Dispose();
        }

        /// <summary>
        /// The replace via regular expression.
        /// </summary>
        private void ReplaceViaRegularExpression()
        {
            var r = new Regex(this._findHelper.FindText, RegexOptions.Multiline);
            if (this._findHelper.ReplaceText.Contains('$'))
            {
                string result = r.Replace(this.textBoxListViewText.Text, this._findHelper.ReplaceText);
                if (result != this.textBoxListViewText.Text)
                {
                    this.textBoxListViewText.Text = result;
                }
            }
            else
            {
                string result = r.Replace(this.textBoxListViewText.SelectedText, this._findHelper.ReplaceText);
                if (result != this.textBoxListViewText.SelectedText)
                {
                    this.textBoxListViewText.SelectedText = result;
                }
            }
        }

        /// <summary>
        /// The set text for find and replace.
        /// </summary>
        /// <param name="replace">
        /// The replace.
        /// </param>
        private void SetTextForFindAndReplace(bool replace)
        {
            this._subtitleListViewIndex = this._findHelper.SelectedIndex;
            this.textBoxListViewText.Text = this._subtitle.Paragraphs[this._findHelper.SelectedIndex].Text;
            if (this._subtitleAlternate != null && this.textBoxListViewTextAlternate.Visible)
            {
                var orginial = Utilities.GetOriginalParagraph(this._findHelper.SelectedIndex, this._subtitle.Paragraphs[this._findHelper.SelectedIndex], this._subtitleAlternate.Paragraphs);
                if (orginial != null)
                {
                    this.textBoxListViewTextAlternate.Text = orginial.Text;
                }
            }

            if (replace)
            {
                if (this._findHelper.MatchInOriginal)
                {
                    this.textBoxListViewTextAlternate.SelectionStart = this._findHelper.SelectedPosition;
                    this.textBoxListViewTextAlternate.SelectionLength = this._findHelper.FindTextLength;
                    this.textBoxListViewTextAlternate.SelectedText = this._findHelper.ReplaceText;
                }
                else
                {
                    this.textBoxListViewText.SelectionStart = this._findHelper.SelectedPosition;
                    this.textBoxListViewText.SelectionLength = this._findHelper.FindTextLength;
                    if (this._findHelper.FindType == FindType.RegEx)
                    {
                        this.ReplaceViaRegularExpression();
                    }
                    else
                    {
                        this.textBoxListViewText.SelectedText = this._findHelper.ReplaceText;
                    }
                }
            }
        }

        /// <summary>
        /// The replace.
        /// </summary>
        /// <param name="replaceDialog">
        /// The replace dialog.
        /// </param>
        private void Replace(ReplaceDialog replaceDialog)
        {
            if (this.tabControlSubtitle.SelectedIndex == TabControlSourceView)
            {
                this.ReplaceSourceView(replaceDialog);
            }
            else
            {
                this.ReplaceListView(replaceDialog);
            }
        }

        /// <summary>
        /// The show status.
        /// </summary>
        /// <param name="message">
        /// The message.
        /// </param>
        public void ShowStatus(string message)
        {
            this.labelStatus.Text = message;
            this.statusStrip1.Refresh();
            if (!string.IsNullOrEmpty(message))
            {
                this._timerClearStatus.Stop();
                this._statusLog.AppendLine(string.Format("{0:0000}-{1:00}-{2:00} {3}: {4}", DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, DateTime.Now.ToLongTimeString(), message));
                this._timerClearStatus.Start();
            }

            this.ShowSourceLineNumber();
            this.ShowLineInformationListView();
        }

        /// <summary>
        /// The reload from source view.
        /// </summary>
        private void ReloadFromSourceView()
        {
            if (this._sourceViewChange)
            {
                this.SaveSubtitleListviewIndices();
                if (!string.IsNullOrWhiteSpace(this.textBoxSource.Text))
                {
                    var temp = new Subtitle(this._subtitle);
                    SubtitleFormat format = this.GetCurrentSubtitleFormat();
                    var list = new List<string>(this.textBoxSource.Lines);
                    if (format != null && format.IsMine(list, null))
                    {
                        format.LoadSubtitle(temp, list, null);
                    }
                    else
                    {
                        format = temp.ReloadLoadSubtitle(new List<string>(this.textBoxSource.Lines), null);
                    }

                    if (format == null)
                    {
                        MessageBox.Show(this._language.UnableToParseSourceView);
                        return;
                    }

                    this._sourceViewChange = false;
                    this.MakeHistoryForUndo(this._language.BeforeChangesMadeInSourceView);
                    this._subtitle.ReloadLoadSubtitle(new List<string>(this.textBoxSource.Lines), null);
                    if (format.IsFrameBased)
                    {
                        this._subtitle.CalculateTimeCodesFromFrameNumbers(this.CurrentFrameRate);
                    }

                    int index = 0;
                    foreach (object obj in this.comboBoxSubtitleFormats.Items)
                    {
                        if (obj.ToString() == format.FriendlyName)
                        {
                            this.comboBoxSubtitleFormats.SelectedIndex = index;
                        }

                        index++;
                    }

                    if (format.GetType() == typeof(AdvancedSubStationAlpha) || format.GetType() == typeof(SubStationAlpha))
                    {
                        string errors = AdvancedSubStationAlpha.CheckForErrors(this._subtitle.Header);
                        if (!string.IsNullOrEmpty(errors))
                        {
                            MessageBox.Show(errors, this.Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                    }
                    else if (format.GetType() == typeof(SubRip))
                    {
                        string errors = (format as SubRip).Errors;
                        if (!string.IsNullOrEmpty(errors))
                        {
                            MessageBox.Show(errors, this.Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                    }
                    else if (format.GetType() == typeof(MicroDvd))
                    {
                        string errors = (format as MicroDvd).Errors;
                        if (!string.IsNullOrEmpty(errors))
                        {
                            MessageBox.Show(errors, this.Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                    }
                }
                else
                {
                    this._sourceViewChange = false;
                    this.MakeHistoryForUndo(this._language.BeforeChangesMadeInSourceView);
                    this._sourceViewChange = false;
                    this._subtitle.Paragraphs.Clear();
                }

                this._subtitleListViewIndex = -1;
                this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                this.RestoreSubtitleListviewIndices();
            }
        }

        /// <summary>
        /// The help tool strip menu item 1 click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void HelpToolStripMenuItem1Click(object sender, EventArgs e)
        {
            this.ReloadFromSourceView();
            Utilities.ShowHelp(string.Empty);
        }

        /// <summary>
        /// The tool strip button help click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripButtonHelpClick(object sender, EventArgs e)
        {
            this.ReloadFromSourceView();
            Utilities.ShowHelp(string.Empty);
        }

        /// <summary>
        /// The goto line number tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void GotoLineNumberToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.ReloadFromSourceView();
            if (!this.IsSubtitleLoaded)
            {
                this.DisplaySubtitleNotLoadedMessage();
                return;
            }

            using (var goToLine = new GoToLine())
            {
                if (this.tabControlSubtitle.SelectedIndex == TabControlListView)
                {
                    goToLine.Initialize(1, this.SubtitleListview1.Items.Count);
                }
                else if (this.tabControlSubtitle.SelectedIndex == TabControlSourceView)
                {
                    goToLine.Initialize(1, this.textBoxSource.Lines.Length);
                }

                if (goToLine.ShowDialog(this) == DialogResult.OK)
                {
                    if (this.tabControlSubtitle.SelectedIndex == TabControlListView)
                    {
                        this.SubtitleListview1.SelectNone();

                        this.SubtitleListview1.Items[goToLine.LineNumber - 1].Selected = true;
                        this.SubtitleListview1.Items[goToLine.LineNumber - 1].EnsureVisible();
                        this.SubtitleListview1.Items[goToLine.LineNumber - 1].Focused = true;
                        this.ShowStatus(string.Format(this._language.GoToLineNumberX, goToLine.LineNumber));
                    }
                    else if (this.tabControlSubtitle.SelectedIndex == TabControlSourceView)
                    {
                        // binary search
                        int start = 0;
                        int end = this.textBoxSource.Text.Length;
                        while (end - start > 10)
                        {
                            int middle = start + (end - start) / 2;
                            if (goToLine.LineNumber - 1 >= this.textBoxSource.GetLineFromCharIndex(middle))
                            {
                                start = middle;
                            }
                            else
                            {
                                end = middle;
                            }
                        }

                        // go before line, so we can find first char on line
                        start -= 100;
                        if (start < 0)
                        {
                            start = 0;
                        }

                        for (int i = start; i <= end; i++)
                        {
                            if (this.textBoxSource.GetLineFromCharIndex(i) == goToLine.LineNumber - 1)
                            {
                                // select line, scroll to line, and focus...
                                this.textBoxSource.SelectionStart = i;
                                this.textBoxSource.SelectionLength = this.textBoxSource.Lines[goToLine.LineNumber - 1].Length;
                                this.textBoxSource.ScrollToCaret();
                                this.ShowStatus(string.Format(this._language.GoToLineNumberX, goToLine.LineNumber));
                                if (this.textBoxSource.CanFocus)
                                {
                                    this.textBoxSource.Focus();
                                }

                                break;
                            }
                        }

                        this.ShowSourceLineNumber();
                    }
                }
            }
        }

        /// <summary>
        /// The text box source leave.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void TextBoxSourceLeave(object sender, EventArgs e)
        {
            this.ReloadFromSourceView();
        }

        /// <summary>
        /// The adjust display time tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void AdjustDisplayTimeToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.AdjustDisplayTime(false);
        }

        /// <summary>
        /// The adjust display time.
        /// </summary>
        /// <param name="onlySelectedLines">
        /// The only selected lines.
        /// </param>
        private void AdjustDisplayTime(bool onlySelectedLines)
        {
            if (!this.IsSubtitleLoaded)
            {
                this.DisplaySubtitleNotLoadedMessage();
                return;
            }

            this.ReloadFromSourceView();
            using (var adjustDisplayTime = new AdjustDisplayDuration())
            {
                ListView.SelectedIndexCollection selectedIndices = null;
                if (onlySelectedLines)
                {
                    adjustDisplayTime.Text += " - " + this._language.SelectedLines;
                    selectedIndices = this.SubtitleListview1.SelectedIndices;
                }

                if (adjustDisplayTime.ShowDialog(this) == DialogResult.OK)
                {
                    this.MakeHistoryForUndo(this._language.BeforeDisplayTimeAdjustment);
                    if (adjustDisplayTime.AdjustUsingPercent)
                    {
                        double percent = double.Parse(adjustDisplayTime.AdjustValue);
                        this._subtitle.AdjustDisplayTimeUsingPercent(percent, selectedIndices);
                    }
                    else if (adjustDisplayTime.AdjustUsingSeconds)
                    {
                        double seconds = double.Parse(adjustDisplayTime.AdjustValue);
                        this._subtitle.AdjustDisplayTimeUsingSeconds(seconds, selectedIndices);
                    }
                    else
                    { // recalculate durations!!!
                        double maxCharSeconds = (double)adjustDisplayTime.MaxCharactersPerSecond;
                        this._subtitle.RecalculateDisplayTimes(maxCharSeconds, selectedIndices);
                    }

                    this.ShowStatus(string.Format(this._language.DisplayTimesAdjustedX, adjustDisplayTime.AdjustValue));
                    this.SaveSubtitleListviewIndices();
                    if (this.IsFramesRelevant && this.CurrentFrameRate > 0)
                    {
                        this._subtitle.CalculateFrameNumbersFromTimeCodesNoCheck(this.CurrentFrameRate);
                        if (this.tabControlSubtitle.SelectedIndex == TabControlSourceView)
                        {
                            this.ShowSource();
                        }
                    }

                    this.ShowSource();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this.RestoreSubtitleListviewIndices();
                }
            }
        }

        /// <summary>
        /// The fix tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void FixToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (this._networkSession == null)
            {
                this.FixCommonErrors(false);
            }
        }

        /// <summary>
        /// The fix common errors.
        /// </summary>
        /// <param name="onlySelectedLines">
        /// The only selected lines.
        /// </param>
        private void FixCommonErrors(bool onlySelectedLines)
        {
            if (this.IsSubtitleLoaded)
            {
                this.ReloadFromSourceView();
                this.SaveSubtitleListviewIndices();
                using (var fixErrors = new FixCommonErrors())
                {
                    if (onlySelectedLines)
                    {
                        var selectedLines = new Subtitle { WasLoadedWithFrameNumbers = this._subtitle.WasLoadedWithFrameNumbers };
                        foreach (int index in this.SubtitleListview1.SelectedIndices)
                        {
                            selectedLines.Paragraphs.Add(this._subtitle.Paragraphs[index]);
                        }

                        fixErrors.Initialize(selectedLines, this.GetCurrentSubtitleFormat(), this.GetCurrentEncoding());
                    }
                    else
                    {
                        fixErrors.Initialize(this._subtitle, this.GetCurrentSubtitleFormat(), this.GetCurrentEncoding());
                    }

                    if (fixErrors.ShowDialog(this) == DialogResult.OK)
                    {
                        this.MakeHistoryForUndo(this._language.BeforeCommonErrorFixes);
                        this._subtitle.Renumber();
                        if (onlySelectedLines)
                        {
                            // we only update selected lines
                            int i = 0;
                            if (this._networkSession != null)
                            {
                                var deletes = new List<int>();
                                this._networkSession.TimerStop();
                                foreach (int index in this.SubtitleListview1.SelectedIndices)
                                {
                                    var pOld = this._subtitle.Paragraphs[index];
                                    var p = fixErrors.FixedSubtitle.GetParagraphOrDefaultById(pOld.ID);
                                    if (p == null)
                                    {
                                        deletes.Add(index);
                                    }
                                    else
                                    {
                                        this._subtitle.Paragraphs[index] = p;
                                        this.SubtitleListview1.SetTimeAndText(index, p);
                                    }

                                    i++;
                                }

                                this.NetworkGetSendUpdates(deletes, 0, null);
                            }
                            else
                            {
                                for (int index = this.SubtitleListview1.SelectedIndices.Count - 1; index >= 0; index--)
                                {
                                    var pOld = this._subtitle.Paragraphs[index];
                                    var p = fixErrors.FixedSubtitle.GetParagraphOrDefaultById(pOld.ID);
                                    if (p == null)
                                    {
                                        this._subtitle.Paragraphs.RemoveAt(index);
                                    }
                                    else
                                    {
                                        this._subtitle.Paragraphs[index] = p;
                                    }

                                    i++;
                                }
                            }

                            this.ShowStatus(this._language.CommonErrorsFixedInSelectedLines);
                        }
                        else
                        {
                            this._subtitle.Paragraphs.Clear();
                            foreach (var p in fixErrors.FixedSubtitle.Paragraphs)
                            {
                                this._subtitle.Paragraphs.Add(p);
                            }

                            this.ShowStatus(this._language.CommonErrorsFixed);
                        }

                        this._subtitle.Renumber();
                        this.ShowSource();
                        this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                        this.RestoreSubtitleListviewIndices();
                    }

                    Configuration.Settings.CommonErrors.StartSize = fixErrors.Width + ";" + fixErrors.Height;
                    Configuration.Settings.CommonErrors.StartPosition = fixErrors.Left + ";" + fixErrors.Top;
                }
            }
            else
            {
                this.DisplaySubtitleNotLoadedMessage();
            }

            this.ShowInTaskbar = true;
        }

        /// <summary>
        /// The start numbering from tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void StartNumberingFromToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!this.IsSubtitleLoaded)
            {
                this.DisplaySubtitleNotLoadedMessage();
                return;
            }

            this.ReloadFromSourceView();
            using (var startNumberingFrom = new StartNumberingFrom())
            {
                if (startNumberingFrom.ShowDialog(this) == DialogResult.OK)
                {
                    this.SaveSubtitleListviewIndices();
                    this.MakeHistoryForUndo(this._language.BeforeRenumbering);
                    this.ShowStatus(string.Format(this._language.RenumberedStartingFromX, startNumberingFrom.StartFromNumber));
                    this._subtitle.Renumber(startNumberingFrom.StartFromNumber);
                    this.ShowSource();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this.RestoreSubtitleListviewIndices();
                }
            }
        }

        /// <summary>
        /// The renumber.
        /// </summary>
        private void Renumber()
        {
            if (this._subtitle != null && this._subtitle.Paragraphs != null && this._subtitle.Paragraphs.Count > 0)
            {
                this._subtitle.Renumber();
            }
        }

        /// <summary>
        /// The remove text for hear impared tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void RemoveTextForHearImparedToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!this.IsSubtitleLoaded)
            {
                this.DisplaySubtitleNotLoadedMessage();
                return;
            }

            this.ReloadFromSourceView();
            using (var removeTextFromHearImpaired = new FormRemoveTextForHearImpaired())
            {
                removeTextFromHearImpaired.Initialize(this._subtitle);
                if (removeTextFromHearImpaired.ShowDialog(this) == DialogResult.OK)
                {
                    this.MakeHistoryForUndo(this._language.BeforeRemovalOfTextingForHearingImpaired);
                    int count = removeTextFromHearImpaired.RemoveTextFromHearImpaired();
                    if (count > 0)
                    {
                        if (count == 1)
                        {
                            this.ShowStatus(this._language.TextingForHearingImpairedRemovedOneLine);
                        }
                        else
                        {
                            this.ShowStatus(string.Format(this._language.TextingForHearingImpairedRemovedXLines, count));
                        }

                        this._subtitleListViewIndex = -1;
                        this.Renumber();
                        this.ShowSource();
                        this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                        if (this._subtitle.Paragraphs.Count > 0)
                        {
                            this.SubtitleListview1.SelectIndexAndEnsureVisible(0);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// The split tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void SplitToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!this.IsSubtitleLoaded)
            {
                this.DisplaySubtitleNotLoadedMessage();
                return;
            }

            this.ReloadFromSourceView();
            double lengthInSeconds = 0;
            if (this.mediaPlayer.VideoPlayer != null)
            {
                lengthInSeconds = this.mediaPlayer.Duration;
            }

            if (Configuration.Settings.Tools.SplitAdvanced)
            {
                using (var split = new Split())
                {
                    split.Initialize(this._subtitle, this._fileName, this.GetCurrentSubtitleFormat());
                    if (split.ShowDialog(this) == DialogResult.OK)
                    {
                        this.ShowStatus(this._language.SubtitleSplitted);
                    }
                    else if (split.ShowBasic)
                    {
                        Configuration.Settings.Tools.SplitAdvanced = false;
                        this.SplitToolStripMenuItemClick(null, null);
                    }
                }
            }
            else
            {
                using (var splitSubtitle = new SplitSubtitle())
                {
                    splitSubtitle.Initialize(this._subtitle, this._fileName, this.GetCurrentSubtitleFormat(), this.GetCurrentEncoding(), lengthInSeconds);
                    if (splitSubtitle.ShowDialog(this) == DialogResult.OK)
                    {
                        this.ShowStatus(this._language.SubtitleSplitted);
                    }
                    else if (splitSubtitle.ShowAdvanced)
                    {
                        Configuration.Settings.Tools.SplitAdvanced = true;
                        this.SplitToolStripMenuItemClick(null, null);
                    }
                }
            }
        }

        /// <summary>
        /// The append text visually tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void AppendTextVisuallyToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!this.IsSubtitleLoaded)
            {
                this.DisplaySubtitleNotLoadedMessage();
                return;
            }

            this.ReloadFromSourceView();

            if (MessageBox.Show(this._language.SubtitleAppendPrompt, this._language.SubtitleAppendPromptTitle, MessageBoxButtons.YesNoCancel) == DialogResult.Yes)
            {
                this.openFileDialog1.Title = this._language.OpenSubtitleToAppend;
                this.openFileDialog1.FileName = string.Empty;
                this.openFileDialog1.Filter = Utilities.GetOpenDialogFilter();
                if (this.openFileDialog1.ShowDialog(this) == DialogResult.OK)
                {
                    bool success = false;
                    string fileName = this.openFileDialog1.FileName;
                    if (File.Exists(fileName))
                    {
                        var subtitleToAppend = new Subtitle();
                        SubtitleFormat format = null;

                        // do not allow blu-ray/vobsub
                        string extension = Path.GetExtension(fileName).ToLowerInvariant();
                        if (extension == ".sub" && (this.IsVobSubFile(fileName, false) || FileUtil.IsSpDvdSup(fileName)))
                        {
                            format = null;
                        }
                        else if (extension == ".sup" && FileUtil.IsBluRaySup(fileName))
                        {
                            format = null;
                        }
                        else
                        {
                            Encoding encoding;
                            format = subtitleToAppend.LoadSubtitle(fileName, out encoding, null);
                            if (this.GetCurrentSubtitleFormat().IsFrameBased)
                            {
                                subtitleToAppend.CalculateTimeCodesFromFrameNumbers(this.CurrentFrameRate);
                            }
                            else
                            {
                                subtitleToAppend.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                            }
                        }

                        if (format != null && subtitleToAppend.Paragraphs.Count > 1)
                        {
                            using (var visualSync = new VisualSync())
                            {
                                visualSync.Initialize(this.toolStripButtonVisualSync.Image as Bitmap, subtitleToAppend, this._fileName, this._language.AppendViaVisualSyncTitle, this.CurrentFrameRate);
                                visualSync.ShowDialog(this);
                                if (visualSync.OkPressed)
                                {
                                    if (MessageBox.Show(this._language.AppendSynchronizedSubtitlePrompt, this._language.SubtitleAppendPromptTitle, MessageBoxButtons.YesNo) == DialogResult.Yes)
                                    {
                                        int start = this._subtitle.Paragraphs.Count + 1;
                                        var fr = this.CurrentFrameRate;
                                        this.MakeHistoryForUndo(this._language.BeforeAppend);
                                        foreach (var p in visualSync.Paragraphs)
                                        {
                                            if (format.IsFrameBased)
                                            {
                                                p.CalculateFrameNumbersFromTimeCodes(fr);
                                            }

                                            this._subtitle.Paragraphs.Add(new Paragraph(p));
                                        }

                                        if (format.GetType() == typeof(AdvancedSubStationAlpha) && this.GetCurrentSubtitleFormat().GetType() == typeof(AdvancedSubStationAlpha))
                                        {
                                            var currentStyles = new List<string>();
                                            if (this._subtitle.Header != null)
                                            {
                                                currentStyles = AdvancedSubStationAlpha.GetStylesFromHeader(this._subtitle.Header);
                                            }

                                            foreach (var styleName in AdvancedSubStationAlpha.GetStylesFromHeader(subtitleToAppend.Header))
                                            {
                                                bool alreadyExists = false;
                                                foreach (var currentStyleName in currentStyles)
                                                {
                                                    if (currentStyleName.Trim().Equals(styleName.Trim(), StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        alreadyExists = true;
                                                    }
                                                }

                                                if (!alreadyExists)
                                                {
                                                    var newStyle = AdvancedSubStationAlpha.GetSsaStyle(styleName, subtitleToAppend.Header);
                                                    this._subtitle.Header = AdvancedSubStationAlpha.AddSsaStyle(newStyle, this._subtitle.Header);
                                                }
                                            }
                                        }

                                        this._subtitle.Renumber();

                                        this.ShowSource();
                                        this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);

                                        // select appended lines
                                        for (int i = start; i < this._subtitle.Paragraphs.Count; i++)
                                        {
                                            this.SubtitleListview1.Items[i].Selected = true;
                                        }

                                        this.SubtitleListview1.EnsureVisible(start);

                                        this.ShowStatus(string.Format(this._language.SubtitleAppendedX, fileName));
                                        success = true;
                                    }
                                }
                            }
                        }
                    }

                    if (!success)
                    {
                        this.ShowStatus(this._language.SubtitleNotAppended);
                    }
                }
            }
        }

        /// <summary>
        /// The translate by google tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void TranslateByGoogleToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.TranslateViaGoogle(false, true);
        }

        /// <summary>
        /// The translate via google.
        /// </summary>
        /// <param name="onlySelectedLines">
        /// The only selected lines.
        /// </param>
        /// <param name="useGoogle">
        /// The use google.
        /// </param>
        private void TranslateViaGoogle(bool onlySelectedLines, bool useGoogle)
        {
            if (!this.IsSubtitleLoaded)
            {
                this.DisplaySubtitleNotLoadedMessage();
                return;
            }

            bool isAlternateVisible = this.SubtitleListview1.IsAlternateTextColumnVisible;
            this.ReloadFromSourceView();
            using (var googleTranslate = new GoogleTranslate())
            {
                this.SaveSubtitleListviewIndices();
                string title = this._language.GoogleTranslate;
                if (!useGoogle)
                {
                    title = this._language.MicrosoftTranslate;
                }

                if (onlySelectedLines)
                {
                    var selectedLines = new Subtitle { WasLoadedWithFrameNumbers = this._subtitle.WasLoadedWithFrameNumbers };
                    foreach (int index in this.SubtitleListview1.SelectedIndices)
                    {
                        selectedLines.Paragraphs.Add(this._subtitle.Paragraphs[index]);
                    }

                    title += " - " + this._language.SelectedLines;
                    googleTranslate.Initialize(selectedLines, title, useGoogle, this.GetCurrentEncoding());
                }
                else
                {
                    googleTranslate.Initialize(this._subtitle, title, useGoogle, this.GetCurrentEncoding());
                }

                if (googleTranslate.ShowDialog(this) == DialogResult.OK)
                {
                    this._subtitleListViewIndex = -1;

                    this.MakeHistoryForUndo(this._language.BeforeGoogleTranslation);
                    if (onlySelectedLines)
                    {
                        // we only update selected lines
                        int i = 0;
                        foreach (int index in this.SubtitleListview1.SelectedIndices)
                        {
                            this._subtitle.Paragraphs[index] = googleTranslate.TranslatedSubtitle.Paragraphs[i];
                            i++;
                        }

                        this.ShowStatus(this._language.SelectedLinesTranslated);
                    }
                    else
                    {
                        this._subtitleAlternate = new Subtitle(this._subtitle);
                        this._subtitleAlternateFileName = this._fileName;
                        this._fileName = null;
                        this._subtitle.Paragraphs.Clear();
                        foreach (var p in googleTranslate.TranslatedSubtitle.Paragraphs)
                        {
                            this._subtitle.Paragraphs.Add(new Paragraph(p));
                        }

                        this.ShowStatus(this._language.SubtitleTranslated);
                    }

                    this.ShowSource();

                    if (!onlySelectedLines)
                    {
                        this.SubtitleListview1.ShowAlternateTextColumn(this._languageGeneral.OriginalText);
                        this.SubtitleListview1.AutoSizeAllColumns(this);
                        this.SetupAlternateEdit();
                    }

                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this.ResetHistory();
                    this.RestoreSubtitleListviewIndices();
                    this._converted = true;
                    this.SetTitle();

                    // if (googleTranslate.ScreenScrapingEncoding != null)
                    // SetEncoding(googleTranslate.ScreenScrapingEncoding);
                    this.SetEncoding(Encoding.UTF8);
                    if (!isAlternateVisible)
                    {
                        this.toolStripMenuItemShowOriginalInPreview.Checked = false;
                        Configuration.Settings.General.ShowOriginalAsPreviewIfAvailable = false;
                        this.audioVisualizer.Invalidate();
                    }
                }
            }
        }

        /// <summary>
        /// The get translate string from nikse dk.
        /// </summary>
        /// <param name="input">
        /// The input.
        /// </param>
        /// <returns>
        /// The <see cref="string"/>.
        /// </returns>
        private static string GetTranslateStringFromNikseDk(string input)
        {
            WebRequest.DefaultWebProxy = Utilities.GetProxy();

            // var request = WebRequest.Create("http://localhost:54942/MultiTranslator/TranslateForSubtitleEdit");
            var request = WebRequest.Create("http://www.nikse.dk/MultiTranslator/TranslateForSubtitleEdit");
            request.Method = "POST";
            var postData = string.Format("languagePair={1}&text={0}", Utilities.UrlEncode(input), "svda");
            var byteArray = Encoding.UTF8.GetBytes(postData);
            request.ContentType = "application/x-www-form-urlencoded";
            request.ContentLength = byteArray.Length;
            using (var dataStream = request.GetRequestStream())
            {
                dataStream.Write(byteArray, 0, byteArray.Length);
            }

            using (var response = request.GetResponse())
            using (var reader = new StreamReader(response.GetResponseStream()))
            {
                return reader.ReadToEnd();
            }
        }

        /// <summary>
        /// The translate from swedish to danish tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void TranslateFromSwedishToDanishToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!this.IsSubtitleLoaded)
            {
                this.DisplaySubtitleNotLoadedMessage();
                return;
            }

            bool isSwedish = Utilities.AutoDetectGoogleLanguage(this._subtitle) == "sv";
            string promptText = this._language.TranslateSwedishToDanish;
            if (!isSwedish)
            {
                promptText = this._language.TranslateSwedishToDanishWarning;
            }

            if (MessageBox.Show(promptText, this.Title, MessageBoxButtons.YesNo) == DialogResult.Yes)
            {
                try
                {
                    this._subtitleAlternate = new Subtitle(this._subtitle);
                    this._subtitleAlternateFileName = null;
                    int firstSelectedIndex = 0;
                    if (this.SubtitleListview1.SelectedItems.Count > 0)
                    {
                        firstSelectedIndex = this.SubtitleListview1.SelectedItems[0].Index;
                    }

                    this._subtitleListViewIndex = -1;

                    Cursor.Current = Cursors.WaitCursor;
                    this.ShowStatus(this._language.TranslatingViaNikseDkMt);
                    var sb = new StringBuilder();
                    var output = new StringBuilder();
                    foreach (var p in this._subtitle.Paragraphs)
                    {
                        var s = p.Text.Replace(Environment.NewLine, "<br/>");
                        s = "<p>" + s + "</p>";
                        sb.Append(s);

                        if (sb.Length > 9000)
                        {
                            output.Append(GetTranslateStringFromNikseDk(sb.ToString()));
                            sb.Length = 0;
                        }
                    }

                    if (sb.Length > 0)
                    {
                        output.Append(GetTranslateStringFromNikseDk(sb.ToString()));
                    }

                    this.MakeHistoryForUndo(this._language.BeforeSwedishToDanishTranslation);
                    var result = output.ToString();
                    if (result.Length > 0)
                    {
                        int index = 0;
                        foreach (var s in result.Split(new[] { "<p>", "</p>" }, StringSplitOptions.RemoveEmptyEntries))
                        {
                            if (index < this._subtitle.Paragraphs.Count)
                            {
                                this._subtitle.Paragraphs[index].Text = s;
                            }

                            index++;
                        }

                        this.ShowSource();
                        this.SubtitleListview1.ShowAlternateTextColumn(this._languageGeneral.OriginalText);
                        this.SubtitleListview1.AutoSizeAllColumns(this);
                        this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                        this.ShowStatus(this._language.TranslationFromSwedishToDanishComplete);
                        this.SubtitleListview1.SelectIndexAndEnsureVisible(firstSelectedIndex);
                        this._converted = true;
                    }
                }
                catch
                {
                    this.ShowStatus(this._language.TranslationFromSwedishToDanishFailed);
                }

                Cursor.Current = Cursors.Default;
            }
        }

        /// <summary>
        /// Undo or Redo
        /// </summary>
        /// <param name="undo">
        /// True equals undo, false triggers redo
        /// </param>
        private void UndoToIndex(bool undo)
        {
            if (this._networkSession != null)
            {
                return;
            }

            lock (_syncUndo)
            {
                if (!undo && this._undoIndex >= this._subtitle.HistoryItems.Count - 1)
                {
                    return;
                }

                if (undo && (this._subtitle == null || !this._subtitle.CanUndo || this._undoIndex < 0))
                {
                    return;
                }

                // Add latest changes if any (also stop changes from being added while redoing/undoing)
                this.timerTextUndo.Stop();
                this.timerAlternateTextUndo.Stop();
                this._listViewTextTicks = 0;
                this._listViewAlternateTextTicks = 0;
                this.TimerTextUndoTick(null, null);
                this.TimerAlternateTextUndoTick(null, null);

                try
                {
                    int selectedIndex = this.FirstSelectedIndex;
                    string text = string.Empty;
                    if (undo)
                    {
                        this._subtitle.HistoryItems[this._undoIndex].RedoParagraphs = new List<Paragraph>();
                        this._subtitle.HistoryItems[this._undoIndex].RedoParagraphsAlternate = new List<Paragraph>();

                        foreach (var p in this._subtitle.Paragraphs)
                        {
                            this._subtitle.HistoryItems[this._undoIndex].RedoParagraphs.Add(new Paragraph(p));
                        }

                        if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && this._subtitleAlternate != null)
                        {
                            foreach (var p in this._subtitleAlternate.Paragraphs)
                            {
                                this._subtitle.HistoryItems[this._undoIndex].RedoParagraphsAlternate.Add(new Paragraph(p));
                            }
                        }

                        this._subtitle.HistoryItems[this._undoIndex].RedoFileName = this._fileName;
                        this._subtitle.HistoryItems[this._undoIndex].RedoFileModified = this._fileDateTime;
                        this._subtitle.HistoryItems[this._undoIndex].RedoOriginalFileName = this._subtitleAlternateFileName;

                        if (selectedIndex >= 0)
                        {
                            this._subtitle.HistoryItems[this._undoIndex].RedoParagraphs[selectedIndex].Text = this.textBoxListViewText.Text;
                            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && this._subtitleAlternate != null && selectedIndex < this._subtitle.HistoryItems[this._undoIndex].RedoParagraphsAlternate.Count)
                            {
                                this._subtitle.HistoryItems[this._undoIndex].RedoParagraphsAlternate[selectedIndex].Text = this.textBoxListViewTextAlternate.Text;
                            }

                            this._subtitle.HistoryItems[this._undoIndex].RedoLineIndex = selectedIndex;
                            this._subtitle.HistoryItems[this._undoIndex].RedoLinePosition = this.textBoxListViewText.SelectionStart;
                            this._subtitle.HistoryItems[this._undoIndex].RedoLinePositionAlternate = this.textBoxListViewTextAlternate.SelectionStart;
                        }
                        else
                        {
                            this._subtitle.HistoryItems[this._undoIndex].RedoLineIndex = -1;
                            this._subtitle.HistoryItems[this._undoIndex].RedoLinePosition = -1;
                        }
                    }
                    else
                    {
                        this._undoIndex++;
                    }

                    text = this._subtitle.HistoryItems[this._undoIndex].Description;

                    this._subtitleListViewIndex = -1;
                    this.textBoxListViewText.Text = string.Empty;
                    this.textBoxListViewTextAlternate.Text = string.Empty;
                    string subtitleFormatFriendlyName;

                    string oldFileName = this._fileName;
                    DateTime oldFileDateTime = this._fileDateTime;

                    string oldAlternameFileName = this._subtitleAlternateFileName;
                    this._fileName = this._subtitle.UndoHistory(this._undoIndex, out subtitleFormatFriendlyName, out this._fileDateTime, out this._subtitleAlternate, out this._subtitleAlternateFileName);
                    if (string.IsNullOrEmpty(oldAlternameFileName) && !string.IsNullOrEmpty(this._subtitleAlternateFileName))
                    {
                        this.SubtitleListview1.ShowAlternateTextColumn(this._languageGeneral.OriginalText);
                        this.SubtitleListview1.AutoSizeAllColumns(this);
                    }
                    else if (this.SubtitleListview1.IsAlternateTextColumnVisible && this._subtitleAlternate != null && this._subtitleAlternate.Paragraphs.Count == 0)
                    {
                        this.RemoveAlternate(true);
                    }

                    if (!undo)
                    {
                        // TODO: Sometimes redo paragraphs can be null - how?
                        if (this._subtitle.HistoryItems[this._undoIndex].RedoParagraphs != null)
                        {
                            this._subtitle.Paragraphs.Clear();
                            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && this._subtitleAlternate != null)
                            {
                                this._subtitleAlternate.Paragraphs.Clear();
                            }

                            foreach (var p in this._subtitle.HistoryItems[this._undoIndex].RedoParagraphs)
                            {
                                this._subtitle.Paragraphs.Add(new Paragraph(p));
                            }

                            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && this._subtitleAlternate != null)
                            {
                                foreach (var p in this._subtitle.HistoryItems[this._undoIndex].RedoParagraphsAlternate)
                                {
                                    this._subtitleAlternate.Paragraphs.Add(new Paragraph(p));
                                }
                            }
                        }
                        else
                        {
                            System.Diagnostics.Debug.WriteLine("Undo failed at undo index: " + this._undoIndex);
                        }

                        this._subtitle.HistoryItems[this._undoIndex].RedoParagraphs = null;
                        this._subtitle.HistoryItems[this._undoIndex].RedoParagraphsAlternate = null;
                        if (this.SubtitleListview1.IsAlternateTextColumnVisible && this._subtitleAlternate != null && this._subtitleAlternate.Paragraphs.Count == 0)
                        {
                            this.RemoveAlternate(true);
                        }
                    }

                    if (oldFileName == null || oldFileName.Equals(this._fileName, StringComparison.OrdinalIgnoreCase))
                    {
                        this._fileDateTime = oldFileDateTime; // undo will not give overwrite-newer-file warning
                    }

                    this.comboBoxSubtitleFormats.SelectedIndexChanged -= this.ComboBoxSubtitleFormatsSelectedIndexChanged;
                    this.SetCurrentFormat(subtitleFormatFriendlyName);
                    this.comboBoxSubtitleFormats.SelectedIndexChanged += this.ComboBoxSubtitleFormatsSelectedIndexChanged;

                    this.ShowSource();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);

                    if (selectedIndex >= this._subtitle.Paragraphs.Count)
                    {
                        this.SubtitleListview1.SelectIndexAndEnsureVisible(this._subtitle.Paragraphs.Count - 1, true);
                    }
                    else if (selectedIndex >= 0 && selectedIndex < this._subtitle.Paragraphs.Count)
                    {
                        this.SubtitleListview1.SelectIndexAndEnsureVisible(selectedIndex, true);
                    }
                    else
                    {
                        this.SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                    }

                    this.audioVisualizer.Invalidate();
                    if (undo)
                    {
                        if (this._subtitle.HistoryItems[this._undoIndex].LineIndex == this.FirstSelectedIndex)
                        {
                            this.textBoxListViewText.SelectionStart = this._subtitle.HistoryItems[this._undoIndex].LinePosition;
                            if (this._subtitleAlternate != null)
                            {
                                this.textBoxListViewTextAlternate.SelectionStart = this._subtitle.HistoryItems[this._undoIndex].LinePositionAlternate;
                            }
                        }

                        this.ShowStatus(this._language.UndoPerformed + ": " + text.Replace(Environment.NewLine, "  "));
                        this._undoIndex--;
                    }
                    else
                    {
                        if (this._subtitle.HistoryItems[this._undoIndex].RedoLineIndex >= 0 && this._subtitle.HistoryItems[this._undoIndex].RedoLineIndex == this.FirstSelectedIndex)
                        {
                            this.textBoxListViewText.SelectionStart = this._subtitle.HistoryItems[this._undoIndex].RedoLinePosition;
                        }

                        if (this._subtitleAlternate != null && this._subtitle.HistoryItems[this._undoIndex].RedoLineIndex >= 0 && this._subtitle.HistoryItems[this._undoIndex].RedoLineIndex == this.FirstSelectedIndex)
                        {
                            this.textBoxListViewTextAlternate.SelectionStart = this._subtitle.HistoryItems[this._undoIndex].RedoLinePositionAlternate;
                        }

                        if (this._subtitle.HistoryItems[this._undoIndex].RedoFileName.Equals(this._fileName, StringComparison.OrdinalIgnoreCase))
                        {
                            this._fileDateTime = this._subtitle.HistoryItems[this._undoIndex].RedoFileModified;
                        }

                        this._fileName = this._subtitle.HistoryItems[this._undoIndex].RedoFileName;
                        this._subtitleAlternateFileName = this._subtitle.HistoryItems[this._undoIndex].RedoFileName;
                        this.ShowStatus(this._language.UndoPerformed);
                    }
                }
                catch (Exception exception)
                {
                    System.Diagnostics.Debug.WriteLine(exception.Message);
                }

                this.timerTextUndo.Start();
                this.timerAlternateTextUndo.Start();
                this.SetTitle();
            }
        }

        /// <summary>
        /// The show historyfor undo tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ShowHistoryforUndoToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (this._subtitle != null && this._subtitle.CanUndo)
            {
                this.ReloadFromSourceView();
                using (var showHistory = new ShowHistory())
                {
                    showHistory.Initialize(this._subtitle, this._undoIndex);
                    if (showHistory.ShowDialog(this) == DialogResult.OK)
                    {
                        int selectedIndex = this.FirstSelectedIndex;
                        this._subtitleListViewIndex = -1;
                        this.textBoxListViewText.Text = string.Empty;
                        this.textBoxListViewTextAlternate.Text = string.Empty;
                        this.MakeHistoryForUndo(this._language.BeforeUndo);
                        string subtitleFormatFriendlyName;

                        var oldFileName = this._fileName;
                        var oldFileDateTime = this._fileDateTime;

                        this._fileName = this._subtitle.UndoHistory(showHistory.SelectedIndex, out subtitleFormatFriendlyName, out this._fileDateTime, out this._subtitleAlternate, out this._subtitleAlternateFileName);

                        if (oldFileName == null || oldFileName.Equals(this._fileName, StringComparison.OrdinalIgnoreCase))
                        {
                            this._fileDateTime = oldFileDateTime; // undo will not give overwrite-newer-file warning
                        }

                        this.SetTitle();
                        this.ShowStatus(this._language.UndoPerformed);

                        this.comboBoxSubtitleFormats.SelectedIndexChanged -= this.ComboBoxSubtitleFormatsSelectedIndexChanged;
                        this.SetCurrentFormat(subtitleFormatFriendlyName);
                        this.comboBoxSubtitleFormats.SelectedIndexChanged += this.ComboBoxSubtitleFormatsSelectedIndexChanged;

                        this.ShowSource();
                        this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);

                        if (selectedIndex >= 0 && selectedIndex < this._subtitle.Paragraphs.Count)
                        {
                            this.SubtitleListview1.SelectIndexAndEnsureVisible(selectedIndex, true);
                        }
                        else
                        {
                            this.SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                        }

                        this.audioVisualizer.Invalidate();
                    }
                }
            }
            else
            {
                MessageBox.Show(this._language.NothingToUndo, this.Title, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        /// <summary>
        /// The tool strip button spell check click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripButtonSpellCheckClick(object sender, EventArgs e)
        {
            this.SpellCheck(true, 0);
        }

        /// <summary>
        /// The spell check tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void SpellCheckToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.SpellCheck(true, 0);
        }

        /// <summary>
        /// The spell check via word.
        /// </summary>
        private void SpellCheckViaWord()
        {
            if (this._subtitle == null || this._subtitle.Paragraphs.Count == 0)
            {
                return;
            }

            WordSpellChecker wordSpellChecker = null;
            int totalLinesChanged = 0;
            try
            {
                wordSpellChecker = new WordSpellChecker(this, Utilities.AutoDetectGoogleLanguage(this._subtitle));
                wordSpellChecker.NewDocument();
                Application.DoEvents();
            }
            catch
            {
                MessageBox.Show(this._language.UnableToStartWord);
                return;
            }

            string version = wordSpellChecker.Version;

            int index = this.FirstSelectedIndex;
            if (index < 0)
            {
                index = 0;
            }

            this._cancelWordSpellCheck = false;
            for (; index < this._subtitle.Paragraphs.Count; index++)
            {
                var p = this._subtitle.Paragraphs[index];
                int errorsBefore;
                int errorsAfter;
                this.ShowStatus(string.Format(this._language.SpellChekingViaWordXLineYOfX, version, index + 1, this._subtitle.Paragraphs.Count));
                this.SubtitleListview1.SelectIndexAndEnsureVisible(index);
                var newText = wordSpellChecker.CheckSpelling(p.Text, out errorsBefore, out errorsAfter);
                if (errorsAfter > 0)
                {
                    wordSpellChecker.CloseDocument();
                    wordSpellChecker.Quit();
                    this.ShowStatus(string.Format(this._language.SpellCheckAbortedXCorrections, totalLinesChanged));
                    this.Cursor = Cursors.Default;
                    return;
                }
                else if (errorsBefore != errorsAfter)
                {
                    if (this.textBoxListViewText.Text != newText)
                    {
                        this.textBoxListViewText.Text = newText;
                        totalLinesChanged++;
                    }
                }

                Application.DoEvents();
                if (this._cancelWordSpellCheck)
                {
                    break;
                }
            }

            wordSpellChecker.CloseDocument();
            wordSpellChecker.Quit();
            this.ShowStatus(string.Format(this._language.SpellCheckCompletedXCorrections, totalLinesChanged));
            this.Cursor = Cursors.Default;
            this._cancelWordSpellCheck = true;
        }

        /// <summary>
        /// The spell check.
        /// </summary>
        /// <param name="autoDetect">
        /// The auto detect.
        /// </param>
        /// <param name="startFromLine">
        /// The start from line.
        /// </param>
        private void SpellCheck(bool autoDetect, int startFromLine)
        {
            // if (Configuration.Settings.General.SpellChecker.Contains("word", StringComparison.OrdinalIgnoreCase))
            // {
            // SpellCheckViaWord();
            // return;
            // }
            if (!this.IsSubtitleLoaded)
            {
                this.DisplaySubtitleNotLoadedMessage();
                return;
            }

            try
            {
                string dictionaryFolder = Utilities.DictionaryFolder;
                if (!Directory.Exists(dictionaryFolder) || Directory.GetFiles(dictionaryFolder, "*.dic").Length == 0)
                {
                    this.ShowGetDictionaries();
                    return;
                }

                if (this._subtitle != null && this._subtitle.Paragraphs.Count > 0)
                {
                    if (this._spellCheckForm != null)
                    {
                        var result = MessageBox.Show(this._language.ContinueWithCurrentSpellCheck, this.Title, MessageBoxButtons.YesNoCancel);
                        if (result == DialogResult.Cancel)
                        {
                            return;
                        }

                        if (result == DialogResult.No)
                        {
                            this._spellCheckForm.Dispose();
                            this._spellCheckForm = new SpellCheck();
                            this._spellCheckForm.DoSpellCheck(autoDetect, this._subtitle, dictionaryFolder, this, startFromLine);
                        }
                        else
                        {
                            this._spellCheckForm.ContinueSpellCheck(this._subtitle);
                        }
                    }
                    else
                    {
                        this._spellCheckForm = new SpellCheck();
                        this._spellCheckForm.DoSpellCheck(autoDetect, this._subtitle, dictionaryFolder, this, startFromLine);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(string.Format("{0}{1}{2}{3}{4}", ex.Source, Environment.NewLine, ex.Message, Environment.NewLine, ex.StackTrace), this._title, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        /// <summary>
        /// The change whole text main part.
        /// </summary>
        /// <param name="noOfChangedWords">
        /// The no of changed words.
        /// </param>
        /// <param name="firstChange">
        /// The first change.
        /// </param>
        /// <param name="i">
        /// The i.
        /// </param>
        /// <param name="p">
        /// The p.
        /// </param>
        public void ChangeWholeTextMainPart(ref int noOfChangedWords, ref bool firstChange, int i, Paragraph p)
        {
            this.SubtitleListview1.SetText(i, p.Text);
            noOfChangedWords++;
            if (firstChange)
            {
                this.MakeHistoryForUndo(this._language.BeforeSpellCheck);
                firstChange = false;
            }

            if (this.tabControlSubtitle.SelectedIndex == TabControlSourceView)
            {
                this.ShowSource();
            }
            else
            {
                this.RefreshSelectedParagraph();
            }
        }

        /// <summary>
        /// The focus paragraph.
        /// </summary>
        /// <param name="index">
        /// The index.
        /// </param>
        public void FocusParagraph(int index)
        {
            if (this.tabControlSubtitle.SelectedIndex == TabControlSourceView)
            {
                this.tabControlSubtitle.SelectedIndex = TabControlListView;
            }

            if (this.tabControlSubtitle.SelectedIndex == TabControlListView)
            {
                this.SubtitleListview1.SelectIndexAndEnsureVisible(index);
            }
        }

        /// <summary>
        /// The refresh selected paragraph.
        /// </summary>
        private void RefreshSelectedParagraph()
        {
            this._subtitleListViewIndex = -1;
            this.SubtitleListview1_SelectedIndexChanged(null, null);
        }

        /// <summary>
        /// The correct word.
        /// </summary>
        /// <param name="changeWord">
        /// The change word.
        /// </param>
        /// <param name="p">
        /// The p.
        /// </param>
        /// <param name="oldWord">
        /// The old word.
        /// </param>
        /// <param name="firstChange">
        /// The first change.
        /// </param>
        public void CorrectWord(string changeWord, Paragraph p, string oldWord, ref bool firstChange)
        {
            if (oldWord != changeWord)
            {
                if (firstChange)
                {
                    this.MakeHistoryForUndo(this._language.BeforeSpellCheck);
                    firstChange = false;
                }

                var regEx = new Regex("\\b" + oldWord + "\\b");
                if (regEx.IsMatch(p.Text))
                {
                    p.Text = regEx.Replace(p.Text, changeWord);
                }
                else
                {
                    int startIndex = p.Text.IndexOf(oldWord, StringComparison.Ordinal);
                    while (startIndex >= 0 && startIndex < p.Text.Length && p.Text.Substring(startIndex).Contains(oldWord))
                    {
                        bool startOk = startIndex == 0 || p.Text[startIndex - 1] == ' ' || startIndex == p.Text.Length - oldWord.Length || Environment.NewLine.EndsWith(p.Text[startIndex - 1]);
                        if (startOk)
                        {
                            int end = startIndex + oldWord.Length;
                            if (end <= p.Text.Length)
                            {
                                if (end == p.Text.Length || (@" ,.!?:;')" + Environment.NewLine).Contains(p.Text[end]))
                                {
                                    p.Text = p.Text.Remove(startIndex, oldWord.Length).Insert(startIndex, changeWord);
                                }
                            }
                        }

                        if (startIndex + 2 >= p.Text.Length)
                        {
                            startIndex = -1;
                        }
                        else
                        {
                            startIndex = p.Text.IndexOf(oldWord, startIndex + 2, StringComparison.Ordinal);
                        }
                    }
                }

                this.ShowStatus(string.Format(this._language.SpellCheckChangedXToY, oldWord, changeWord));
                this.SubtitleListview1.SetText(this._subtitle.GetIndex(p), p.Text);
                if (this.tabControlSubtitle.SelectedIndex == TabControlSourceView)
                {
                    this.ShowSource();
                }
                else
                {
                    this.RefreshSelectedParagraph();
                }
            }
        }

        /// <summary>
        /// The get dictionaries tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void GetDictionariesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.ShowGetDictionaries();
        }

        /// <summary>
        /// The show get dictionaries.
        /// </summary>
        private void ShowGetDictionaries()
        {
            using (var form = new GetDictionaries())
            {
                form.ShowDialog(this);
            }
        }

        /// <summary>
        /// The context menu strip listview opening.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ContextMenuStripListviewOpening(object sender, CancelEventArgs e)
        {
            var format = this.GetCurrentSubtitleFormat();
            var formatType = format.GetType();
            this.toolStripMenuItemSetLanguage.Visible = false;
            if ((formatType == typeof(AdvancedSubStationAlpha) || formatType == typeof(SubStationAlpha)) && this.SubtitleListview1.SelectedItems.Count > 0)
            {
                this.toolStripMenuItemWebVTT.Visible = false;
                var styles = AdvancedSubStationAlpha.GetStylesFromHeader(this._subtitle.Header);
                this.setStylesForSelectedLinesToolStripMenuItem.DropDownItems.Clear();
                foreach (var style in styles)
                {
                    this.setStylesForSelectedLinesToolStripMenuItem.DropDownItems.Add(style, null, this.tsi_Click);
                }

                this.setStylesForSelectedLinesToolStripMenuItem.Visible = styles.Count > 1;
                this.toolStripMenuItemAssStyles.Visible = true;
                if (formatType == typeof(AdvancedSubStationAlpha))
                {
                    this.toolStripMenuItemAssStyles.Text = this._language.Menu.ContextMenu.AdvancedSubStationAlphaStyles;
                    this.setStylesForSelectedLinesToolStripMenuItem.Text = this._language.Menu.ContextMenu.AdvancedSubStationAlphaSetStyle;
                }
                else
                {
                    this.toolStripMenuItemAssStyles.Text = this._language.Menu.ContextMenu.SubStationAlphaStyles;
                    this.setStylesForSelectedLinesToolStripMenuItem.Text = this._language.Menu.ContextMenu.SubStationAlphaSetStyle;
                }
            }
            else if ((formatType == typeof(TimedText10) || formatType == typeof(ItunesTimedText)) && this.SubtitleListview1.SelectedItems.Count > 0)
            {
                this.toolStripMenuItemWebVTT.Visible = false;
                this.toolStripMenuItemAssStyles.Text = this._language.Menu.ContextMenu.TimedTextStyles;
                var styles = TimedText10.GetStylesFromHeader(this._subtitle.Header);
                this.setStylesForSelectedLinesToolStripMenuItem.DropDownItems.Clear();
                foreach (var style in styles)
                {
                    this.setStylesForSelectedLinesToolStripMenuItem.DropDownItems.Add(style, null, this.tsi_Click);
                }

                this.setStylesForSelectedLinesToolStripMenuItem.Visible = styles.Count >= 1;
                this.toolStripMenuItemAssStyles.Visible = true;
                this.setStylesForSelectedLinesToolStripMenuItem.Text = this._language.Menu.ContextMenu.TimedTextSetStyle;

                // languages
                var languages = TimedText10.GetUsedLanguages(this._subtitle);
                this.toolStripMenuItemSetLanguage.DropDownItems.Clear();
                this.toolStripMenuItemSetLanguage.Text = this._language.Menu.ContextMenu.TimedTextSetLanguage;
                this.toolStripMenuItemSetLanguage.Visible = true;
                if (languages.Count > 0)
                {
                    foreach (var language in languages)
                    {
                        this.toolStripMenuItemSetLanguage.DropDownItems.Add(language, null, this.AddLanguageClick);
                    }

                    this.toolStripMenuItemSetLanguage.DropDownItems.Add("-");
                }

                this.toolStripMenuItemSetLanguage.DropDownItems.Add(this._language.New);
                var newItem = (ToolStripMenuItem)this.toolStripMenuItemSetLanguage.DropDownItems[this.toolStripMenuItemSetLanguage.DropDownItems.Count - 1];
                var moreLanguages = new List<string>();
                foreach (CultureInfo x in CultureInfo.GetCultures(CultureTypes.NeutralCultures))
                {
                    if (!languages.Contains(x.TwoLetterISOLanguageName.ToLower()) && !languages.Contains(x.ThreeLetterISOLanguageName.ToLower()))
                    {
                        moreLanguages.Add(x.TwoLetterISOLanguageName.ToLower());
                    }
                }

                moreLanguages.Sort();
                foreach (var language in moreLanguages)
                {
                    newItem.DropDownItems.Add(language, null, this.AddLanguageClick);
                }
            }
            else if ((formatType == typeof(Sami) || formatType == typeof(SamiModern)) && this.SubtitleListview1.SelectedItems.Count > 0)
            {
                this.toolStripMenuItemWebVTT.Visible = false;
                this.toolStripMenuItemAssStyles.Text = this._language.Menu.ContextMenu.TimedTextStyles;
                var styles = Sami.GetStylesFromHeader(this._subtitle.Header);
                this.setStylesForSelectedLinesToolStripMenuItem.DropDownItems.Clear();
                foreach (var style in styles)
                {
                    this.setStylesForSelectedLinesToolStripMenuItem.DropDownItems.Add(style, null, this.tsi_Click);
                }

                this.setStylesForSelectedLinesToolStripMenuItem.Visible = styles.Count > 1;
                this.toolStripMenuItemAssStyles.Visible = false;
                this.setStylesForSelectedLinesToolStripMenuItem.Text = this._language.Menu.ContextMenu.SamiSetStyle;
            }
            else if (formatType == typeof(WebVTT) && this.SubtitleListview1.SelectedItems.Count > 0)
            {
                this.setStylesForSelectedLinesToolStripMenuItem.Visible = false;
                this.toolStripMenuItemAssStyles.Visible = false;
                this.toolStripMenuItemWebVTT.Visible = true;
                var voices = WebVTT.GetVoices(this._subtitle);
                this.toolStripMenuItemWebVTT.DropDownItems.Clear();
                foreach (var style in voices)
                {
                    this.toolStripMenuItemWebVTT.DropDownItems.Add(style, null, this.WebVTTSetVoice);
                }

                this.toolStripMenuItemWebVTT.DropDownItems.Add(this._language.Menu.ContextMenu.WebVTTSetNewVoice, null, this.WebVTTSetNewVoice);
                if (voices.Count > 0)
                {
                    this.toolStripMenuItemWebVTT.DropDownItems.Add(this._language.Menu.ContextMenu.WebVTTRemoveVoices, null, this.WebVTTRemoveVoices);
                }
            }
            else if ((format.Name == "Nuendo" && this.SubtitleListview1.SelectedItems.Count > 0))
            {
                this.toolStripMenuItemWebVTT.Visible = false;
                var styles = GetNuendoStyles();
                this.setStylesForSelectedLinesToolStripMenuItem.DropDownItems.Clear();
                foreach (var style in styles)
                {
                    this.setStylesForSelectedLinesToolStripMenuItem.DropDownItems.Add(style, null, this.NuendoSetStyle);
                }

                this.setStylesForSelectedLinesToolStripMenuItem.Visible = styles.Count > 1;
                this.toolStripMenuItemAssStyles.Visible = false;
                this.setStylesForSelectedLinesToolStripMenuItem.Text = this._language.Menu.ContextMenu.NuendoSetStyle;
            }
            else
            {
                this.setStylesForSelectedLinesToolStripMenuItem.Visible = false;
                this.toolStripMenuItemAssStyles.Visible = false;
                this.toolStripMenuItemWebVTT.Visible = false;
            }

            this.toolStripMenuItemGoogleMicrosoftTranslateSelLine.Visible = false;
            if (this.SubtitleListview1.SelectedItems.Count == 0)
            {
                this.contextMenuStripEmpty.Show(MousePosition.X, MousePosition.Y);
                e.Cancel = true;
            }
            else
            {
                bool noNetWorkSession = this._networkSession == null;

                this.toolStripMenuItemSaveSelectedLines.Visible = false;
                this.toolStripMenuItemInsertBefore.Visible = true;
                this.toolStripMenuItemInsertAfter.Visible = true;
                this.toolStripMenuItemInsertSubtitle.Visible = noNetWorkSession;
                this.toolStripMenuItemMergeLines.Visible = true;
                this.mergeAfterToolStripMenuItem.Visible = true;
                this.mergeBeforeToolStripMenuItem.Visible = true;
                this.splitLineToolStripMenuItem.Visible = true;
                this.toolStripSeparator7.Visible = true;
                this.typeEffectToolStripMenuItem.Visible = noNetWorkSession;
                this.karokeeEffectToolStripMenuItem.Visible = noNetWorkSession;
                this.toolStripSeparatorAdvancedFunctions.Visible = noNetWorkSession;

                // fixCommonErrorsInSelectedLinesToolStripMenuItem.Visible = true;
                this.adjustDisplayTimeForSelectedLinesToolStripMenuItem.Visible = true;

                // showSelectedLinesEarlierlaterToolStripMenuItem.Visible = true;
                this.visualSyncSelectedLinesToolStripMenuItem.Visible = true;

                // googleTranslateSelectedLinesToolStripMenuItem.Visible = true;
                this.toolStripMenuItemGoogleMicrosoftTranslateSelLine.Visible = false;
                this.toolStripMenuItemUnbreakLines.Visible = true;
                this.toolStripMenuItemAutoBreakLines.Visible = true;
                this.toolStripSeparatorBreakLines.Visible = true;
                this.toolStripMenuItemSurroundWithMusicSymbols.Visible = this.IsUnicode;

                if (this.SubtitleListview1.SelectedItems.Count == 1)
                {
                    this.toolStripMenuItemMergeLines.Visible = false;
                    this.visualSyncSelectedLinesToolStripMenuItem.Visible = false;
                    this.toolStripMenuItemUnbreakLines.Visible = false;
                    this.toolStripMenuItemAutoBreakLines.Visible = false;
                    this.toolStripSeparatorBreakLines.Visible = false;
                    if (this._subtitleAlternate != null && noNetWorkSession)
                    {
                        this.toolStripMenuItemGoogleMicrosoftTranslateSelLine.Visible = true;
                    }

                    this.toolStripMenuItemMergeDialog.Visible = false;
                }
                else if (this.SubtitleListview1.SelectedItems.Count == 2)
                {
                    this.toolStripMenuItemInsertBefore.Visible = false;
                    this.toolStripMenuItemInsertAfter.Visible = false;
                    this.toolStripMenuItemInsertSubtitle.Visible = false;
                    this.mergeAfterToolStripMenuItem.Visible = false;
                    this.mergeBeforeToolStripMenuItem.Visible = false;
                    this.splitLineToolStripMenuItem.Visible = false;
                    this.typeEffectToolStripMenuItem.Visible = false;
                    this.toolStripMenuItemMergeDialog.Visible = true;
                }
                else if (this.SubtitleListview1.SelectedItems.Count >= 2)
                {
                    this.toolStripMenuItemSaveSelectedLines.Visible = true;
                    this.toolStripMenuItemInsertBefore.Visible = false;
                    this.toolStripMenuItemInsertAfter.Visible = false;
                    this.toolStripMenuItemInsertSubtitle.Visible = false;
                    this.splitLineToolStripMenuItem.Visible = false;
                    this.mergeAfterToolStripMenuItem.Visible = false;
                    this.mergeBeforeToolStripMenuItem.Visible = false;
                    this.typeEffectToolStripMenuItem.Visible = false;
                    this.toolStripSeparator7.Visible = false;

                    if (this.SubtitleListview1.SelectedItems.Count > 25)
                    {
                        this.toolStripMenuItemMergeLines.Visible = false;
                    }
                    else if (this.SubtitleListview1.SelectedItems.Count > 2)
                    { // only allow merge if text is not way too long
                        try
                        {
                            int totalLength = 0;
                            foreach (int index in this.SubtitleListview1.SelectedIndices)
                            {
                                totalLength += this._subtitle.Paragraphs[index].Text.Length;
                            }

                            if (totalLength > Configuration.Settings.General.SubtitleLineMaximumLength * 2.5)
                            {
                                this.toolStripMenuItemMergeLines.Visible = false;
                            }
                        }
                        catch
                        {
                        }
                    }

                    this.toolStripMenuItemMergeDialog.Visible = false;
                }

                if (formatType != typeof(SubRip))
                {
                    this.karokeeEffectToolStripMenuItem.Visible = false;
                    this.toolStripSeparatorAdvancedFunctions.Visible = this.SubtitleListview1.SelectedItems.Count == 1 && noNetWorkSession;
                }
            }

            this.toolStripMenuItemPasteSpecial.Visible = Clipboard.ContainsText();
        }

        /// <summary>
        /// The tsi_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void tsi_Click(object sender, EventArgs e)
        {
            string style = (sender as ToolStripItem).Text;
            if (!string.IsNullOrEmpty(style))
            {
                this.MakeHistoryForUndo("Set style: " + style);

                var format = this.GetCurrentSubtitleFormat();
                var formatType = format.GetType();
                if (formatType == typeof(TimedText10) || formatType == typeof(ItunesTimedText))
                {
                    foreach (int index in this.SubtitleListview1.SelectedIndices)
                    {
                        this._subtitle.Paragraphs[index].Style = style;
                        this._subtitle.Paragraphs[index].Extra = TimedText10.SetExtra(this._subtitle.Paragraphs[index]);
                        this.SubtitleListview1.SetExtraText(index, this._subtitle.Paragraphs[index].Extra, this.SubtitleListview1.ForeColor);
                    }
                }
                else
                {
                    foreach (int index in this.SubtitleListview1.SelectedIndices)
                    {
                        this._subtitle.Paragraphs[index].Extra = style;
                        this.SubtitleListview1.SetExtraText(index, style, this.SubtitleListview1.ForeColor);
                    }
                }
            }
        }

        /// <summary>
        /// The add language click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void AddLanguageClick(object sender, EventArgs e)
        {
            string lang = (sender as ToolStripItem).Text;
            if (!string.IsNullOrEmpty(lang))
            {
                this.MakeHistoryForUndo("Set language: " + lang);
                foreach (int index in this.SubtitleListview1.SelectedIndices)
                {
                    this._subtitle.Paragraphs[index].Language = lang;
                    this._subtitle.Paragraphs[index].Extra = TimedText10.SetExtra(this._subtitle.Paragraphs[index]);
                    this.SubtitleListview1.SetExtraText(index, this._subtitle.Paragraphs[index].Extra, this.SubtitleListview1.ForeColor);
                }
            }
        }

        /// <summary>
        /// The nuendo set style.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void NuendoSetStyle(object sender, EventArgs e)
        {
            string style = (sender as ToolStripItem).Text;
            if (!string.IsNullOrEmpty(style))
            {
                int indexOfComment = style.IndexOf('[');
                if (indexOfComment > 0)
                {
                    style = style.Substring(0, indexOfComment).Trim();
                }

                this.MakeHistoryForUndo("Set style: " + style);
                foreach (int index in this.SubtitleListview1.SelectedIndices)
                {
                    this._subtitle.Paragraphs[index].Extra = style;
                    this._subtitle.Paragraphs[index].Actor = style;
                    this.SubtitleListview1.SetExtraText(index, style, this.SubtitleListview1.ForeColor);
                }
            }
        }

        /// <summary>
        /// The web vtt set voice.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void WebVTTSetVoice(object sender, EventArgs e)
        {
            string voice = (sender as ToolStripItem).Text;
            if (!string.IsNullOrEmpty(voice))
            {
                this.MakeHistoryForUndo("Set voice: " + voice);
                foreach (int index in this.SubtitleListview1.SelectedIndices)
                {
                    this._subtitle.Paragraphs[index].Text = WebVTT.RemoveTag("v", this._subtitle.Paragraphs[index].Text);
                    this._subtitle.Paragraphs[index].Text = string.Format("<v {0}>{1}", voice, this._subtitle.Paragraphs[index].Text);
                    this.SubtitleListview1.SetText(index, this._subtitle.Paragraphs[index].Text);
                }

                this.RefreshSelectedParagraph();
            }
        }

        /// <summary>
        /// The web vtt set new voice.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void WebVTTSetNewVoice(object sender, EventArgs e)
        {
            using (var form = new WebVttNewVoice())
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    string voice = form.VoiceName;
                    if (!string.IsNullOrEmpty(voice))
                    {
                        foreach (int index in this.SubtitleListview1.SelectedIndices)
                        {
                            this._subtitle.Paragraphs[index].Text = WebVTT.RemoveTag("v", this._subtitle.Paragraphs[index].Text);
                            this._subtitle.Paragraphs[index].Text = string.Format("<v {0}>{1}", voice, this._subtitle.Paragraphs[index].Text);
                            this.SubtitleListview1.SetText(index, this._subtitle.Paragraphs[index].Text);
                        }

                        this.RefreshSelectedParagraph();
                    }
                }
            }
        }

        /// <summary>
        /// The web vtt remove voices.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void WebVTTRemoveVoices(object sender, EventArgs e)
        {
            foreach (int index in this.SubtitleListview1.SelectedIndices)
            {
                this._subtitle.Paragraphs[index].Text = WebVTT.RemoveTag("v", this._subtitle.Paragraphs[index].Text);
                this.SubtitleListview1.SetText(index, this._subtitle.Paragraphs[index].Text);
            }

            this.RefreshSelectedParagraph();
        }

        /// <summary>
        /// The web vtt set voice text box.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void WebVTTSetVoiceTextBox(object sender, EventArgs e)
        {
            string voice = (sender as ToolStripItem).Text;
            if (!string.IsNullOrEmpty(voice))
            {
                var tb = this.textBoxListViewText;
                if (this.textBoxListViewTextAlternate.Focused)
                {
                    tb = this.textBoxListViewTextAlternate;
                }

                if (tb.SelectionLength > 0)
                {
                    string s = tb.SelectedText;
                    s = WebVTT.RemoveTag("v", s);
                    if (tb.SelectedText == tb.Text)
                    {
                        s = string.Format("<v {0}>{1}", voice, s);
                    }
                    else
                    {
                        s = string.Format("<v {0}>{1}</v>", voice, s);
                    }

                    tb.SelectedText = s;
                }
            }
        }

        /// <summary>
        /// The web vtt set new voice text box.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void WebVTTSetNewVoiceTextBox(object sender, EventArgs e)
        {
            using (var form = new WebVttNewVoice())
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    string voice = form.VoiceName;
                    if (!string.IsNullOrEmpty(voice))
                    {
                        var tb = this.textBoxListViewText;
                        if (this.textBoxListViewTextAlternate.Focused)
                        {
                            tb = this.textBoxListViewTextAlternate;
                        }

                        if (tb.SelectionLength > 0)
                        {
                            string s = tb.SelectedText;
                            s = WebVTT.RemoveTag("v", s);
                            if (tb.SelectedText == tb.Text)
                            {
                                s = string.Format("<v {0}>{1}", voice, s);
                            }
                            else
                            {
                                s = string.Format("<v {0}>{1}</v>", voice, s);
                            }

                            tb.SelectedText = s;
                        }
                    }
                }
            }
        }

        /// <summary>
        /// The bold tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void BoldToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.ListViewToggleTag("b");
        }

        /// <summary>
        /// The italic tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ItalicToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.ListViewToggleTag("i");
        }

        /// <summary>
        /// The underline tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void UnderlineToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.ListViewToggleTag("u");
        }

        /// <summary>
        /// The list view toggle tag.
        /// </summary>
        /// <param name="tag">
        /// The tag.
        /// </param>
        private void ListViewToggleTag(string tag)
        {
            if (this._subtitle.Paragraphs.Count > 0 && this.SubtitleListview1.SelectedItems.Count > 0)
            {
                this.SubtitleListview1.SelectedIndexChanged -= this.SubtitleListview1_SelectedIndexChanged;
                this.MakeHistoryForUndo(string.Format(this._language.BeforeAddingTagX, tag));

                var indices = new List<int>();
                foreach (ListViewItem item in this.SubtitleListview1.SelectedItems)
                {
                    indices.Add(item.Index);
                }

                this.SubtitleListview1.BeginUpdate();
                foreach (int i in indices)
                {
                    if (this._subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                    {
                        var original = Utilities.GetOriginalParagraph(i, this._subtitle.Paragraphs[i], this._subtitleAlternate.Paragraphs);
                        if (original != null)
                        {
                            if (original.Text.Contains("<" + tag + ">"))
                            {
                                original.Text = original.Text.Replace("<" + tag + ">", string.Empty);
                                original.Text = original.Text.Replace("</" + tag + ">", string.Empty);
                            }
                            else
                            {
                                int indexOfEndBracket = original.Text.IndexOf('}');
                                if (original.Text.StartsWith("{\\", StringComparison.Ordinal) && indexOfEndBracket > 1 && indexOfEndBracket < 6)
                                {
                                    original.Text = string.Format("{2}<{0}>{1}</{0}>", tag, original.Text.Remove(0, indexOfEndBracket + 1), original.Text.Substring(0, indexOfEndBracket + 1));
                                }
                                else
                                {
                                    original.Text = string.Format("<{0}>{1}</{0}>", tag, original.Text);
                                }
                            }

                            this.SubtitleListview1.SetAlternateText(i, original.Text);
                        }
                    }

                    if (this._subtitle.Paragraphs[i].Text.Contains("<" + tag + ">"))
                    {
                        this._subtitle.Paragraphs[i].Text = this._subtitle.Paragraphs[i].Text.Replace("<" + tag + ">", string.Empty);
                        this._subtitle.Paragraphs[i].Text = this._subtitle.Paragraphs[i].Text.Replace("</" + tag + ">", string.Empty);
                    }
                    else
                    {
                        int indexOfEndBracket = this._subtitle.Paragraphs[i].Text.IndexOf('}');
                        if (this._subtitle.Paragraphs[i].Text.StartsWith("{\\") && indexOfEndBracket > 1 && indexOfEndBracket < 6)
                        {
                            this._subtitle.Paragraphs[i].Text = string.Format("{2}<{0}>{1}</{0}>", tag, this._subtitle.Paragraphs[i].Text.Remove(0, indexOfEndBracket + 1), this._subtitle.Paragraphs[i].Text.Substring(0, indexOfEndBracket + 1));
                        }
                        else
                        {
                            this._subtitle.Paragraphs[i].Text = string.Format("<{0}>{1}</{0}>", tag, this._subtitle.Paragraphs[i].Text);
                        }
                    }

                    this.SubtitleListview1.SetText(i, this._subtitle.Paragraphs[i].Text);
                }

                this.SubtitleListview1.EndUpdate();

                this.ShowStatus(string.Format(this._language.TagXAdded, tag));
                this.ShowSource();
                this.RefreshSelectedParagraph();
                this.SubtitleListview1.SelectedIndexChanged += this.SubtitleListview1_SelectedIndexChanged;
            }
        }

        /// <summary>
        /// The tool strip menu item delete click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemDeleteClick(object sender, EventArgs e)
        {
            if (this._subtitle.Paragraphs.Count > 0 && this.SubtitleListview1.SelectedItems.Count > 0)
            {
                string statusText;
                string historyText;
                string askText;

                if (this.SubtitleListview1.SelectedItems.Count > 1)
                {
                    statusText = string.Format(this._language.XLinesDeleted, this.SubtitleListview1.SelectedItems.Count);
                    historyText = string.Format(this._language.BeforeDeletingXLines, this.SubtitleListview1.SelectedItems.Count);
                    askText = string.Format(this._language.DeleteXLinesPrompt, this.SubtitleListview1.SelectedItems.Count);
                }
                else
                {
                    statusText = this._language.OneLineDeleted;
                    historyText = this._language.BeforeDeletingOneLine;
                    askText = this._language.DeleteOneLinePrompt;
                }

                if (Configuration.Settings.General.PromptDeleteLines && MessageBox.Show(askText, this.Title, MessageBoxButtons.YesNo) == DialogResult.No)
                {
                    this._cutText = string.Empty;
                    return;
                }

                if (!string.IsNullOrEmpty(this._cutText))
                {
                    Clipboard.SetText(this._cutText);
                    this._cutText = string.Empty;
                }

                this.MakeHistoryForUndo(historyText);
                this.DeleteSelectedLines();

                this.ShowStatus(statusText);
                this.ShowSource();
            }
        }

        /// <summary>
        /// The delete selected lines.
        /// </summary>
        private void DeleteSelectedLines()
        {
            this._subtitleListViewIndex = -1;

            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && this._subtitleAlternate != null && this._subtitleAlternate.Paragraphs.Count > 0)
            {
                var alternateIndices = new List<int>();
                foreach (ListViewItem item in this.SubtitleListview1.SelectedItems)
                {
                    var p = this._subtitle.GetParagraphOrDefault(item.Index);
                    if (p != null)
                    {
                        var original = Utilities.GetOriginalParagraph(item.Index, p, this._subtitleAlternate.Paragraphs);
                        if (original != null)
                        {
                            alternateIndices.Add(this._subtitleAlternate.GetIndex(original));
                        }
                    }
                }

                alternateIndices.Reverse();
                foreach (int i in alternateIndices)
                {
                    if (i < this._subtitleAlternate.Paragraphs.Count)
                    {
                        this._subtitleAlternate.Paragraphs.RemoveAt(i);
                    }
                }

                this._subtitleAlternate.Renumber();
            }

            var indices = new List<int>();
            foreach (ListViewItem item in this.SubtitleListview1.SelectedItems)
            {
                indices.Add(item.Index);
            }

            int firstIndex = this.SubtitleListview1.SelectedItems[0].Index;

            if (this._networkSession != null)
            {
                this._networkSession.TimerStop();
                this.NetworkGetSendUpdates(indices, 0, null);
            }
            else
            {
                indices.Reverse();
                foreach (int i in indices)
                {
                    this._subtitle.Paragraphs.RemoveAt(i);
                    if (this._networkSession != null && this._networkSession.LastSubtitle != null && i < this._networkSession.LastSubtitle.Paragraphs.Count)
                    {
                        this._networkSession.LastSubtitle.Paragraphs.RemoveAt(i);
                    }
                }

                this._subtitle.Renumber();
                this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                if (this.SubtitleListview1.FirstVisibleIndex == 0)
                {
                    this.SubtitleListview1.FirstVisibleIndex = -1;
                }

                if (this.SubtitleListview1.Items.Count > firstIndex)
                {
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(firstIndex, true);
                }
                else if (this.SubtitleListview1.Items.Count > 0)
                {
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(this.SubtitleListview1.Items.Count - 1, true);
                }
            }
        }

        /// <summary>
        /// The tool strip menu item insert before click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemInsertBeforeClick(object sender, EventArgs e)
        {
            if (this._subtitle.Paragraphs.Count > 0)
            {
                this.InsertBefore();
            }

            this.textBoxListViewText.Focus();
        }

        /// <summary>
        /// The insert before.
        /// </summary>
        private void InsertBefore()
        {
            var format = this.GetCurrentSubtitleFormat();
            bool useExtraForStyle = format.HasStyleSupport;
            var styles = new List<string>();
            if (format.GetType() == typeof(AdvancedSubStationAlpha) || format.GetType() == typeof(SubStationAlpha))
            {
                styles = AdvancedSubStationAlpha.GetStylesFromHeader(this._subtitle.Header);
            }
            else if (format.GetType() == typeof(TimedText10) || format.GetType() == typeof(ItunesTimedText))
            {
                styles = TimedText10.GetStylesFromHeader(this._subtitle.Header);
            }
            else if (format.GetType() == typeof(Sami) || format.GetType() == typeof(SamiModern))
            {
                styles = Sami.GetStylesFromHeader(this._subtitle.Header);
            }

            string style = "Default";
            if (styles.Count > 0)
            {
                style = styles[0];
            }

            this.MakeHistoryForUndo(this._language.BeforeInsertLine);

            int firstSelectedIndex = 0;
            if (this.SubtitleListview1.SelectedItems.Count > 0)
            {
                firstSelectedIndex = this.SubtitleListview1.SelectedItems[0].Index;
            }

            int addMilliseconds = Configuration.Settings.General.MinimumMillisecondsBetweenLines + 1;
            if (addMilliseconds < 1)
            {
                addMilliseconds = 1;
            }

            var newParagraph = new Paragraph();
            if (useExtraForStyle)
            {
                newParagraph.Extra = style;
                if (format.GetType() == typeof(TimedText10) || format.GetType() == typeof(ItunesTimedText))
                {
                    if (styles.Count > 0)
                    {
                        newParagraph.Style = style;
                    }

                    newParagraph.Extra = TimedText10.SetExtra(newParagraph);
                }
            }

            var prev = this._subtitle.GetParagraphOrDefault(firstSelectedIndex - 1);
            var next = this._subtitle.GetParagraphOrDefault(firstSelectedIndex);
            if (prev != null && next != null)
            {
                newParagraph.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - addMilliseconds;
                newParagraph.StartTime.TotalMilliseconds = newParagraph.EndTime.TotalMilliseconds - 2000;
                if (newParagraph.StartTime.TotalMilliseconds <= prev.EndTime.TotalMilliseconds)
                {
                    newParagraph.StartTime.TotalMilliseconds = prev.EndTime.TotalMilliseconds + 1;
                }

                if (newParagraph.Duration.TotalMilliseconds < 100)
                {
                    newParagraph.EndTime.TotalMilliseconds += 100;
                }
            }
            else if (prev != null)
            {
                newParagraph.StartTime.TotalMilliseconds = prev.EndTime.TotalMilliseconds + addMilliseconds;
                newParagraph.EndTime.TotalMilliseconds = newParagraph.StartTime.TotalMilliseconds + Configuration.Settings.General.NewEmptyDefaultMs;
                if (newParagraph.StartTime.TotalMilliseconds > newParagraph.EndTime.TotalMilliseconds)
                {
                    newParagraph.StartTime.TotalMilliseconds = prev.EndTime.TotalMilliseconds + 1;
                }
            }
            else if (next != null)
            {
                newParagraph.StartTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - 2001;
                newParagraph.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - 1;
            }
            else
            {
                newParagraph.StartTime.TotalMilliseconds = 1000;
                newParagraph.EndTime.TotalMilliseconds = 3000;
            }

            if (this.GetCurrentSubtitleFormat().IsFrameBased)
            {
                newParagraph.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                newParagraph.CalculateTimeCodesFromFrameNumbers(this.CurrentFrameRate);
            }

            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && this._subtitleAlternate != null && this._subtitleAlternate.Paragraphs.Count > 0)
            {
                var currentOriginal = Utilities.GetOriginalParagraph(firstSelectedIndex, this._subtitle.Paragraphs[firstSelectedIndex], this._subtitleAlternate.Paragraphs);
                if (currentOriginal != null)
                {
                    this._subtitleAlternate.Paragraphs.Insert(this._subtitleAlternate.Paragraphs.IndexOf(currentOriginal), new Paragraph(newParagraph));
                }
                else
                {
                    this._subtitleAlternate.InsertParagraphInCorrectTimeOrder(new Paragraph(newParagraph));
                }

                this._subtitleAlternate.Renumber();
            }

            if (this._networkSession != null)
            {
                this._networkSession.TimerStop();
                this.NetworkGetSendUpdates(new List<int>(), firstSelectedIndex, newParagraph);
            }
            else
            {
                this._subtitle.Paragraphs.Insert(firstSelectedIndex, newParagraph);
                this._subtitleListViewIndex = -1;
                this._subtitle.Renumber();
                this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
            }

            this.SubtitleListview1.SelectIndexAndEnsureVisible(firstSelectedIndex);
            this.ShowSource();
            this.ShowStatus(this._language.LineInserted);
        }

        /// <summary>
        /// The tool strip menu item insert after click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemInsertAfterClick(object sender, EventArgs e)
        {
            if (this._subtitle.Paragraphs.Count > 0)
            {
                this.InsertAfter();
                this.textBoxListViewText.Focus();
            }
        }

        /// <summary>
        /// The insert after.
        /// </summary>
        private void InsertAfter()
        {
            var format = this.GetCurrentSubtitleFormat();
            bool useExtraForStyle = format.HasStyleSupport;
            var formatType = format.GetType();
            var styles = new List<string>();
            if (formatType == typeof(AdvancedSubStationAlpha) || formatType == typeof(SubStationAlpha))
            {
                styles = AdvancedSubStationAlpha.GetStylesFromHeader(this._subtitle.Header);
            }
            else if (formatType == typeof(TimedText10) || formatType == typeof(ItunesTimedText))
            {
                styles = TimedText10.GetStylesFromHeader(this._subtitle.Header);
            }
            else if (formatType == typeof(Sami) || formatType == typeof(SamiModern))
            {
                styles = Sami.GetStylesFromHeader(this._subtitle.Header);
            }

            string style = "Default";
            if (styles.Count > 0)
            {
                style = styles[0];
            }

            this.MakeHistoryForUndo(this._language.BeforeInsertLine);

            int firstSelectedIndex = 0;
            if (this.SubtitleListview1.SelectedItems.Count > 0)
            {
                firstSelectedIndex = this.SubtitleListview1.SelectedItems[0].Index + 1;
            }

            var newParagraph = new Paragraph();
            if (useExtraForStyle)
            {
                newParagraph.Extra = style;
                if (format.GetType() == typeof(TimedText10) || format.GetType() == typeof(ItunesTimedText))
                {
                    if (styles.Count > 0)
                    {
                        newParagraph.Style = style;
                    }

                    newParagraph.Extra = TimedText10.SetExtra(newParagraph);
                }
            }

            var prev = this._subtitle.GetParagraphOrDefault(firstSelectedIndex - 1);
            var next = this._subtitle.GetParagraphOrDefault(firstSelectedIndex);
            if (prev != null)
            {
                int addMilliseconds = Configuration.Settings.General.MinimumMillisecondsBetweenLines;
                if (addMilliseconds < 1)
                {
                    addMilliseconds = 1;
                }

                newParagraph.StartTime.TotalMilliseconds = prev.EndTime.TotalMilliseconds + addMilliseconds;
                newParagraph.EndTime.TotalMilliseconds = newParagraph.StartTime.TotalMilliseconds + Configuration.Settings.General.NewEmptyDefaultMs;
                if (next != null && newParagraph.EndTime.TotalMilliseconds > next.StartTime.TotalMilliseconds)
                {
                    newParagraph.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - 1;
                }

                if (newParagraph.StartTime.TotalMilliseconds > newParagraph.EndTime.TotalMilliseconds)
                {
                    newParagraph.StartTime.TotalMilliseconds = prev.EndTime.TotalMilliseconds + 1;
                }
            }
            else if (next != null)
            {
                newParagraph.StartTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - 2000;
                newParagraph.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - 1;
            }
            else
            {
                newParagraph.StartTime.TotalMilliseconds = 1000;
                newParagraph.EndTime.TotalMilliseconds = 3000;
            }

            if (this.GetCurrentSubtitleFormat().IsFrameBased)
            {
                newParagraph.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                newParagraph.CalculateTimeCodesFromFrameNumbers(this.CurrentFrameRate);
            }

            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && this._subtitleAlternate != null && this._subtitleAlternate.Paragraphs.Count > 0)
            {
                var currentOriginal = Utilities.GetOriginalParagraph(firstSelectedIndex - 1, this._subtitle.Paragraphs[firstSelectedIndex - 1], this._subtitleAlternate.Paragraphs);
                if (currentOriginal != null)
                {
                    this._subtitleAlternate.Paragraphs.Insert(this._subtitleAlternate.Paragraphs.IndexOf(currentOriginal) + 1, new Paragraph(newParagraph));
                }
                else
                {
                    this._subtitleAlternate.InsertParagraphInCorrectTimeOrder(new Paragraph(newParagraph));
                }

                this._subtitleAlternate.Renumber();
            }

            if (this._networkSession != null)
            {
                this._networkSession.TimerStop();
                this.NetworkGetSendUpdates(new List<int>(), firstSelectedIndex, newParagraph);
            }
            else
            {
                this._subtitle.Paragraphs.Insert(firstSelectedIndex, newParagraph);
                this._subtitle.Renumber();
                this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
            }

            this.SubtitleListview1.SelectIndexAndEnsureVisible(firstSelectedIndex);
            this.ShowSource();
            this.ShowStatus(this._language.LineInserted);
        }

        /// <summary>
        /// The subtitle list view 1 selected index change.
        /// </summary>
        private void SubtitleListView1SelectedIndexChange()
        {
            this.StopAutoDuration();
            this.ShowLineInformationListView();
            if (this._subtitle.Paragraphs.Count > 0)
            {
                int firstSelectedIndex = 0;
                if (this.SubtitleListview1.SelectedItems.Count > 0)
                {
                    firstSelectedIndex = this.SubtitleListview1.SelectedItems[0].Index;
                }

                if (this._subtitleListViewIndex >= 0)
                {
                    if (this._subtitleListViewIndex == firstSelectedIndex)
                    {
                        return;
                    }

                    bool showSource = false;

                    var last = this._subtitle.GetParagraphOrDefault(this._subtitleListViewIndex);
                    if (this.textBoxListViewText.Text != last.Text)
                    {
                        last.Text = this.textBoxListViewText.Text.TrimEnd();
                        this.SubtitleListview1.SetText(this._subtitleListViewIndex, last.Text);
                        showSource = true;
                    }

                    TimeCode startTime = this.timeUpDownStartTime.TimeCode;
                    if (startTime != null)
                    {
                        if (last.StartTime.TotalMilliseconds != startTime.TotalMilliseconds)
                        {
                            double dur = last.Duration.TotalMilliseconds;
                            last.StartTime.TotalMilliseconds = startTime.TotalMilliseconds;
                            last.EndTime.TotalMilliseconds = startTime.TotalMilliseconds + dur;
                            this.SubtitleListview1.SetStartTime(this._subtitleListViewIndex, last);
                            showSource = true;
                        }
                    }

                    double duration = this.GetDurationInMilliseconds();
                    if (duration > 0 && duration < 100000 && duration != last.Duration.TotalMilliseconds)
                    {
                        last.EndTime.TotalMilliseconds = last.StartTime.TotalMilliseconds + duration;
                        this.SubtitleListview1.SetDuration(this._subtitleListViewIndex, last);
                        showSource = true;
                    }

                    if (showSource)
                    {
                        this.ShowSource();
                    }
                }

                var p = this._subtitle.GetParagraphOrDefault(firstSelectedIndex);
                if (p != null)
                {
                    this.InitializeListViewEditBox(p);
                    this._subtitleListViewIndex = firstSelectedIndex;
                    this._oldSelectedParagraph = new Paragraph(p);
                    this.UpdateListViewTextInfo(this.labelTextLineLengths, this.labelSingleLine, this.labelTextLineTotal, this.labelCharactersPerSecond, p, this.textBoxListViewText);

                    if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && this._subtitleAlternate != null && this._subtitleAlternate.Paragraphs.Count > 0)
                    {
                        this.InitializeListViewEditBoxAlternate(p, firstSelectedIndex);
                        this.labelAlternateCharactersPerSecond.Left = this.textBoxListViewTextAlternate.Left + (this.textBoxListViewTextAlternate.Width - this.labelAlternateCharactersPerSecond.Width);
                        this.labelTextAlternateLineTotal.Left = this.textBoxListViewTextAlternate.Left + (this.textBoxListViewTextAlternate.Width - this.labelTextAlternateLineTotal.Width);
                    }
                }
            }
        }

        /// <summary>
        /// The subtitle listview 1_ selected index changed.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void SubtitleListview1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!this._makeHistoryPaused)
            {
                if (this._listViewTextUndoLast != null && this._listViewTextUndoIndex >= 0 && this._subtitle.Paragraphs.Count > this._listViewTextUndoIndex && this._subtitle.Paragraphs[this._listViewTextUndoIndex].Text.TrimEnd() != this._listViewTextUndoLast.TrimEnd())
                {
                    this.MakeHistoryForUndo(this._languageGeneral.Text + ": " + this._listViewTextUndoLast.TrimEnd() + " -> " + this._subtitle.Paragraphs[this._listViewTextUndoIndex].Text.TrimEnd(), false);
                    this._subtitle.HistoryItems[this._subtitle.HistoryItems.Count - 1].Subtitle.Paragraphs[this._listViewTextUndoIndex].Text = this._listViewTextUndoLast;
                    if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && this._subtitleAlternate != null)
                    {
                        var original = Utilities.GetOriginalParagraph(this._listViewTextUndoIndex, this._subtitle.Paragraphs[this._listViewTextUndoIndex], this._subtitleAlternate.Paragraphs);
                        var idx = this._subtitleAlternate.GetIndex(original);
                        if (idx >= 0)
                        {
                            this._subtitle.HistoryItems[this._subtitle.HistoryItems.Count - 1].OriginalSubtitle.Paragraphs[idx].Text = this._listViewAlternateTextUndoLast;
                        }
                    }
                }
                else if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && this._subtitleAlternate != null && this._listViewAlternateTextUndoLast != null && this._subtitle.Paragraphs.Count > this._listViewTextUndoIndex && this._listViewTextUndoIndex >= 0)
                {
                    var original = Utilities.GetOriginalParagraph(this._listViewTextUndoIndex, this._subtitle.Paragraphs[this._listViewTextUndoIndex], this._subtitleAlternate.Paragraphs);
                    if (original != null && original.Text.TrimEnd() != this._listViewAlternateTextUndoLast.TrimEnd())
                    {
                        var idx = this._subtitleAlternate.GetIndex(original);
                        if (idx >= 0)
                        {
                            this.MakeHistoryForUndo(this._languageGeneral.Text + ": " + this._listViewAlternateTextUndoLast.TrimEnd() + " -> " + original.Text.TrimEnd(), false);
                            this._subtitle.HistoryItems[this._subtitle.HistoryItems.Count - 1].OriginalSubtitle.Paragraphs[idx].Text = this._listViewAlternateTextUndoLast;
                        }
                    }
                }
            }

            this._listViewTextUndoIndex = -1;
            this.SubtitleListView1SelectedIndexChange();
        }

        /// <summary>
        /// The show line information list view.
        /// </summary>
        private void ShowLineInformationListView()
        {
            if (this.SubtitleListview1.SelectedItems.Count == 1)
            {
                this.toolStripSelected.Text = string.Format("{0}/{1}", this.SubtitleListview1.SelectedItems[0].Index + 1, this.SubtitleListview1.Items.Count);
            }
            else
            {
                this.toolStripSelected.Text = string.Format(this._language.XLinesSelected, this.SubtitleListview1.SelectedItems.Count);
            }
        }

        /// <summary>
        /// The update list view text characters per seconds.
        /// </summary>
        /// <param name="charsPerSecond">
        /// The chars per second.
        /// </param>
        /// <param name="paragraph">
        /// The paragraph.
        /// </param>
        private void UpdateListViewTextCharactersPerSeconds(Label charsPerSecond, Paragraph paragraph)
        {
            if (paragraph.Duration.TotalSeconds > 0)
            {
                double charactersPerSecond = Utilities.GetCharactersPerSecond(paragraph);
                if (charactersPerSecond > Configuration.Settings.General.SubtitleMaximumCharactersPerSeconds + 7)
                {
                    charsPerSecond.ForeColor = Color.Red;
                }
                else if (charactersPerSecond > Configuration.Settings.General.SubtitleMaximumCharactersPerSeconds)
                {
                    charsPerSecond.ForeColor = Utilities.ColorDarkOrange;
                }
                else
                {
                    charsPerSecond.ForeColor = Color.Black;
                }

                charsPerSecond.Text = string.Format(this._language.CharactersPerSecond, charactersPerSecond);
            }
            else
            {
                charsPerSecond.ForeColor = Color.Red;
                charsPerSecond.Text = string.Format(this._language.CharactersPerSecond, this._languageGeneral.NotAvailable);
            }
        }

        /// <summary>
        /// The update list view text info.
        /// </summary>
        /// <param name="lineLengths">
        /// The line lengths.
        /// </param>
        /// <param name="singleLine">
        /// The single line.
        /// </param>
        /// <param name="lineTotal">
        /// The line total.
        /// </param>
        /// <param name="charactersPerSecond">
        /// The characters per second.
        /// </param>
        /// <param name="paragraph">
        /// The paragraph.
        /// </param>
        /// <param name="textBox">
        /// The text box.
        /// </param>
        private void UpdateListViewTextInfo(Label lineLengths, Label singleLine, Label lineTotal, Label charactersPerSecond, Paragraph paragraph, TextBox textBox)
        {
            if (paragraph == null)
            {
                return;
            }

            bool textBoxHasFocus = textBox.Focused;
            string text = paragraph.Text;
            lineLengths.Text = this._languageGeneral.SingleLineLengths.Trim();
            singleLine.Left = lineLengths.Left + lineLengths.Width - 3;
            Utilities.GetLineLengths(singleLine, text);

            this.buttonSplitLine.Visible = false;
            text = HtmlUtil.RemoveHtmlTags(text, true);
            string s = text.Replace(Environment.NewLine, string.Empty); // we don't count new line in total length... correct?

            // remove unicode control characters
            s = s.Replace("\u8207", string.Empty).Replace("\u8206", string.Empty).Replace("\u202A", string.Empty).Replace("\u202B", string.Empty).Replace("\u202D", string.Empty).Replace("\u202E", string.Empty).Replace("\u002B", string.Empty);

            int numberOfLines = Utilities.GetNumberOfLines(text.Trim());
            int maxLines = int.MaxValue;
            if (Configuration.Settings.Tools.ListViewSyntaxMoreThanXLines)
            {
                maxLines = Configuration.Settings.Tools.ListViewSyntaxMoreThanXLinesX;
            }

            var splitLines = text.SplitToLines();
            if (numberOfLines <= maxLines)
            {
                if (s.Length <= Configuration.Settings.General.SubtitleLineMaximumLength * Math.Max(numberOfLines, 2) && splitLines.Length == 2 && splitLines[0].StartsWith('-') && splitLines[1].StartsWith('-') && (splitLines[0].Length > Configuration.Settings.General.SubtitleLineMaximumLength || splitLines[1].Length > Configuration.Settings.General.SubtitleLineMaximumLength))
                {
                    if (this.buttonUnBreak.Visible)
                    {
                        if (!textBoxHasFocus)
                        {
                            lineTotal.Text = string.Format(this._languageGeneral.TotalLengthX, s.Length);
                        }

                        this.buttonSplitLine.Visible = true;
                    }
                }
                else if (s.Length <= Configuration.Settings.General.SubtitleLineMaximumLength * Math.Max(numberOfLines, 2))
                {
                    lineTotal.ForeColor = Color.Black;
                    if (!textBoxHasFocus)
                    {
                        lineTotal.Text = string.Format(this._languageGeneral.TotalLengthX, s.Length);
                    }
                }
                else
                {
                    lineTotal.ForeColor = Color.Red;
                    if (!textBoxHasFocus)
                    {
                        lineTotal.Text = string.Format(this._languageGeneral.TotalLengthXSplitLine, s.Length);
                    }

                    if (this.buttonUnBreak.Visible)
                    {
                        if (!textBoxHasFocus)
                        {
                            lineTotal.Text = string.Format(this._languageGeneral.TotalLengthX, s.Length);
                        }

                        this.buttonSplitLine.Visible = true;
                    }
                }
            }

            this.UpdateListViewTextCharactersPerSeconds(charactersPerSecond, paragraph);
            charactersPerSecond.Left = textBox.Left + (textBox.Width - this.labelCharactersPerSecond.Width);
            lineTotal.Left = textBox.Left + (textBox.Width - lineTotal.Width);
            FixVerticalScrollBars(textBox);
        }

        /// <summary>
        /// The button next click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ButtonNextClick(object sender, EventArgs e)
        {
            this.MoveNextPrevious(0);
        }

        /// <summary>
        /// The button previous click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ButtonPreviousClick(object sender, EventArgs e)
        {
            this.MoveNextPrevious(1);
        }

        /// <summary>
        /// The move next previous.
        /// </summary>
        /// <param name="firstSelectedIndex">
        /// The first selected index.
        /// </param>
        private void MoveNextPrevious(int firstSelectedIndex)
        {
            if (this._subtitle.Paragraphs.Count == 0)
            {
                return;
            }

            var temp = firstSelectedIndex;
            if (this.SubtitleListview1.SelectedItems.Count > 0)
            {
                firstSelectedIndex = this.SubtitleListview1.SelectedItems[0].Index;
            }

            firstSelectedIndex = temp == 0 ? firstSelectedIndex + 1 : firstSelectedIndex - 1;
            var p = this._subtitle.GetParagraphOrDefault(firstSelectedIndex);
            if (p != null)
            {
                this.SubtitleListview1.SelectIndexAndEnsureVisible(firstSelectedIndex);
            }
        }

        /// <summary>
        /// The normal tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void NormalToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (this._subtitle.Paragraphs.Count > 0 && this.SubtitleListview1.SelectedItems.Count > 0)
            {
                this.MakeHistoryForUndo(this._language.BeforeSettingFontToNormal);
                var subFormatName = this.GetCurrentSubtitleFormat().Name;
                bool isSsa = subFormatName == SubStationAlpha.NameOfFormat || subFormatName == AdvancedSubStationAlpha.NameOfFormat;

                foreach (ListViewItem item in this.SubtitleListview1.SelectedItems)
                {
                    var p = this._subtitle.GetParagraphOrDefault(item.Index);
                    if (p != null)
                    {
                        int indexOfEndBracket = p.Text.IndexOf('}');
                        if (p.Text.StartsWith("{\\") && indexOfEndBracket > 1 && indexOfEndBracket < 6)
                        {
                            p.Text = p.Text.Remove(0, indexOfEndBracket + 1).TrimStart();
                        }

                        p.Text = HtmlUtil.RemoveHtmlTags(p.Text);
                        p.Text = this.RemoveUnicodeCharacters(p.Text);
                        if (isSsa)
                        {
                            p.Text = Utilities.RemoveSsaTags(p.Text);
                        }

                        this.SubtitleListview1.SetText(item.Index, p.Text);

                        if (this._subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                        {
                            var original = Utilities.GetOriginalParagraph(item.Index, p, this._subtitleAlternate.Paragraphs);
                            if (original != null)
                            {
                                original.Text = HtmlUtil.RemoveHtmlTags(original.Text);
                                original.Text = original.Text.Replace("♪", string.Empty);
                                if (isSsa)
                                {
                                    original.Text = Utilities.RemoveSsaTags(original.Text);
                                }

                                this.SubtitleListview1.SetAlternateText(item.Index, original.Text);
                            }
                        }
                    }
                }

                this.ShowSource();
                this.RefreshSelectedParagraph();
            }
        }

        /// <summary>
        /// The remove unicode characters.
        /// </summary>
        /// <param name="text">
        /// The text.
        /// </param>
        /// <returns>
        /// The <see cref="string"/>.
        /// </returns>
        private string RemoveUnicodeCharacters(string text)
        {
            IList<char> uCharList = new List<char>() { '♫', '♪', '☺', '☹', '♥', '©', '☮', '☯', 'Σ', '∞', '≡', '⇒', 'π' };
            foreach (char uChar in uCharList)
            {
                if (text.IndexOf(uChar) >= 0)
                {
                    text = text.Replace(uChar, ' ');
                }
            }

            return text.FixExtraSpaces().Trim();
        }

        /// <summary>
        /// The button auto break click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ButtonAutoBreakClick(object sender, EventArgs e)
        {
            string language = Utilities.AutoDetectGoogleLanguage(this._subtitle);
            string languageOriginal = string.Empty;
            if (this._subtitleAlternate != null)
            {
                languageOriginal = Utilities.AutoDetectGoogleLanguage(this._subtitleAlternate);
            }

            if (this.SubtitleListview1.SelectedItems.Count > 1)
            {
                this.MakeHistoryForUndo(this._language.BeforeRemoveLineBreaksInSelectedLines);
                this.SubtitleListview1.BeginUpdate();
                foreach (int index in this.SubtitleListview1.SelectedIndices)
                {
                    var p = this._subtitle.GetParagraphOrDefault(index);
                    if (p != null)
                    {
                        p.Text = Utilities.AutoBreakLine(p.Text, language);
                        this.SubtitleListview1.SetText(index, p.Text);

                        if (this._subtitleAlternate != null && this.SubtitleListview1.IsAlternateTextColumnVisible && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                        {
                            var original = Utilities.GetOriginalParagraph(index, p, this._subtitleAlternate.Paragraphs);
                            if (original != null)
                            {
                                original.Text = Utilities.AutoBreakLine(original.Text, languageOriginal);
                                this.SubtitleListview1.SetAlternateText(index, original.Text);
                            }
                        }

                        this.SubtitleListview1.SyntaxColorLine(this._subtitle.Paragraphs, index, p);
                    }
                }

                this.SubtitleListview1.EndUpdate();
                this.RefreshSelectedParagraph();
            }
            else
            {
                this.textBoxListViewText.Text = Utilities.AutoBreakLine(this.textBoxListViewText.Text, language);
                if (this._subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                {
                    this.textBoxListViewTextAlternate.Text = Utilities.AutoBreakLine(this.textBoxListViewTextAlternate.Text, languageOriginal);
                }
            }
        }

        /// <summary>
        /// The fix vertical scroll bars.
        /// </summary>
        /// <param name="tb">
        /// The tb.
        /// </param>
        private static void FixVerticalScrollBars(TextBox tb)
        {
            if (Utilities.GetNumberOfLines(tb.Text) > 3)
            {
                tb.ScrollBars = ScrollBars.Vertical;
            }
            else
            {
                tb.ScrollBars = ScrollBars.None;
            }
        }

        /// <summary>
        /// The text box list view text text changed.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void TextBoxListViewTextTextChanged(object sender, EventArgs e)
        {
            if (this._subtitleListViewIndex >= 0)
            {
                int numberOfNewLines = Utilities.GetNumberOfLines(this.textBoxListViewText.Text);
                Utilities.CheckAutoWrap(this.textBoxListViewText, new KeyEventArgs(Keys.None), numberOfNewLines);

                // update _subtitle + listview
                string text = this.textBoxListViewText.Text.TrimEnd();
                this._subtitle.Paragraphs[this._subtitleListViewIndex].Text = text;
                this.UpdateListViewTextInfo(this.labelTextLineLengths, this.labelSingleLine, this.labelTextLineTotal, this.labelCharactersPerSecond, this._subtitle.Paragraphs[this._subtitleListViewIndex], this.textBoxListViewText);
                this.SubtitleListview1.SetText(this._subtitleListViewIndex, text);

                this._listViewTextUndoIndex = this._subtitleListViewIndex;
                this.labelStatus.Text = string.Empty;

                this.StartUpdateListSyntaxColoring();
                FixVerticalScrollBars(this.textBoxListViewText);
            }
        }

        /// <summary>
        /// The text box list view text alternate text changed.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void TextBoxListViewTextAlternateTextChanged(object sender, EventArgs e)
        {
            if (this._subtitleListViewIndex >= 0)
            {
                var p = this._subtitle.GetParagraphOrDefault(this._subtitleListViewIndex);
                if (p == null)
                {
                    return;
                }

                var original = Utilities.GetOriginalParagraph(this._subtitleListViewIndex, p, this._subtitleAlternate.Paragraphs);
                if (original != null)
                {
                    int numberOfNewLines = Utilities.GetNumberOfLines(this.textBoxListViewTextAlternate.Text);
                    Utilities.CheckAutoWrap(this.textBoxListViewTextAlternate, new KeyEventArgs(Keys.None), numberOfNewLines);

                    // update _subtitle + listview
                    string text = this.textBoxListViewTextAlternate.Text.TrimEnd();
                    original.Text = text;
                    this.UpdateListViewTextInfo(this.labelTextAlternateLineLengths, this.labelAlternateSingleLine, this.labelTextAlternateLineTotal, this.labelAlternateCharactersPerSecond, original, this.textBoxListViewTextAlternate);
                    this.SubtitleListview1.SetAlternateText(this._subtitleListViewIndex, text);
                    this._listViewTextUndoIndex = this._subtitleListViewIndex;
                }

                this.labelStatus.Text = string.Empty;

                this.StartUpdateListSyntaxColoring();
                FixVerticalScrollBars(this.textBoxListViewTextAlternate);
            }
        }

        /// <summary>
        /// The text box list view text key down.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void TextBoxListViewTextKeyDown(object sender, KeyEventArgs e)
        {
            this._listViewTextTicks = DateTime.Now.Ticks;
            if (e.Modifiers == Keys.Shift && e.KeyCode == Keys.ShiftKey)
            {
                return;
            }

            if (e.Modifiers == Keys.Control && e.KeyCode == (Keys.LButton | Keys.ShiftKey))
            {
                return;
            }

            int numberOfLines = Utilities.GetNumberOfLines(this.textBoxListViewText.Text);

            // Utilities.CheckAutoWrap(textBoxListViewText, e, numberOfNewLines);
            if (e.KeyCode == Keys.Enter && e.Modifiers == Keys.None && numberOfLines > Configuration.Settings.Tools.ListViewSyntaxMoreThanXLinesX)
            {
                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == Keys.Control && e.KeyCode == Keys.A)
            {
                this.textBoxListViewText.SelectAll();
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == this._mainTextBoxAutoBreak)
            {
                this.ButtonAutoBreakClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == this._mainTextBoxUnbreak)
            {
                this.ButtonUnBreakClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == Keys.Alt && e.KeyCode == Keys.I)
            {
                if (this.textBoxListViewText.SelectionLength == 0)
                {
                    if (this.textBoxListViewText.Text.Contains("<i>", StringComparison.Ordinal))
                    {
                        this.textBoxListViewText.Text = HtmlUtil.RemoveOpenCloseTags(this.textBoxListViewText.Text, HtmlUtil.TagItalic);
                    }
                    else
                    {
                        this.textBoxListViewText.Text = string.Format("<i>{0}</i>", this.textBoxListViewText.Text);
                    }
                }
                else
                {
                    this.TextBoxListViewToggleTag("i");
                }
            }

            if (e.Modifiers == Keys.Control && e.KeyCode == Keys.D)
            {
                this.textBoxListViewText.SelectionLength = 0;
                e.SuppressKeyPress = true;
            }
            else if (this._mainTextBoxSplitAtCursor == e.KeyData)
            {
                this.ToolStripMenuItemSplitTextAtCursorClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == this._mainTextBoxInsertAfter)
            {
                this.InsertAfter();
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == this._mainListViewGoToNextError)
            {
                this.GoToNextSynaxError();
                e.SuppressKeyPress = true;
            }
            else if (this._mainTextBoxSelectionToLower == e.KeyData && this.textBoxListViewText.SelectionLength > 0)
            {
                // selection to lowercase
                int start = this.textBoxListViewText.SelectionStart;
                int length = this.textBoxListViewText.SelectionLength;
                this.textBoxListViewText.SelectedText = this.textBoxListViewText.SelectedText.ToLower();
                this.textBoxListViewText.SelectionStart = start;
                this.textBoxListViewText.SelectionLength = length;
                e.SuppressKeyPress = true;
            }
            else if (this._mainTextBoxSelectionToUpper == e.KeyData && this.textBoxListViewText.SelectionLength > 0)
            {
                // selection to uppercase
                int start = this.textBoxListViewText.SelectionStart;
                int length = this.textBoxListViewText.SelectionLength;
                this.textBoxListViewText.SelectedText = this.textBoxListViewText.SelectedText.ToUpper();
                this.textBoxListViewText.SelectionStart = start;
                this.textBoxListViewText.SelectionLength = length;
                e.SuppressKeyPress = true;
            }
            else if (this._mainTextBoxToggleAutoDuration == e.KeyData)
            {
                // toggle auto-duration
                if (this.timerAutoDuration.Enabled)
                {
                    this.timerAutoDuration.Stop();
                    this.labelAutoDuration.Visible = false;
                }
                else
                {
                    this.timerAutoDuration.Start();
                    this.labelAutoDuration.Visible = true;
                }

                e.SuppressKeyPress = true;
            }

            // last key down in text
            this._lastTextKeyDownTicks = DateTime.Now.Ticks;

            this.UpdatePositionAndTotalLength(this.labelTextLineTotal, this.textBoxListViewText);
        }

        /// <summary>
        /// The move first word in next up.
        /// </summary>
        private void MoveFirstWordInNextUp()
        {
            int firstIndex = this.FirstSelectedIndex;
            if (firstIndex >= 0)
            {
                var p = this._subtitle.GetParagraphOrDefault(firstIndex);
                var next = this._subtitle.GetParagraphOrDefault(firstIndex + 1);
                if (p != null && next != null)
                {
                    string s = next.Text.Trim();

                    // Find the first space.
                    int idx = s.IndexOf(' ');

                    // If the first space is after a "-", even if there is "{\an8}<i>" before, find the second space.
                    if (idx > 0 && s.Substring(idx - 1, 2) == "- ")
                    {
                        idx = idx + 1 + s.Substring(idx + 1).IndexOf(' ');
                    }

                    if (idx > 0 || s.Length > 0)
                    {
                        // A first word was found or next subtitle is not empty (has one word).
                        // Undo
                        this.MakeHistoryForUndo(this._language.BeforeLineUpdatedInListView);

                        // Define firstWord. If idx > 0, there is a first word.
                        // If not, firstWord is the whole text of the next subtitle.
                        string firstWord = idx > 0 ? s.Substring(0, idx).Trim() : next.Text;

                        // If firstWord contains a line break, it has two words.
                        if (firstWord.Contains(Environment.NewLine))
                        {
                            // Redefine firstWord and idx.
                            firstWord = firstWord.Remove(firstWord.IndexOf(Environment.NewLine, StringComparison.Ordinal));
                            idx = s.IndexOf(Environment.NewLine, StringComparison.Ordinal);
                        }

                        // Remove first word from the next subtitle.
                        // If there is only one word, 'next' will be empty.
                        next.Text = idx > 0 ? s.Substring(idx + 1).Trim() : string.Empty;

                        // If the first subtitle ends with a tag (</i>):
                        string endTag = string.Empty;
                        if (p.Text.EndsWith('>') && p.Text.Contains('<'))
                        {
                            // Save the end tag.
                            endTag = p.Text.Substring(p.Text.LastIndexOf('<'), p.Text.Length - p.Text.LastIndexOf('<'));

                            // Remove the endTag from first subtitle.
                            p.Text = p.Text.Remove(p.Text.LastIndexOf('<'));
                        }

                        // If the first subtitle ends with "...":
                        bool firstSubtitleEndsWithEllipsis = p.Text.EndsWith("...", StringComparison.Ordinal);
                        if (firstSubtitleEndsWithEllipsis)
                        {
                            // Remove "..." from first subtitle.
                            p.Text = p.Text.TrimEnd('.');
                        }

                        // If the second subtitle (next) starts with a position tag, like {\an8}:
                        string positionTag = string.Empty;
                        if (firstWord.StartsWith('{') && firstWord.Contains('}'))
                        {
                            // Save the start tag.
                            positionTag = firstWord.Substring(firstWord.IndexOf('{'), firstWord.IndexOf('}') + 1);

                            // Remove the position tag from the first word.
                            firstWord = firstWord.Remove(0, firstWord.IndexOf('}') + 1);
                        }

                        // If the second subtitle (next) starts with a tag:
                        string startTag = string.Empty;
                        if (firstWord.StartsWith('<') && firstWord.Contains('>'))
                        {
                            // Save the start tag.
                            startTag = firstWord.Substring(firstWord.IndexOf('<'), firstWord.IndexOf('>') + 1);

                            // Remove the start tag from the first word.
                            firstWord = firstWord.Remove(0, firstWord.IndexOf('>') + 1);
                        }

                        // If the second subtitle ends with a tag and there's only one word in it:
                        if (next.Text.EndsWith('>') && next.Text.Contains('<') && !next.Text.Contains(' '))
                        {
                            // Remove the end tag.
                            next.Text = next.Text.Remove(next.Text.LastIndexOf('<'));
                        }

                        // If the second subtitle (next) starts with a dialog ("-"):
                        string dialogMarker = string.Empty;
                        if (firstWord.StartsWith('-'))
                        {
                            // Save the dialog marker ("-" or "- ").
                            dialogMarker = firstWord.StartsWith("- ", StringComparison.Ordinal) ? "- " : "-";

                            // Remove the dialog marker from the first word.
                            firstWord = firstWord.Remove(0, dialogMarker.Length);
                        }

                        // If the second subtitle starts with "...":
                        bool nextSubtitleStartsWithEllipsis = firstWord.StartsWith("...", StringComparison.Ordinal);
                        if (nextSubtitleStartsWithEllipsis)
                        {
                            // Remove "..." from the beginning of first word.
                            firstWord = firstWord.TrimStart('.');
                        }

                        // Add positionTag + startTag + dialogMarker + "..." + text to 'next'.
                        if (idx > 0)
                        {
                            next.Text = positionTag + startTag + dialogMarker + (nextSubtitleStartsWithEllipsis ? "..." : string.Empty) + next.Text.Trim();
                        }

                        // Add text + firstWord + "..." + endTag to First line.
                        p.Text = (idx == 0 ? startTag : string.Empty) + p.Text.Trim() + " " + firstWord.Trim() + (idx > 0 && firstSubtitleEndsWithEllipsis ? "..." : string.Empty) + endTag;

                        // Now, idx will hold the position of the last line break, if any.
                        idx = p.Text.LastIndexOf(Environment.NewLine, StringComparison.Ordinal);

                        // Check if the last line of the subtitle (the one that now contains the moved word) is longer than SubtitleLineMaximumLength.
                        if (HtmlUtil.RemoveHtmlTags(p.Text.Substring(idx > 0 ? idx + Environment.NewLine.Length : 0)).Length > Configuration.Settings.General.SubtitleLineMaximumLength)
                        {
                            p.Text = Utilities.AutoBreakLine(p.Text);
                        }
                    }

                    this.SubtitleListview1.SetText(firstIndex, p.Text);
                    this.SubtitleListview1.SetText(firstIndex + 1, next.Text);
                    this.textBoxListViewText.Text = p.Text;
                }
            }
        }

        /// <summary>
        /// The move last word down.
        /// </summary>
        private void MoveLastWordDown()
        {
            int firstIndex = this.FirstSelectedIndex;
            if (firstIndex >= 0)
            {
                var p = this._subtitle.GetParagraphOrDefault(firstIndex);
                var next = this._subtitle.GetParagraphOrDefault(firstIndex + 1);
                if (p != null && next != null)
                {
                    string s = p.Text.Trim();
                    int idx = s.LastIndexOf(' ');
                    if (idx > 0 || s.Length > 0)
                    {
                        // A last word was found or the first subtitle is not empty (has one word).
                        // Undo
                        this.MakeHistoryForUndo(this._language.BeforeLineUpdatedInListView);

                        // Define lastWord. If idx > 0, there is a last word.
                        // If not, lastWord is the whole text of the first subtitle.
                        string lastWord = idx > 0 ? s.Substring(idx).Trim() : p.Text;

                        // If lastWord contains a line break, it has two words.
                        if (lastWord.Contains(Environment.NewLine))
                        {
                            // Redefine lastWord and idx.
                            lastWord = lastWord.Substring(lastWord.LastIndexOf(Environment.NewLine, StringComparison.Ordinal));
                            idx = s.LastIndexOf(Environment.NewLine, StringComparison.Ordinal);
                        }

                        // Remove last word from the first subtitle.
                        p.Text = idx > 0 ? s.Substring(0, idx).Trim() : string.Empty;

                        // If the first subtitle ends with a tag (</i>):
                        string endTag = string.Empty;
                        if (lastWord.EndsWith('>') && lastWord.Contains('<'))
                        {
                            // Save the end tag.
                            endTag = lastWord.Substring(lastWord.LastIndexOf('<'), lastWord.Length - lastWord.LastIndexOf('<'));

                            // Remove the end tag from the last word.
                            lastWord = lastWord.Remove(lastWord.LastIndexOf('<'));
                        }

                        // If the first subtitle ends with "...":
                        bool firstSubtitleEndsWithEllipsis = lastWord.EndsWith("...", StringComparison.Ordinal);
                        if (firstSubtitleEndsWithEllipsis)
                        {
                            // Remove "..." from the last word.
                            lastWord = lastWord.TrimEnd('.');
                        }

                        // If the second subtitle (next) starts with a position tag, like {\an8}:
                        string positionTag = string.Empty;
                        if (next.Text.StartsWith('{') && next.Text.Contains('}'))
                        {
                            // Save the start tag.
                            positionTag = next.Text.Substring(next.Text.IndexOf('{'), next.Text.IndexOf('}') + 1);

                            // Remove the position tag from next subtitle.
                            next.Text = next.Text.Remove(0, next.Text.IndexOf('}') + 1);
                        }

                        // If the second subtitle (next) starts with a tag:
                        string startTag = string.Empty;
                        if (next.Text.StartsWith('<') && next.Text.Contains('>'))
                        {
                            // Save the start tag.
                            startTag = next.Text.Substring(next.Text.IndexOf('<'), next.Text.IndexOf('>') + 1);

                            // Remove the start tag from next subtitle.
                            next.Text = next.Text.Remove(0, next.Text.IndexOf('>') + 1);
                        }

                        // If the second subtitle (next) starts with a dialog ("-"):
                        string dialogMarker = string.Empty;
                        if (next.Text.StartsWith('-'))
                        {
                            // Save the dialog marker ("-" or "- ").
                            dialogMarker = next.Text.StartsWith("- ", StringComparison.Ordinal) ? "- " : "-";

                            // Remove the dialog marker from the next subtitle.
                            next.Text = next.Text.Remove(0, dialogMarker.Length);
                        }

                        // If the second subtitle starts with "...":
                        bool nextSubtitleStartsWithEllipsis = next.Text.StartsWith("...");
                        if (nextSubtitleStartsWithEllipsis)
                        {
                            // Remove "..." from the beginning of 'next'.
                            next.Text = next.Text.TrimStart('.');
                        }

                        // Add text + "..." + endTag to first subtitle.
                        if (idx > 0)
                        {
                            p.Text = p.Text + (firstSubtitleEndsWithEllipsis ? "..." : string.Empty) + endTag;
                        }

                        // Add positionTag + startTag + dialogMarker + "..." + lastWord to 'next'.
                        next.Text = (idx > 0 ? positionTag : string.Empty) + (idx > 0 ? startTag : string.Empty) + dialogMarker + (nextSubtitleStartsWithEllipsis && idx > 0 ? "..." : string.Empty) + lastWord.Trim() + " " + next.Text.Trim();

                        // Now, idx will hold the position of the first line break, if any.
                        idx = next.Text.IndexOf(Environment.NewLine, StringComparison.Ordinal);

                        // Check if the first line of the next subtitle (the one that now contains the moved word) is longer than SubtitleLineMaximumLength.
                        if (HtmlUtil.RemoveHtmlTags(next.Text.Substring(0, idx > 0 ? idx : next.Text.Length)).Length > Configuration.Settings.General.SubtitleLineMaximumLength)
                        {
                            next.Text = Utilities.AutoBreakLine(next.Text);
                        }
                    }

                    this.SubtitleListview1.SetText(firstIndex, p.Text);
                    this.SubtitleListview1.SetText(firstIndex + 1, next.Text);
                    this.textBoxListViewText.Text = p.Text;
                }
            }
        }

        /// <summary>
        /// The make auto duration selected lines.
        /// </summary>
        private void MakeAutoDurationSelectedLines()
        {
            if (this._subtitle.Paragraphs.Count == 0)
            {
                return;
            }

            if (this.SubtitleListview1.SelectedItems.Count == 1)
            {
                this.MakeAutoDuration();
                return;
            }

            if (this.SubtitleListview1.SelectedItems.Count > 1)
            {
                this.MakeHistoryForUndo(this._language.BeforeAutoDuration);
                foreach (int index in this.SubtitleListview1.SelectedIndices)
                {
                    var p = this._subtitle.GetParagraphOrDefault(index);
                    if (p == null)
                    {
                        return;
                    }

                    double duration = Utilities.GetOptimalDisplayMilliseconds(this.textBoxListViewText.Text);
                    var next = this._subtitle.GetParagraphOrDefault(index + 1);
                    if (next != null && p.StartTime.TotalMilliseconds + duration + Configuration.Settings.General.MinimumMillisecondsBetweenLines > next.StartTime.TotalMilliseconds)
                    {
                        duration = next.StartTime.TotalMilliseconds - p.StartTime.TotalMilliseconds - Configuration.Settings.General.MinimumMillisecondsBetweenLines;
                    }

                    if (duration > 500)
                    {
                        p.EndTime.TotalMilliseconds = p.StartTime.TotalMilliseconds + duration;
                    }
                }

                this.SaveSubtitleListviewIndices();
                this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                this.RestoreSubtitleListviewIndices();
                this.RefreshSelectedParagraph();
            }
        }

        /// <summary>
        /// The make auto duration.
        /// </summary>
        private void MakeAutoDuration()
        {
            int i = this._subtitleListViewIndex;
            var p = this._subtitle.GetParagraphOrDefault(i);
            if (p == null)
            {
                return;
            }

            double duration = Utilities.GetOptimalDisplayMilliseconds(this.textBoxListViewText.Text);
            var next = this._subtitle.GetParagraphOrDefault(i + 1);
            if (next != null && p.StartTime.TotalMilliseconds + duration + Configuration.Settings.General.MinimumMillisecondsBetweenLines > next.StartTime.TotalMilliseconds)
            {
                duration = next.StartTime.TotalMilliseconds - p.StartTime.TotalMilliseconds - Configuration.Settings.General.MinimumMillisecondsBetweenLines;
                if (duration < 400)
                {
                    return;
                }
            }

            this.SetDurationInSeconds(duration / TimeCode.BaseUnit);

            p.EndTime.TotalMilliseconds = p.StartTime.TotalMilliseconds + duration;
            this.SubtitleListview1.SetDuration(i, p);
        }

        /// <summary>
        /// The split line tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void SplitLineToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.SplitSelectedParagraph(null, null);
        }

        /// <summary>
        /// The split selected paragraph.
        /// </summary>
        /// <param name="splitSeconds">
        /// The split seconds.
        /// </param>
        /// <param name="textIndex">
        /// The text index.
        /// </param>
        private void SplitSelectedParagraph(double? splitSeconds, int? textIndex)
        {
            string language = Utilities.AutoDetectGoogleLanguage(this._subtitle);

            int? alternateTextIndex = null;
            if (this.textBoxListViewTextAlternate.Focused)
            {
                alternateTextIndex = textIndex;
                textIndex = null;
            }

            if (this._subtitle.Paragraphs.Count > 0 && this.SubtitleListview1.SelectedItems.Count > 0)
            {
                this.SubtitleListview1.SelectedIndexChanged -= this.SubtitleListview1_SelectedIndexChanged;
                this.MakeHistoryForUndo(this._language.BeforeSplitLine);

                int firstSelectedIndex = this.SubtitleListview1.SelectedItems[0].Index;

                var currentParagraph = this._subtitle.GetParagraphOrDefault(firstSelectedIndex);
                var newParagraph = new Paragraph(currentParagraph);

                currentParagraph.Text = currentParagraph.Text.Replace("< /i>", "</i>");
                currentParagraph.Text = currentParagraph.Text.Replace("< i>", "<i>");
                string oldText = currentParagraph.Text;
                var lines = currentParagraph.Text.SplitToLines();
                if (textIndex != null && textIndex.Value > 2 && textIndex.Value < oldText.Length - 2)
                {
                    string a = oldText.Substring(0, textIndex.Value).Trim();
                    string b = oldText.Substring(textIndex.Value).Trim();
                    string aTrimmed = a.TrimEnd('"').TrimEnd().TrimEnd('\'').TrimEnd();
                    string bTrimmed = b.TrimEnd('"').TrimEnd().TrimEnd('\'').TrimEnd();
                    if (oldText.TrimStart().StartsWith("<i>", StringComparison.Ordinal) && oldText.TrimEnd().EndsWith("</i>", StringComparison.Ordinal) && Utilities.CountTagInText(oldText, "<i>") == 1 && Utilities.CountTagInText(oldText, "</i>") == 1)
                    {
                        a = a + "</i>";
                        b = "<i>" + b;
                    }
                    else if (oldText.TrimStart().StartsWith("<b>", StringComparison.Ordinal) && oldText.TrimEnd().EndsWith("</b>", StringComparison.Ordinal) && Utilities.CountTagInText(oldText, "<b>") == 1 && Utilities.CountTagInText(oldText, "</b>") == 1)
                    {
                        a = a + "</b>";
                        b = "<b>" + b;
                    }
                    else if (a.StartsWith('-') && (aTrimmed.EndsWith('.') || aTrimmed.EndsWith('!') || aTrimmed.EndsWith('?')) && b.StartsWith('-') && (bTrimmed.EndsWith('.') || bTrimmed.EndsWith('!') || bTrimmed.EndsWith('?')))
                    {
                        a = a.TrimStart('-').TrimStart();
                        b = b.TrimStart('-').TrimStart();
                    }
                    else if (a.StartsWith("<i>-", StringComparison.Ordinal) && (aTrimmed.EndsWith(".</i>", StringComparison.Ordinal) || aTrimmed.EndsWith("!</i>", StringComparison.Ordinal) || aTrimmed.EndsWith("?</i>", StringComparison.Ordinal)) && b.StartsWith("<i>-", StringComparison.Ordinal) && (bTrimmed.EndsWith(".</i>", StringComparison.Ordinal) || bTrimmed.EndsWith("!</i>", StringComparison.Ordinal) || bTrimmed.EndsWith("?</i>", StringComparison.Ordinal)))
                    {
                        a = a.Remove(3, 1).Replace("  ", " ");
                        b = b.Remove(3, 1).Replace("  ", " ");
                    }
                    else if (a.StartsWith('-') && (aTrimmed.EndsWith('.') || aTrimmed.EndsWith('!') || aTrimmed.EndsWith('?')) && b.StartsWith("<i>-") && (bTrimmed.EndsWith(".</i>") || bTrimmed.EndsWith("!</i>") || bTrimmed.EndsWith("?</i>")))
                    {
                        a = a.TrimStart('-').TrimStart();
                        b = b.Remove(3, 1).Replace("  ", " ").Trim();
                    }
                    else if (a.StartsWith("<i>-", StringComparison.Ordinal) && (aTrimmed.EndsWith(".</i>", StringComparison.Ordinal) || aTrimmed.EndsWith("!</i>", StringComparison.Ordinal) || aTrimmed.EndsWith("?</i>", StringComparison.Ordinal)) && b.StartsWith('-') && (bTrimmed.EndsWith('.') || bTrimmed.EndsWith('!') || bTrimmed.EndsWith('?')))
                    {
                        a = a.Remove(3, 1).Replace("  ", " ").Trim();
                        b = b.TrimStart('-').TrimStart();
                    }

                    currentParagraph.Text = Utilities.AutoBreakLine(a, language);
                    newParagraph.Text = Utilities.AutoBreakLine(b, language);
                }
                else
                {
                    var l0 = string.Empty;
                    if (lines.Length > 0)
                    {
                        l0 = lines[0].Trim().TrimEnd('"').TrimEnd('\'').Trim();
                    }

                    if (lines.Length == 2 && (l0.EndsWith('.') || l0.EndsWith('!') || l0.EndsWith('?')))
                    {
                        currentParagraph.Text = Utilities.AutoBreakLine(lines[0], language);
                        newParagraph.Text = Utilities.AutoBreakLine(lines[1], language);
                        if (lines[0].Length > 2 && lines[0][0] == '-' && lines[0][1] != '-' && lines[1].Length > 2 && lines[1][0] == '-' && lines[1][1] != '-')
                        {
                            currentParagraph.Text = currentParagraph.Text.TrimStart('-').Trim();
                            newParagraph.Text = newParagraph.Text.TrimStart('-').Trim();
                        }

                        if (currentParagraph.Text.StartsWith("<i>", StringComparison.Ordinal) && !currentParagraph.Text.Contains("</i>") && newParagraph.Text.EndsWith("</i>", StringComparison.Ordinal) && !newParagraph.Text.Contains("<i>"))
                        {
                            currentParagraph.Text = currentParagraph.Text + "</i>";
                            newParagraph.Text = "<i>" + newParagraph.Text;
                        }

                        if (currentParagraph.Text.StartsWith("<b>", StringComparison.Ordinal) && !currentParagraph.Text.Contains("</b>") && newParagraph.Text.EndsWith("</b>", StringComparison.Ordinal) && !newParagraph.Text.Contains("<b>"))
                        {
                            currentParagraph.Text = currentParagraph.Text + "</b>";
                            newParagraph.Text = "<b>" + newParagraph.Text;
                        }

                        if (currentParagraph.Text.StartsWith("<i>-", StringComparison.Ordinal) && (currentParagraph.Text.EndsWith(".</i>", StringComparison.Ordinal) || currentParagraph.Text.EndsWith("!</i>", StringComparison.Ordinal)) && newParagraph.Text.StartsWith("<i>-", StringComparison.Ordinal) && (newParagraph.Text.EndsWith(".</i>") || newParagraph.Text.EndsWith("!</i>")))
                        {
                            currentParagraph.Text = currentParagraph.Text.Remove(3, 1);
                            newParagraph.Text = newParagraph.Text.Remove(3, 1);
                        }
                        else if (lines[0].StartsWith('-') && (lines[0].EndsWith('.') || lines[0].EndsWith('!') || lines[0].EndsWith('?')) && lines[1].StartsWith("<i>-", StringComparison.Ordinal) && (lines[1].EndsWith(".</i>", StringComparison.Ordinal) || lines[1].EndsWith("!</i>", StringComparison.Ordinal) || lines[1].EndsWith("?</i>", StringComparison.Ordinal)))
                        {
                            currentParagraph.Text = lines[0].TrimStart('-').TrimStart();
                            newParagraph.Text = lines[1].Remove(3, 1).Replace("  ", " ").Trim();
                        }
                    }
                    else if (lines.Length == 2 && (lines[0].EndsWith(".</i>", StringComparison.Ordinal) || lines[0].EndsWith("!</i>", StringComparison.Ordinal) || lines[0].EndsWith("?</i>", StringComparison.Ordinal)))
                    {
                        currentParagraph.Text = Utilities.AutoBreakLine(lines[0], language);
                        newParagraph.Text = Utilities.AutoBreakLine(lines[1], language);
                        if (lines[0].Length > 5 && lines[0].StartsWith("<i>-", StringComparison.Ordinal) && lines[0][4] != '-' && lines[1].Length > 5 && lines[1].StartsWith("<i>-", StringComparison.Ordinal) && lines[1][4] != '-')
                        {
                            currentParagraph.Text = currentParagraph.Text.Remove(3, 1);
                            if (currentParagraph.Text[3] == ' ')
                            {
                                currentParagraph.Text = currentParagraph.Text.Remove(3, 1);
                            }

                            newParagraph.Text = newParagraph.Text.Remove(3, 1);
                            if (newParagraph.Text[3] == ' ')
                            {
                                newParagraph.Text = newParagraph.Text.Remove(3, 1);
                            }
                        }
                        else if (lines[0].StartsWith('-') && (lines[0].EndsWith('.') || lines[0].EndsWith('!') || lines[0].EndsWith('?')) && lines[1].StartsWith("<i>-", StringComparison.Ordinal) && (lines[1].EndsWith(".</i>", StringComparison.Ordinal) || lines[1].EndsWith("!</i>", StringComparison.Ordinal) || lines[1].EndsWith("?</i>", StringComparison.Ordinal)))
                        {
                            currentParagraph.Text = lines[0].TrimStart('-').TrimStart();
                            newParagraph.Text = lines[1].Remove(3, 1).Replace("  ", " ").Trim();
                        }
                        else if (lines[0].StartsWith("<i>-", StringComparison.Ordinal) && (lines[0].EndsWith(".</i>", StringComparison.Ordinal) || lines[0].EndsWith("!</i>", StringComparison.Ordinal) || lines[0].EndsWith("?</i>", StringComparison.Ordinal)) && lines[1].StartsWith('-') && (lines[1].EndsWith('.') || lines[1].EndsWith('!') || lines[1].EndsWith('?')))
                        {
                            currentParagraph.Text = lines[0].Remove(3, 1).Replace("  ", " ").Trim();
                            newParagraph.Text = lines[1].TrimStart('-').TrimStart();
                        }
                    }
                    else
                    {
                        string s = currentParagraph.Text;
                        var arr = HtmlUtil.RemoveHtmlTags(s, true).Replace(Environment.NewLine, "\n").Split('\n');
                        if (arr.Length != 2 || arr[0].Length > Configuration.Settings.General.SubtitleLineMaximumLength || arr[1].Length > Configuration.Settings.General.SubtitleLineMaximumLength)
                        {
                            if (arr.Length == 2 && arr[0].StartsWith('-') && arr[1].StartsWith('-'))
                            {
                                if (lines[0].StartsWith("<i>-"))
                                {
                                    lines[0] = "<i>" + lines[0].Remove(0, 4).TrimStart();
                                }

                                lines[0] = lines[0].TrimStart('-').TrimStart();
                                lines[1] = lines[1].TrimStart('-').TrimStart();
                                s = lines[0] + Environment.NewLine + lines[1];
                            }
                            else
                            {
                                s = Utilities.AutoBreakLine(currentParagraph.Text, 5, Configuration.Settings.Tools.MergeLinesShorterThan, language);
                            }
                        }

                        lines = s.SplitToLines();
                        if (lines.Length == 1)
                        {
                            s = Utilities.AutoBreakLine(currentParagraph.Text, 3, 20, language);
                            lines = s.SplitToLines();
                        }

                        if (lines.Length == 1)
                        {
                            s = Utilities.AutoBreakLine(currentParagraph.Text, 3, 18, language);
                            lines = s.SplitToLines();
                        }

                        if (lines.Length == 1)
                        {
                            s = Utilities.AutoBreakLine(currentParagraph.Text, 3, 15, language);
                            lines = s.SplitToLines();
                        }

                        if (lines.Length == 2)
                        {
                            if (Utilities.CountTagInText(s, "<i>") == 1 && lines[0].StartsWith("<i>", StringComparison.Ordinal) && lines[1].EndsWith("</i>", StringComparison.Ordinal))
                            {
                                lines[0] += "</i>";
                                lines[1] = "<i>" + lines[1];
                            }

                            currentParagraph.Text = Utilities.AutoBreakLine(lines[0], language);
                            newParagraph.Text = Utilities.AutoBreakLine(lines[1], language);
                        }
                        else if (lines.Length == 1)
                        {
                            currentParagraph.Text = Utilities.AutoBreakLine(lines[0], language);
                            newParagraph.Text = string.Empty;
                        }

                        if (currentParagraph.Text.StartsWith("<i>", StringComparison.Ordinal) && !currentParagraph.Text.Contains("</i>", StringComparison.Ordinal) && newParagraph.Text.EndsWith("</i>", StringComparison.Ordinal) && !newParagraph.Text.Contains("<i>", StringComparison.Ordinal))
                        {
                            currentParagraph.Text = currentParagraph.Text + "</i>";
                            newParagraph.Text = "<i>" + newParagraph.Text;
                        }

                        if (currentParagraph.Text.StartsWith("<b>", StringComparison.Ordinal) && !currentParagraph.Text.Contains("</b>", StringComparison.Ordinal) && newParagraph.Text.EndsWith("</b>", StringComparison.Ordinal) && !newParagraph.Text.Contains("<b>"))
                        {
                            currentParagraph.Text = currentParagraph.Text + "</b>";
                            newParagraph.Text = "<b>" + newParagraph.Text;
                        }

                        if (currentParagraph.Text.StartsWith("<i>-", StringComparison.Ordinal) && (currentParagraph.Text.EndsWith(".</i>", StringComparison.Ordinal) || currentParagraph.Text.EndsWith("!</i>", StringComparison.Ordinal)) && newParagraph.Text.StartsWith("<i>-", StringComparison.Ordinal) && (newParagraph.Text.EndsWith(".</i>", StringComparison.Ordinal) || newParagraph.Text.EndsWith("!</i>", StringComparison.Ordinal)))
                        {
                            currentParagraph.Text = currentParagraph.Text.Remove(3, 1);
                            newParagraph.Text = newParagraph.Text.Remove(3, 1);
                        }
                    }
                }

                if (currentParagraph.Text.StartsWith("<i> ", StringComparison.Ordinal))
                {
                    currentParagraph.Text = currentParagraph.Text.Remove(3, 1);
                }

                if (newParagraph.Text.StartsWith("<i> ", StringComparison.Ordinal))
                {
                    newParagraph.Text = newParagraph.Text.Remove(3, 1);
                }

                double middle = currentParagraph.StartTime.TotalMilliseconds + (currentParagraph.Duration.TotalMilliseconds / 2);
                if (!string.IsNullOrWhiteSpace(HtmlUtil.RemoveHtmlTags(oldText)))
                {
                    var startFactor = (double)HtmlUtil.RemoveHtmlTags(currentParagraph.Text).Length / HtmlUtil.RemoveHtmlTags(oldText).Length;
                    if (startFactor < 0.25)
                    {
                        startFactor = 0.25;
                    }

                    if (startFactor > 0.75)
                    {
                        startFactor = 0.75;
                    }

                    middle = currentParagraph.StartTime.TotalMilliseconds + (currentParagraph.Duration.TotalMilliseconds * startFactor);
                }

                if (splitSeconds.HasValue && splitSeconds.Value > (currentParagraph.StartTime.TotalSeconds + 0.2) && splitSeconds.Value < (currentParagraph.EndTime.TotalSeconds - 0.2))
                {
                    middle = splitSeconds.Value * TimeCode.BaseUnit;
                }

                newParagraph.EndTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds;
                currentParagraph.EndTime.TotalMilliseconds = middle;
                newParagraph.StartTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds + 1;
                if (Configuration.Settings.General.MinimumMillisecondsBetweenLines > 0)
                {
                    var next = this._subtitle.GetParagraphOrDefault(firstSelectedIndex + 1);
                    if (next == null || next.StartTime.TotalMilliseconds > newParagraph.EndTime.TotalMilliseconds + Configuration.Settings.General.MinimumMillisecondsBetweenLines + Configuration.Settings.General.MinimumMillisecondsBetweenLines)
                    {
                        newParagraph.StartTime.TotalMilliseconds += Configuration.Settings.General.MinimumMillisecondsBetweenLines;
                        newParagraph.EndTime.TotalMilliseconds += Configuration.Settings.General.MinimumMillisecondsBetweenLines;
                    }
                    else
                    {
                        newParagraph.StartTime.TotalMilliseconds += Configuration.Settings.General.MinimumMillisecondsBetweenLines;
                    }
                }

                if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && this._subtitleAlternate != null && this._subtitleAlternate.Paragraphs.Count > 0)
                {
                    var originalCurrent = Utilities.GetOriginalParagraph(firstSelectedIndex, currentParagraph, this._subtitleAlternate.Paragraphs);
                    if (originalCurrent != null)
                    {
                        string languageOriginal = Utilities.AutoDetectGoogleLanguage(this._subtitleAlternate);

                        originalCurrent.EndTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds;
                        var originalNew = new Paragraph(newParagraph);

                        lines = originalCurrent.Text.SplitToLines();

                        oldText = originalCurrent.Text;
                        if (alternateTextIndex != null && alternateTextIndex.Value > 2 && alternateTextIndex.Value < oldText.Length - 2)
                        {
                            originalCurrent.Text = Utilities.AutoBreakLine(oldText.Substring(0, alternateTextIndex.Value).Trim(), language);
                            originalNew.Text = Utilities.AutoBreakLine(oldText.Substring(alternateTextIndex.Value).Trim(), language);
                            if (originalCurrent.Text.StartsWith("<i>", StringComparison.Ordinal) && !originalCurrent.Text.Contains("</i>", StringComparison.Ordinal) && originalNew.Text.EndsWith("</i>", StringComparison.Ordinal) && !originalNew.Text.Contains("<i>", StringComparison.Ordinal))
                            {
                                originalCurrent.Text = originalCurrent.Text + "</i>";
                                originalNew.Text = "<i>" + originalNew.Text;
                            }

                            if (originalCurrent.Text.StartsWith("<b>", StringComparison.Ordinal) && !originalCurrent.Text.Contains("</b>") && originalNew.Text.EndsWith("</b>", StringComparison.Ordinal) && !originalNew.Text.Contains("<b>"))
                            {
                                originalCurrent.Text = originalCurrent.Text + "</b>";
                                originalNew.Text = "<b>" + originalNew.Text;
                            }

                            if (originalCurrent.Text.StartsWith('-') && (originalCurrent.Text.EndsWith('.') || originalCurrent.Text.EndsWith('!')) && originalNew.Text.StartsWith('-') && (originalNew.Text.EndsWith('.') || originalNew.Text.EndsWith('!')))
                            {
                                originalCurrent.Text = originalCurrent.Text.Remove(0, 1).Trim();
                                originalNew.Text = originalNew.Text.Remove(0, 1).Trim();
                            }

                            if (originalCurrent.Text.StartsWith("<i>-", StringComparison.Ordinal) && (originalCurrent.Text.EndsWith(".</i>", StringComparison.Ordinal) || originalCurrent.Text.EndsWith("!</i>", StringComparison.Ordinal)) && originalNew.Text.StartsWith("<i>-", StringComparison.Ordinal) && (originalNew.Text.EndsWith(".</i>", StringComparison.Ordinal) || originalNew.Text.EndsWith("!</i>", StringComparison.Ordinal)))
                            {
                                originalCurrent.Text = originalCurrent.Text.Remove(3, 1);
                                originalNew.Text = originalNew.Text.Remove(3, 1);
                            }

                            if (originalCurrent.Text.StartsWith("<b>-", StringComparison.Ordinal) && (originalCurrent.Text.EndsWith(".</b>", StringComparison.Ordinal) || originalCurrent.Text.EndsWith("!</b>", StringComparison.Ordinal)) && originalNew.Text.StartsWith("<b>-", StringComparison.Ordinal) && (originalNew.Text.EndsWith(".</b>", StringComparison.Ordinal) || originalNew.Text.EndsWith("!</b>", StringComparison.Ordinal)))
                            {
                                originalCurrent.Text = originalCurrent.Text.Remove(3, 1);
                                originalNew.Text = originalNew.Text.Remove(3, 1);
                            }

                            lines = new string[0];
                        }
                        else if (lines.Length == 2 && (lines[0].EndsWith('.') || lines[0].EndsWith('!') || lines[0].EndsWith('?')))
                        {
                            string a = lines[0].Trim();
                            string b = lines[1].Trim();
                            if (oldText.TrimStart().StartsWith("<i>", StringComparison.Ordinal) && oldText.TrimEnd().EndsWith("</i>", StringComparison.Ordinal) && Utilities.CountTagInText(oldText, "<i>") == 1 && Utilities.CountTagInText(oldText, "</i>") == 1)
                            {
                                a = a + "</i>";
                                b = "<i>" + b;
                            }

                            if (oldText.TrimStart().StartsWith("<b>", StringComparison.Ordinal) && oldText.TrimEnd().EndsWith("</b>", StringComparison.Ordinal) && Utilities.CountTagInText(oldText, "<b>") == 1 && Utilities.CountTagInText(oldText, "</b>") == 1)
                            {
                                a = a + "</b>";
                                b = "<b>" + b;
                            }

                            if (a.StartsWith('-') && (a.EndsWith('.') || a.EndsWith('!') || a.EndsWith('?')) && b.StartsWith('-') && (b.EndsWith('.') || b.EndsWith('!') || b.EndsWith('?')))
                            {
                                a = a.TrimStart('-').TrimStart();
                                b = b.TrimStart('-').TrimStart();
                            }

                            if (a.StartsWith("<i>-", StringComparison.Ordinal) && (a.EndsWith(".</i>", StringComparison.Ordinal) || a.EndsWith("!</i>", StringComparison.Ordinal) || a.EndsWith("?</i>", StringComparison.Ordinal)) && b.StartsWith("<i>-", StringComparison.Ordinal) && (b.EndsWith(".</i>", StringComparison.Ordinal) || b.EndsWith("!</i>", StringComparison.Ordinal) || b.EndsWith("?</i>", StringComparison.Ordinal)))
                            {
                                a = a.Remove(3, 1).Replace("  ", " ");
                                b = b.Remove(3, 1).Replace("  ", " ");
                            }

                            lines[0] = a;
                            lines[1] = b;
                            originalCurrent.Text = Utilities.AutoBreakLine(a);
                            originalNew.Text = Utilities.AutoBreakLine(b);
                        }
                        else
                        {
                            string s = Utilities.AutoBreakLine(originalCurrent.Text, 5, Configuration.Settings.Tools.MergeLinesShorterThan, languageOriginal);
                            lines = s.SplitToLines();
                        }

                        if (lines.Length == 1)
                        {
                            string s = Utilities.AutoBreakLine(lines[0], 3, 20, languageOriginal);
                            lines = s.SplitToLines();
                        }

                        if (lines.Length == 1)
                        {
                            string s = Utilities.AutoBreakLine(lines[0], 3, 18, languageOriginal);
                            lines = s.SplitToLines();
                        }

                        if (lines.Length == 1)
                        {
                            string s = Utilities.AutoBreakLine(lines[0], 3, 15, languageOriginal);
                            lines = s.SplitToLines();
                        }

                        if (lines.Length == 2)
                        {
                            string a = lines[0].Trim();
                            string b = lines[1].Trim();
                            if (oldText.TrimStart().StartsWith("<i>", StringComparison.Ordinal) && oldText.TrimEnd().EndsWith("</i>", StringComparison.Ordinal) && Utilities.CountTagInText(oldText, "<i>") == 1 && Utilities.CountTagInText(oldText, "</i>") == 1)
                            {
                                a = a + "</i>";
                                b = "<i>" + b;
                            }

                            if (oldText.TrimStart().StartsWith("<b>", StringComparison.Ordinal) && oldText.TrimEnd().EndsWith("</b>", StringComparison.Ordinal) && Utilities.CountTagInText(oldText, "<b>") == 1 && Utilities.CountTagInText(oldText, "</b>") == 1)
                            {
                                a = a + "</b>";
                                b = "<b>" + b;
                            }

                            if (a.StartsWith('-') && (a.EndsWith('.') || a.EndsWith('!') || a.EndsWith('?')) && b.StartsWith('-') && (b.EndsWith('.') || b.EndsWith('!') || b.EndsWith('?')))
                            {
                                a = a.TrimStart('-').TrimStart();
                                b = b.TrimStart('-').TrimStart();
                            }

                            if (a.StartsWith("<i>-", StringComparison.Ordinal) && (a.EndsWith(".</i>", StringComparison.Ordinal) || a.EndsWith("!</i>", StringComparison.Ordinal) || a.EndsWith("?</i>", StringComparison.Ordinal)) && b.StartsWith("<i>-", StringComparison.Ordinal) && (b.EndsWith(".</i>", StringComparison.Ordinal) || b.EndsWith("!</i>", StringComparison.Ordinal) || b.EndsWith("?</i>", StringComparison.Ordinal)))
                            {
                                a = a.Remove(3, 1).Replace("  ", " ");
                                b = b.Remove(3, 1).Replace("  ", " ");
                            }

                            lines[0] = a;
                            lines[1] = b;

                            originalCurrent.Text = Utilities.AutoBreakLine(lines[0]);
                            originalNew.Text = Utilities.AutoBreakLine(lines[1]);
                        }
                        else if (lines.Length == 1)
                        {
                            originalNew.Text = string.Empty;
                        }

                        if (originalCurrent != null && originalNew != null)
                        {
                            if (originalCurrent.Text.StartsWith("<i> "))
                            {
                                originalCurrent.Text = originalCurrent.Text.Remove(3, 1);
                            }

                            if (originalNew.Text.StartsWith("<i> "))
                            {
                                originalCurrent.Text = originalCurrent.Text.Remove(3, 1);
                            }
                        }

                        this._subtitleAlternate.InsertParagraphInCorrectTimeOrder(originalNew);
                        this._subtitleAlternate.Renumber();
                    }
                }

                if (this._networkSession != null)
                {
                    this._networkSession.TimerStop();
                    this.SetDurationInSeconds(currentParagraph.Duration.TotalSeconds);
                    this._networkSession.UpdateLine(this._subtitle.GetIndex(currentParagraph), currentParagraph);
                    this.NetworkGetSendUpdates(new List<int>(), firstSelectedIndex + 1, newParagraph);
                }
                else
                {
                    if (this.GetCurrentSubtitleFormat().IsFrameBased)
                    {
                        if (currentParagraph != null)
                        {
                            currentParagraph.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                            currentParagraph.CalculateTimeCodesFromFrameNumbers(this.CurrentFrameRate);
                        }

                        newParagraph.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                        newParagraph.CalculateTimeCodesFromFrameNumbers(this.CurrentFrameRate);
                    }

                    this._subtitle.Paragraphs.Insert(firstSelectedIndex + 1, newParagraph);
                    this._subtitle.Renumber();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                }

                this.SubtitleListview1.SelectIndexAndEnsureVisible(firstSelectedIndex);
                this.ShowSource();
                this.ShowStatus(this._language.LineSplitted);
                this.SubtitleListview1.SelectedIndexChanged += this.SubtitleListview1_SelectedIndexChanged;
                this.RefreshSelectedParagraph();
                this.SubtitleListview1.SelectIndexAndEnsureVisible(firstSelectedIndex, true);
            }
        }

        /// <summary>
        /// The merge before tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void MergeBeforeToolStripMenuItemClick(object sender, EventArgs e)
        {
            string language = Utilities.AutoDetectGoogleLanguage(this._subtitle);
            if (this._subtitle.Paragraphs.Count > 0 && this.SubtitleListview1.SelectedItems.Count > 0)
            {
                int firstSelectedIndex = this.SubtitleListview1.SelectedItems[0].Index;

                var prevParagraph = this._subtitle.GetParagraphOrDefault(firstSelectedIndex - 1);
                var currentParagraph = this._subtitle.GetParagraphOrDefault(firstSelectedIndex);

                if (prevParagraph != null && currentParagraph != null)
                {
                    this.SubtitleListview1.SelectedIndexChanged -= this.SubtitleListview1_SelectedIndexChanged;
                    this.MakeHistoryForUndo(this._language.BeforeMergeLines);

                    if (this._subtitleAlternate != null)
                    {
                        var prevOriginal = Utilities.GetOriginalParagraph(firstSelectedIndex, prevParagraph, this._subtitleAlternate.Paragraphs);
                        var currentOriginal = Utilities.GetOriginalParagraph(firstSelectedIndex + 1, currentParagraph, this._subtitleAlternate.Paragraphs);

                        if (currentOriginal != null)
                        {
                            if (prevOriginal == null)
                            {
                                currentOriginal.StartTime = prevParagraph.StartTime;
                                currentOriginal.EndTime = currentParagraph.EndTime;
                            }
                            else
                            {
                                prevOriginal.Text = prevOriginal.Text.Replace(Environment.NewLine, " ");
                                prevOriginal.Text += Environment.NewLine + currentOriginal.Text.Replace(Environment.NewLine, " ");
                                prevOriginal.Text = ChangeAllLinesItalictoSingleItalic(prevOriginal.Text);
                                prevOriginal.Text = Utilities.AutoBreakLine(prevOriginal.Text);
                                prevOriginal.EndTime = currentOriginal.EndTime;
                                this._subtitleAlternate.Paragraphs.Remove(currentOriginal);
                            }

                            this._subtitleAlternate.Renumber();
                        }
                    }

                    prevParagraph.Text = prevParagraph.Text.Replace(Environment.NewLine, " ");
                    prevParagraph.Text += Environment.NewLine + currentParagraph.Text.Replace(Environment.NewLine, " ");
                    prevParagraph.Text = Utilities.AutoBreakLine(prevParagraph.Text, language);

                    // prevParagraph.EndTime.TotalMilliseconds = prevParagraph.EndTime.TotalMilliseconds + currentParagraph.Duration.TotalMilliseconds;
                    prevParagraph.EndTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds;

                    if (this._networkSession != null)
                    {
                        this._networkSession.TimerStop();
                        var deleteIndices = new List<int>();
                        deleteIndices.Add(this._subtitle.GetIndex(currentParagraph));
                        this.NetworkGetSendUpdates(deleteIndices, 0, null);
                    }
                    else
                    {
                        this._subtitle.Paragraphs.Remove(currentParagraph);
                        this._subtitle.Renumber();
                        this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                        this.SubtitleListview1.Items[firstSelectedIndex - 1].Selected = true;
                    }

                    this.SubtitleListview1.SelectIndexAndEnsureVisible(firstSelectedIndex - 1, true);
                    this.ShowSource();
                    this.ShowStatus(this._language.LinesMerged);
                    this.SubtitleListview1.SelectedIndexChanged += this.SubtitleListview1_SelectedIndexChanged;
                    this.RefreshSelectedParagraph();
                }
            }
        }

        /// <summary>
        /// The merge selected lines.
        /// </summary>
        private void MergeSelectedLines()
        {
            if (this._subtitle.Paragraphs.Count > 0 && this.SubtitleListview1.SelectedItems.Count > 1)
            {
                var sb = new StringBuilder();
                var deleteIndices = new List<int>();
                bool first = true;
                int firstIndex = 0;
                double durationMilliseconds = 0;
                int next = 0;
                foreach (int index in this.SubtitleListview1.SelectedIndices)
                {
                    if (first)
                    {
                        firstIndex = index;
                        next = index + 1;
                    }
                    else
                    {
                        deleteIndices.Add(index);
                        if (next != index)
                        {
                            return;
                        }

                        next++;
                    }

                    first = false;
                    sb.AppendLine(this._subtitle.Paragraphs[index].Text);
                    durationMilliseconds += this._subtitle.Paragraphs[index].Duration.TotalMilliseconds;
                }

                if (sb.Length > 200)
                {
                    return;
                }

                this.SubtitleListview1.SelectedIndexChanged -= this.SubtitleListview1_SelectedIndexChanged;
                this.MakeHistoryForUndo(this._language.BeforeMergeLines);

                var currentParagraph = this._subtitle.Paragraphs[firstIndex];
                string text = sb.ToString();
                text = HtmlUtil.FixInvalidItalicTags(text);
                text = ChangeAllLinesItalictoSingleItalic(text);
                text = Utilities.AutoBreakLine(text, Utilities.AutoDetectGoogleLanguage(this._subtitle));
                currentParagraph.Text = text;

                // display time
                currentParagraph.EndTime.TotalMilliseconds = currentParagraph.StartTime.TotalMilliseconds + durationMilliseconds;

                var nextParagraph = this._subtitle.GetParagraphOrDefault(next);
                if (nextParagraph != null && currentParagraph.EndTime.TotalMilliseconds > nextParagraph.StartTime.TotalMilliseconds && currentParagraph.StartTime.TotalMilliseconds < nextParagraph.StartTime.TotalMilliseconds)
                {
                    currentParagraph.EndTime.TotalMilliseconds = nextParagraph.StartTime.TotalMilliseconds - 1;
                }

                // original subtitle
                if (this._subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                {
                    var original = Utilities.GetOriginalParagraph(firstIndex, currentParagraph, this._subtitleAlternate.Paragraphs);
                    if (original != null)
                    {
                        var originalTexts = new StringBuilder();
                        originalTexts.Append(original.Text + " ");
                        for (int i = 0; i < deleteIndices.Count; i++)
                        {
                            var originalNext = Utilities.GetOriginalParagraph(deleteIndices[i], this._subtitle.Paragraphs[deleteIndices[i]], this._subtitleAlternate.Paragraphs);
                            if (originalNext != null)
                            {
                                originalTexts.Append(originalNext.Text + " ");
                            }
                        }

                        for (int i = deleteIndices.Count - 1; i >= 0; i--)
                        {
                            var originalNext = Utilities.GetOriginalParagraph(deleteIndices[i], this._subtitle.Paragraphs[deleteIndices[i]], this._subtitleAlternate.Paragraphs);
                            if (originalNext != null)
                            {
                                this._subtitleAlternate.Paragraphs.Remove(originalNext);
                            }
                        }

                        original.Text = originalTexts.ToString().Replace("  ", " ");
                        original.Text = original.Text.Replace(Environment.NewLine, " ");
                        original.Text = ChangeAllLinesItalictoSingleItalic(original.Text);
                        original.Text = Utilities.AutoBreakLine(original.Text);
                        original.EndTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds;
                        this._subtitleAlternate.Renumber();
                    }
                }

                if (this._networkSession != null)
                {
                    this._networkSession.TimerStop();
                    this._networkSession.UpdateLine(firstIndex, currentParagraph);
                    this.NetworkGetSendUpdates(deleteIndices, 0, null);
                }
                else
                {
                    for (int i = deleteIndices.Count - 1; i >= 0; i--)
                    {
                        this._subtitle.Paragraphs.RemoveAt(deleteIndices[i]);
                    }

                    this._subtitle.Renumber();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                }

                this.ShowSource();
                this.ShowStatus(this._language.LinesMerged);
                this.SubtitleListview1.SelectIndexAndEnsureVisible(firstIndex, true);
                this.SubtitleListview1.SelectedIndexChanged += this.SubtitleListview1_SelectedIndexChanged;
                this.RefreshSelectedParagraph();
            }
        }

        /// <summary>
        /// The change all lines italicto single italic.
        /// </summary>
        /// <param name="text">
        /// The text.
        /// </param>
        /// <returns>
        /// The <see cref="string"/>.
        /// </returns>
        private static string ChangeAllLinesItalictoSingleItalic(string text)
        {
            bool allLinesStartAndEndsWithItalic = text.Contains("<i>");
            foreach (var line in text.SplitToLines())
            {
                if (!line.TrimStart().StartsWith("<i>", StringComparison.Ordinal) || !line.TrimEnd().EndsWith("</i>", StringComparison.Ordinal))
                {
                    allLinesStartAndEndsWithItalic = false;
                }
            }

            if (allLinesStartAndEndsWithItalic)
            {
                text = HtmlUtil.RemoveOpenCloseTags(text, HtmlUtil.TagItalic).Trim();
                text = "<i>" + text + "</i>";
            }

            return text;
        }

        /// <summary>
        /// The merge after tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void MergeAfterToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (this._subtitle.Paragraphs.Count > 0 && this.SubtitleListview1.SelectedItems.Count > 0)
            {
                if (this.SubtitleListview1.SelectedItems.Count > 2)
                {
                    this.MergeSelectedLines();
                    return;
                }

                this.MergeWithLineAfter(false);
            }
        }

        /// <summary>
        /// The merge with line after.
        /// </summary>
        /// <param name="insertDash">
        /// The insert dash.
        /// </param>
        private void MergeWithLineAfter(bool insertDash)
        {
            int firstSelectedIndex = this.SubtitleListview1.SelectedItems[0].Index;

            var currentParagraph = this._subtitle.GetParagraphOrDefault(firstSelectedIndex);
            var nextParagraph = this._subtitle.GetParagraphOrDefault(firstSelectedIndex + 1);

            if (nextParagraph != null && currentParagraph != null)
            {
                this.SubtitleListview1.SelectedIndexChanged -= this.SubtitleListview1_SelectedIndexChanged;
                this.MakeHistoryForUndo(this._language.BeforeMergeLines);

                if (this._subtitleAlternate != null)
                {
                    var original = Utilities.GetOriginalParagraph(firstSelectedIndex, currentParagraph, this._subtitleAlternate.Paragraphs);
                    var originalNext = Utilities.GetOriginalParagraph(firstSelectedIndex + 1, nextParagraph, this._subtitleAlternate.Paragraphs);

                    if (originalNext != null)
                    {
                        if (original == null)
                        {
                            originalNext.StartTime.TotalMilliseconds = currentParagraph.StartTime.TotalMilliseconds;
                            originalNext.EndTime.TotalMilliseconds = nextParagraph.EndTime.TotalMilliseconds;
                        }
                        else
                        {
                            if (insertDash)
                            {
                                string s = Utilities.UnbreakLine(original.Text);
                                if (s.StartsWith('-') || s.StartsWith("<i>-"))
                                {
                                    original.Text = s;
                                }
                                else if (s.StartsWith("<i>"))
                                {
                                    original.Text = s.Insert(3, "- ");
                                }
                                else
                                {
                                    original.Text = "- " + s;
                                }

                                s = Utilities.UnbreakLine(originalNext.Text);
                                if (s.StartsWith('-') || s.StartsWith("<i>-"))
                                {
                                    original.Text += Environment.NewLine + s;
                                }
                                else if (s.StartsWith("<i>"))
                                {
                                    original.Text += Environment.NewLine + s.Insert(3, "- ");
                                }
                                else
                                {
                                    original.Text += Environment.NewLine + "- " + s;
                                }

                                original.Text = original.Text.Replace("</i>" + Environment.NewLine + "<i>", Environment.NewLine);
                            }
                            else
                            {
                                string old1 = original.Text;
                                string old2 = originalNext.Text;
                                original.Text = original.Text.Replace(Environment.NewLine, " ");
                                original.Text += Environment.NewLine + originalNext.Text.Replace(Environment.NewLine, " ");
                                original.Text = ChangeAllLinesItalictoSingleItalic(original.Text);

                                if (old1.Contains(Environment.NewLine) || old2.Contains(Environment.NewLine) || old1.Length > Configuration.Settings.General.SubtitleLineMaximumLength || old2.Length > Configuration.Settings.General.SubtitleLineMaximumLength)
                                {
                                    original.Text = Utilities.AutoBreakLine(original.Text, Utilities.AutoDetectGoogleLanguage(this._subtitleAlternate));
                                }

                                if (string.IsNullOrWhiteSpace(old1))
                                {
                                    original.Text = original.Text.TrimStart();
                                }

                                if (string.IsNullOrWhiteSpace(old2))
                                {
                                    original.Text = original.Text.TrimEnd();
                                }
                            }

                            original.EndTime = originalNext.EndTime;
                            this._subtitleAlternate.Paragraphs.Remove(originalNext);
                        }

                        this._subtitleAlternate.Renumber();
                    }
                }

                if (insertDash)
                {
                    string s = Utilities.UnbreakLine(currentParagraph.Text);
                    if (s.StartsWith('-') || s.StartsWith("<i>-"))
                    {
                        currentParagraph.Text = s;
                    }
                    else if (s.StartsWith("<i>"))
                    {
                        currentParagraph.Text = s.Insert(3, "- ");
                    }
                    else
                    {
                        currentParagraph.Text = "- " + s;
                    }

                    s = Utilities.UnbreakLine(nextParagraph.Text);
                    if (s.StartsWith('-') || s.StartsWith("<i>-"))
                    {
                        currentParagraph.Text += Environment.NewLine + s;
                    }
                    else if (s.StartsWith("<i>"))
                    {
                        currentParagraph.Text += Environment.NewLine + s.Insert(3, "- ");
                    }
                    else
                    {
                        currentParagraph.Text += Environment.NewLine + "- " + s;
                    }

                    currentParagraph.Text = currentParagraph.Text.Replace("</i>" + Environment.NewLine + "<i>", Environment.NewLine);
                }
                else
                {
                    string old1 = currentParagraph.Text;
                    string old2 = nextParagraph.Text;
                    currentParagraph.Text = currentParagraph.Text.Replace(Environment.NewLine, " ");
                    currentParagraph.Text += Environment.NewLine + nextParagraph.Text.Replace(Environment.NewLine, " ");
                    currentParagraph.Text = ChangeAllLinesItalictoSingleItalic(currentParagraph.Text);

                    if (old1.Contains(Environment.NewLine) || old2.Contains(Environment.NewLine) || old1.Length > Configuration.Settings.General.SubtitleLineMaximumLength || old2.Length > Configuration.Settings.General.SubtitleLineMaximumLength)
                    {
                        currentParagraph.Text = Utilities.AutoBreakLine(currentParagraph.Text, Utilities.AutoDetectGoogleLanguage(this._subtitle));
                    }

                    if (string.IsNullOrWhiteSpace(old1))
                    {
                        currentParagraph.Text = currentParagraph.Text.TrimStart();
                    }

                    if (string.IsNullOrWhiteSpace(old2))
                    {
                        currentParagraph.Text = currentParagraph.Text.TrimEnd();
                    }
                }

                // currentParagraph.EndTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds + nextParagraph.Duration.TotalMilliseconds; //nextParagraph.EndTime;
                currentParagraph.EndTime.TotalMilliseconds = nextParagraph.EndTime.TotalMilliseconds;

                if (this._networkSession != null)
                {
                    this._networkSession.TimerStop();
                    this.SetDurationInSeconds(currentParagraph.Duration.TotalSeconds);
                    this._networkSession.UpdateLine(this._subtitle.GetIndex(currentParagraph), currentParagraph);
                    var deleteIndices = new List<int>();
                    deleteIndices.Add(this._subtitle.GetIndex(nextParagraph));
                    this.NetworkGetSendUpdates(deleteIndices, 0, null);
                }
                else
                {
                    this._subtitle.Paragraphs.Remove(nextParagraph);
                    this._subtitle.Renumber();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                }

                this.ShowSource();
                this.ShowStatus(this._language.LinesMerged);
                this.SubtitleListview1.SelectIndexAndEnsureVisible(firstSelectedIndex);
                this.SubtitleListview1.SelectedIndexChanged += this.SubtitleListview1_SelectedIndexChanged;
                this.RefreshSelectedParagraph();
                this.SubtitleListview1.SelectIndexAndEnsureVisible(firstSelectedIndex, true);
            }
        }

        /// <summary>
        /// The update start time info.
        /// </summary>
        /// <param name="startTime">
        /// The start time.
        /// </param>
        private void UpdateStartTimeInfo(TimeCode startTime)
        {
            if (this._subtitle.Paragraphs.Count > 0 && this.SubtitleListview1.SelectedItems.Count > 0 && startTime != null)
            {
                this.UpdateOverlapErrors(startTime);

                // update _subtitle + listview
                var p = this._subtitle.Paragraphs[this._subtitleListViewIndex];
                p.EndTime.TotalMilliseconds += startTime.TotalMilliseconds - p.StartTime.TotalMilliseconds;
                p.StartTime = startTime;
                this.SubtitleListview1.SetStartTime(this._subtitleListViewIndex, p);
                if (this.GetCurrentSubtitleFormat().IsFrameBased)
                {
                    p.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                    p.CalculateTimeCodesFromFrameNumbers(this.CurrentFrameRate);
                }

                this.StartUpdateListSyntaxColoring();
            }
        }

        /// <summary>
        /// The start update list syntax coloring.
        /// </summary>
        private void StartUpdateListSyntaxColoring()
        {
            if (!this._timerDoSyntaxColoring.Enabled)
            {
                this._timerDoSyntaxColoring.Start();
            }
        }

        /// <summary>
        /// The update list syntax coloring.
        /// </summary>
        private void UpdateListSyntaxColoring()
        {
            if (this._loading || !this.IsSubtitleLoaded || this._subtitleListViewIndex < 0 || this._subtitleListViewIndex >= this._subtitle.Paragraphs.Count)
            {
                return;
            }

            this.SubtitleListview1.SyntaxColorLine(this._subtitle.Paragraphs, this._subtitleListViewIndex, this._subtitle.Paragraphs[this._subtitleListViewIndex]);
            var next = this._subtitle.GetParagraphOrDefault(this._subtitleListViewIndex + 1);
            if (next != null)
            {
                this.SubtitleListview1.SyntaxColorLine(this._subtitle.Paragraphs, this._subtitleListViewIndex + 1, this._subtitle.Paragraphs[this._subtitleListViewIndex + 1]);
            }
        }

        /// <summary>
        /// The update overlap errors.
        /// </summary>
        /// <param name="startTime">
        /// The start time.
        /// </param>
        private void UpdateOverlapErrors(TimeCode startTime)
        {
            this.labelStartTimeWarning.Text = string.Empty;
            this.labelDurationWarning.Text = string.Empty;
            if (this._subtitle.Paragraphs.Count > 0 && this.SubtitleListview1.SelectedItems.Count > 0 && startTime != null)
            {
                int firstSelectedIndex = this.SubtitleListview1.SelectedItems[0].Index;

                var prevParagraph = this._subtitle.GetParagraphOrDefault(firstSelectedIndex - 1);
                if (prevParagraph != null && prevParagraph.EndTime.TotalMilliseconds > startTime.TotalMilliseconds && Configuration.Settings.Tools.ListViewSyntaxColorOverlap)
                {
                    this.labelStartTimeWarning.Text = string.Format(this._languageGeneral.OverlapPreviousLineX, prevParagraph.EndTime.TotalSeconds - startTime.TotalSeconds);
                }

                var nextParagraph = this._subtitle.GetParagraphOrDefault(firstSelectedIndex + 1);
                if (nextParagraph != null)
                {
                    double durationMilliSeconds = this.GetDurationInMilliseconds();
                    if (startTime.TotalMilliseconds + durationMilliSeconds > nextParagraph.StartTime.TotalMilliseconds && Configuration.Settings.Tools.ListViewSyntaxColorOverlap)
                    {
                        this.labelDurationWarning.Text = string.Format(this._languageGeneral.OverlapX, ((startTime.TotalMilliseconds + durationMilliSeconds) - nextParagraph.StartTime.TotalMilliseconds) / TimeCode.BaseUnit);
                    }

                    if (this.labelStartTimeWarning.Text.Length == 0 && startTime.TotalMilliseconds > nextParagraph.StartTime.TotalMilliseconds && Configuration.Settings.Tools.ListViewSyntaxColorOverlap)
                    {
                        double di = (startTime.TotalMilliseconds - nextParagraph.StartTime.TotalMilliseconds) / TimeCode.BaseUnit;
                        this.labelStartTimeWarning.Text = string.Format(this._languageGeneral.OverlapNextX, di);
                    }
                    else if (this.numericUpDownDuration.Value < 0)
                    {
                        this.labelDurationWarning.Text = this._languageGeneral.Negative;
                    }
                }
            }
        }

        /// <summary>
        /// The get duration in milliseconds.
        /// </summary>
        /// <returns>
        /// The <see cref="double"/>.
        /// </returns>
        private double GetDurationInMilliseconds()
        {
            if (Configuration.Settings.General.UseTimeFormatHHMMSSFF)
            {
                var seconds = (int)this.numericUpDownDuration.Value;
                var frames = (int)Math.Round(Convert.ToDouble(this.numericUpDownDuration.Value) % 1.0 * 100.0);
                return seconds * TimeCode.BaseUnit + frames * (TimeCode.BaseUnit / Configuration.Settings.General.CurrentFrameRate);
            }

            return (double)this.numericUpDownDuration.Value * TimeCode.BaseUnit;
        }

        /// <summary>
        /// The set duration in seconds.
        /// </summary>
        /// <param name="seconds">
        /// The seconds.
        /// </param>
        private void SetDurationInSeconds(double seconds)
        {
            if (Configuration.Settings.General.UseTimeFormatHHMMSSFF)
            {
                var wholeSeconds = (int)seconds;
                var frames = SubtitleFormat.MillisecondsToFrames(seconds % 1.0 * TimeCode.BaseUnit);
                var extraSeconds = (int)(frames / Configuration.Settings.General.CurrentFrameRate);
                var restFrames = (int)(frames % Configuration.Settings.General.CurrentFrameRate);
                this.numericUpDownDuration.Value = (decimal)(wholeSeconds + extraSeconds + restFrames / 100.0);
            }
            else
            {
                var d = (decimal)seconds;
                if (d > this.numericUpDownDuration.Maximum)
                {
                    this.numericUpDownDuration.Value = this.numericUpDownDuration.Maximum;
                }
                else if (d < this.numericUpDownDuration.Minimum)
                {
                    this.numericUpDownDuration.Value = this.numericUpDownDuration.Minimum;
                }
                else
                {
                    this.numericUpDownDuration.Value = d;
                }
            }
        }

        /// <summary>
        /// The numeric up down duration value changed.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void NumericUpDownDurationValueChanged(object sender, EventArgs e)
        {
            if (this._subtitle.Paragraphs.Count > 0 && this.SubtitleListview1.SelectedItems.Count > 0)
            {
                int firstSelectedIndex = this.SubtitleListview1.SelectedItems[0].Index;

                var currentParagraph = this._subtitle.GetParagraphOrDefault(firstSelectedIndex);
                if (currentParagraph != null)
                {
                    // update _subtitle + listview
                    string oldDuration = currentParagraph.Duration.ToString();

                    var temp = new Paragraph(currentParagraph);

                    if (Configuration.Settings.General.UseTimeFormatHHMMSSFF)
                    {
                        var seconds = (int)this.numericUpDownDuration.Value;
                        var frames = Convert.ToInt32((this.numericUpDownDuration.Value - seconds) * 100);
                        if (frames > Math.Round(Configuration.Settings.General.CurrentFrameRate) - 1)
                        {
                            this.numericUpDownDuration.ValueChanged -= this.NumericUpDownDurationValueChanged;
                            if (frames >= 99)
                            {
                                this.numericUpDownDuration.Value = (decimal)(seconds + (Math.Round((Configuration.Settings.General.CurrentFrameRate - 1)) / 100.0));
                            }
                            else
                            {
                                this.numericUpDownDuration.Value = seconds + 1;
                            }

                            this.numericUpDownDuration.ValueChanged += this.NumericUpDownDurationValueChanged;
                        }
                    }

                    temp.EndTime.TotalMilliseconds = currentParagraph.StartTime.TotalMilliseconds + this.GetDurationInMilliseconds();

                    this.MakeHistoryForUndoOnlyIfNotResent(string.Format(this._language.DisplayTimeAdjustedX, "#" + currentParagraph.Number + ": " + oldDuration + " -> " + temp.Duration));

                    currentParagraph.EndTime.TotalMilliseconds = temp.EndTime.TotalMilliseconds;
                    this.SubtitleListview1.SetDuration(firstSelectedIndex, currentParagraph);

                    this.UpdateOverlapErrors(this.timeUpDownStartTime.TimeCode);
                    this.UpdateListViewTextCharactersPerSeconds(this.labelCharactersPerSecond, currentParagraph);

                    if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && this._subtitleAlternate != null && this._subtitleAlternate.Paragraphs.Count > 0)
                    {
                        var original = Utilities.GetOriginalParagraph(firstSelectedIndex, currentParagraph, this._subtitleAlternate.Paragraphs);
                        if (original != null)
                        {
                            original.EndTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds;
                        }
                    }

                    this.StartUpdateListSyntaxColoring();

                    if (this.GetCurrentSubtitleFormat().IsFrameBased)
                    {
                        currentParagraph.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                        currentParagraph.CalculateTimeCodesFromFrameNumbers(this.CurrentFrameRate);
                    }
                }

                this.labelStatus.Text = string.Empty;
                this.StartUpdateListSyntaxColoring();
            }
        }

        /// <summary>
        /// The initialize list view edit box alternate.
        /// </summary>
        /// <param name="p">
        /// The p.
        /// </param>
        /// <param name="firstSelectedIndex">
        /// The first selected index.
        /// </param>
        private void InitializeListViewEditBoxAlternate(Paragraph p, int firstSelectedIndex)
        {
            if (this._subtitleAlternate != null && this._subtitleAlternate.Paragraphs.Count > 0)
            {
                var original = Utilities.GetOriginalParagraph(firstSelectedIndex, p, this._subtitleAlternate.Paragraphs);
                if (original == null)
                {
                    this.textBoxListViewTextAlternate.Enabled = false;
                    this.textBoxListViewTextAlternate.Text = string.Empty;
                    this.labelAlternateCharactersPerSecond.Text = string.Empty;
                }
                else
                {
                    this.textBoxListViewTextAlternate.Enabled = true;
                    this.textBoxListViewTextAlternate.TextChanged -= this.TextBoxListViewTextAlternateTextChanged;
                    this.textBoxListViewTextAlternate.Text = original.Text;
                    this.textBoxListViewTextAlternate.TextChanged += this.TextBoxListViewTextAlternateTextChanged;
                    this.UpdateListViewTextCharactersPerSeconds(this.labelAlternateCharactersPerSecond, original);
                    this._listViewAlternateTextUndoLast = original.Text;
                }
            }
        }

        /// <summary>
        /// The initialize list view edit box.
        /// </summary>
        /// <param name="p">
        /// The p.
        /// </param>
        private void InitializeListViewEditBox(Paragraph p)
        {
            this.textBoxListViewText.TextChanged -= this.TextBoxListViewTextTextChanged;
            this.textBoxListViewText.Text = p.Text;
            this.textBoxListViewText.TextChanged += this.TextBoxListViewTextTextChanged;
            this._listViewTextUndoLast = p.Text;

            this.timeUpDownStartTime.MaskedTextBox.TextChanged -= this.MaskedTextBoxTextChanged;
            this.timeUpDownStartTime.TimeCode = p.StartTime;
            this.timeUpDownStartTime.MaskedTextBox.TextChanged += this.MaskedTextBoxTextChanged;

            this.numericUpDownDuration.ValueChanged -= this.NumericUpDownDurationValueChanged;
            if (p.Duration.TotalSeconds > (double)this.numericUpDownDuration.Maximum)
            {
                this.SetDurationInSeconds((double)this.numericUpDownDuration.Maximum);
            }
            else
            {
                this.SetDurationInSeconds(p.Duration.TotalSeconds);
            }

            this.numericUpDownDuration.ValueChanged += this.NumericUpDownDurationValueChanged;

            this.UpdateOverlapErrors(this.timeUpDownStartTime.TimeCode);
            this.UpdateListViewTextCharactersPerSeconds(this.labelCharactersPerSecond, p);
            if (this._subtitle != null && this._subtitle.Paragraphs.Count > 0)
            {
                this.textBoxListViewText.Enabled = true;
            }

            this.StartUpdateListSyntaxColoring();
        }

        /// <summary>
        /// The masked text box text changed.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void MaskedTextBoxTextChanged(object sender, EventArgs e)
        {
            if (this._subtitleListViewIndex >= 0)
            {
                this.MakeHistoryForUndoOnlyIfNotResent(string.Format(this._language.StarTimeAdjustedX, "#" + (this._subtitleListViewIndex + 1) + ": " + this.timeUpDownStartTime.TimeCode));

                int firstSelectedIndex = this.FirstSelectedIndex;
                var oldParagraph = this._subtitle.GetParagraphOrDefault(firstSelectedIndex);
                if (oldParagraph != null)
                {
                    oldParagraph = new Paragraph(oldParagraph);
                }

                this.UpdateStartTimeInfo(this.timeUpDownStartTime.TimeCode);

                this.UpdateOriginalTimeCodes(oldParagraph);
                this.labelStatus.Text = string.Empty;
            }
        }

        /// <summary>
        /// The update original time codes.
        /// </summary>
        /// <param name="currentPargraphBeforeChange">
        /// The current pargraph before change.
        /// </param>
        private void UpdateOriginalTimeCodes(Paragraph currentPargraphBeforeChange)
        {
            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && this._subtitleAlternate != null && this._subtitleAlternate.Paragraphs.Count > 0)
            {
                int firstSelectedIndex = this.FirstSelectedIndex;
                var p = this._subtitle.GetParagraphOrDefault(firstSelectedIndex);
                if (currentPargraphBeforeChange != null && p != null)
                {
                    var original = Utilities.GetOriginalParagraph(this.FirstSelectedIndex, currentPargraphBeforeChange, this._subtitleAlternate.Paragraphs);
                    if (original != null)
                    {
                        original.StartTime.TotalMilliseconds = p.StartTime.TotalMilliseconds;
                        original.EndTime.TotalMilliseconds = p.EndTime.TotalMilliseconds;
                    }
                }
            }
        }

        /// <summary>
        /// The form main_ form closing.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void FormMain_FormClosing(object sender, FormClosingEventArgs e)
        {
            this._lastDoNotPrompt = string.Empty;
            this.ReloadFromSourceView();
            if (!this.ContinueNewOrExit())
            {
                e.Cancel = true;
            }
            else
            {
                if (this._networkSession != null)
                {
                    try
                    {
                        this._networkSession.TimerStop();
                        this._networkSession.Leave();
                    }
                    catch
                    {
                    }
                }

                if (Configuration.Settings.General.StartRememberPositionAndSize && this.WindowState != FormWindowState.Minimized)
                {
                    Configuration.Settings.General.StartPosition = this.Left + ";" + this.Top;
                    if (this.WindowState == FormWindowState.Maximized)
                    {
                        Configuration.Settings.General.StartSize = "Maximized";
                    }
                    else
                    {
                        Configuration.Settings.General.StartSize = this.Width + ";" + this.Height;
                    }

                    Configuration.Settings.General.SplitContainerMainSplitterDistance = this.splitContainerMain.SplitterDistance;
                    Configuration.Settings.General.SplitContainer1SplitterDistance = this.splitContainer1.SplitterDistance;
                    Configuration.Settings.General.SplitContainerListViewAndTextSplitterDistance = this.splitContainerListViewAndText.SplitterDistance;
                }

                Configuration.Settings.General.AutoRepeatOn = this.checkBoxAutoRepeatOn.Checked;
                Configuration.Settings.General.AutoRepeatCount = Convert.ToInt32(this.comboBoxAutoRepeat.Text);
                Configuration.Settings.General.AutoContinueOn = this.checkBoxAutoContinue.Checked;
                Configuration.Settings.General.SyncListViewWithVideoWhilePlaying = this.checkBoxSyncListViewWithVideoWhilePlaying.Checked;
                if (this.audioVisualizer != null)
                {
                    Configuration.Settings.General.ShowWaveform = this.audioVisualizer.ShowWaveform;
                    Configuration.Settings.General.ShowSpectrogram = this.audioVisualizer.ShowSpectrogram;
                }

                if (!string.IsNullOrEmpty(this._fileName))
                {
                    Configuration.Settings.RecentFiles.Add(this._fileName, this.FirstVisibleIndex, this.FirstSelectedIndex, this._videoFileName, this._subtitleAlternateFileName);
                }

                Configuration.Settings.General.RightToLeftMode = this.toolStripMenuItemRightToLeftMode.Checked;

                this.SaveUndockedPositions();
                this.SaveListViewWidths();
                Configuration.Settings.Save();

                if (this.mediaPlayer.VideoPlayer != null)
                {
                    this.mediaPlayer.VideoPlayer.DisposeVideoPlayer();
                }
            }
        }

        /// <summary>
        /// The save list view widths.
        /// </summary>
        private void SaveListViewWidths()
        {
            if (Configuration.Settings.General.ListViewColumnsRememberSize)
            {
                Configuration.Settings.General.ListViewNumberWidth = this.SubtitleListview1.Columns[0].Width;
                Configuration.Settings.General.ListViewStartWidth = this.SubtitleListview1.Columns[1].Width;
                Configuration.Settings.General.ListViewEndWidth = this.SubtitleListview1.Columns[2].Width;
                Configuration.Settings.General.ListViewDurationWidth = this.SubtitleListview1.Columns[3].Width;
                Configuration.Settings.General.ListViewTextWidth = this.SubtitleListview1.Columns[4].Width;
            }
        }

        /// <summary>
        /// The save undocked positions.
        /// </summary>
        private void SaveUndockedPositions()
        {
            if (this._videoPlayerUndocked != null && !this._videoPlayerUndocked.IsDisposed)
            {
                Configuration.Settings.General.UndockedVideoPosition = this._videoPlayerUndocked.Left + @";" + this._videoPlayerUndocked.Top + @";" + this._videoPlayerUndocked.Width + @";" + this._videoPlayerUndocked.Height;
            }

            if (this._waveformUndocked != null && !this._waveformUndocked.IsDisposed)
            {
                Configuration.Settings.General.UndockedWaveformPosition = this._waveformUndocked.Left + @";" + this._waveformUndocked.Top + @";" + this._waveformUndocked.Width + @";" + this._waveformUndocked.Height;
            }

            if (this._videoControlsUndocked != null && !this._videoControlsUndocked.IsDisposed)
            {
                Configuration.Settings.General.UndockedVideoControlsPosition = this._videoControlsUndocked.Left + @";" + this._videoControlsUndocked.Top + @";" + this._videoControlsUndocked.Width + @";" + this._videoControlsUndocked.Height;
            }
        }

        /// <summary>
        /// The button un break click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ButtonUnBreakClick(object sender, EventArgs e)
        {
            if (this.SubtitleListview1.SelectedItems.Count > 1)
            {
                this.MakeHistoryForUndo(this._language.BeforeRemoveLineBreaksInSelectedLines);

                this.SubtitleListview1.BeginUpdate();
                foreach (int index in this.SubtitleListview1.SelectedIndices)
                {
                    var p = this._subtitle.GetParagraphOrDefault(index);
                    p.Text = Utilities.UnbreakLine(p.Text);
                    this.SubtitleListview1.SetText(index, p.Text);
                }

                this.SubtitleListview1.EndUpdate();
                this.RefreshSelectedParagraph();
            }
            else
            {
                this.textBoxListViewText.Text = Utilities.UnbreakLine(this.textBoxListViewText.Text);
            }
        }

        /// <summary>
        /// The tab control subtitle selected index changed.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void TabControlSubtitleSelectedIndexChanged(object sender, EventArgs e)
        {
            var format = this.GetCurrentSubtitleFormat();
            if (this.tabControlSubtitle.SelectedIndex == TabControlSourceView)
            {
                this.ShowSource();
                this.ShowSourceLineNumber();
                if (this.textBoxSource.CanFocus)
                {
                    this.textBoxSource.Focus();
                }

                // go to correct line in source view
                if (this.SubtitleListview1.SelectedItems.Count > 0)
                {
                    if (format.GetType() == typeof(SubRip))
                    {
                        var p = this._subtitle.GetParagraphOrDefault(this.FirstSelectedIndex);
                        if (p != null)
                        {
                            string tc = p.StartTime + " --> " + p.EndTime;
                            int start = this.textBoxSource.Text.IndexOf(tc, StringComparison.Ordinal);
                            if (start > 0)
                            {
                                this.textBoxSource.SelectionStart = start + tc.Length + Environment.NewLine.Length;
                                this.textBoxSource.SelectionLength = 0;
                                this.textBoxSource.ScrollToCaret();
                            }
                        }
                    }
                    else if (format.GetType() == typeof(SubStationAlpha) || format.GetType() == typeof(AdvancedSubStationAlpha))
                    {
                        var p = this._subtitle.GetParagraphOrDefault(this.FirstSelectedIndex);
                        if (p != null)
                        {
                            const string timeCodeFormat = "{0}:{1:00}:{2:00}.{3:00}"; // h:mm:ss.cc
                            string startTimeCode = string.Format(timeCodeFormat, p.StartTime.Hours, p.StartTime.Minutes, p.StartTime.Seconds, p.StartTime.Milliseconds / 10);
                            string endTimeCode = string.Format(timeCodeFormat, p.EndTime.Hours, p.EndTime.Minutes, p.EndTime.Seconds, p.EndTime.Milliseconds / 10);
                            string tc = startTimeCode + "," + endTimeCode;
                            int start = this.textBoxSource.Text.IndexOf(tc, StringComparison.Ordinal);
                            if (start > 0)
                            {
                                int start2 = this.textBoxSource.Text.LastIndexOf("Dialogue:", start, StringComparison.Ordinal);
                                if (start2 > 0)
                                {
                                    start2 = (this.textBoxSource.Text + Environment.NewLine).IndexOf(Environment.NewLine, start2, StringComparison.Ordinal);
                                }

                                if (start2 > 0)
                                {
                                    start = start2;
                                }

                                this.textBoxSource.SelectionStart = start;
                                this.textBoxSource.SelectionLength = 0;
                                this.textBoxSource.ScrollToCaret();
                            }
                        }
                    }
                }
            }
            else
            {
                this.ReloadFromSourceView();
                this.ShowLineInformationListView();
                if (this.SubtitleListview1.CanFocus)
                {
                    this.SubtitleListview1.Focus();
                }

                // go to (select + focus) correct line in list view
                if (this.textBoxSource.SelectionStart > 0 && this.textBoxSource.TextLength > 30)
                {
                    if (format.GetType() == typeof(SubRip))
                    {
                        int pos = this.textBoxSource.SelectionStart;
                        if (pos + 35 < this.textBoxSource.TextLength)
                        {
                            pos += 35;
                        }

                        string s = this.textBoxSource.Text.Substring(0, pos);
                        int lastTimeCode = s.LastIndexOf(" --> ", StringComparison.Ordinal); // 00:02:26,407 --> 00:02:31,356
                        if (lastTimeCode > 14 && lastTimeCode + 16 >= s.Length)
                        {
                            s = s.Substring(0, lastTimeCode - 5);
                            lastTimeCode = s.LastIndexOf(" --> ", StringComparison.Ordinal);
                        }

                        if (lastTimeCode > 14 && lastTimeCode + 16 < s.Length)
                        {
                            string tc = s.Substring(lastTimeCode - 13, 30).Trim();
                            int index = 0;
                            foreach (var p in this._subtitle.Paragraphs)
                            {
                                if (tc == p.StartTime + " --> " + p.EndTime)
                                {
                                    this.SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                                    break;
                                }

                                index++;
                            }
                        }
                    }
                    else if (format.GetType() == typeof(SubStationAlpha) || format.GetType() == typeof(AdvancedSubStationAlpha))
                    {
                        int pos = this.textBoxSource.SelectionStart;
                        string s = this.textBoxSource.Text;
                        if (pos > 0)
                        {
                            pos--;
                        }

                        while (pos > 0 && pos + 3 < s.Length && !s.Substring(pos, 3).StartsWith(Environment.NewLine))
                        {
                            pos--;
                        }

                        s = s.Substring(pos).Trim();
                        int lastTimeCode = s.IndexOf("Dialogue:", StringComparison.Ordinal);

                        if (lastTimeCode >= 0)
                        {
                            string tc = s.Substring(lastTimeCode).Trim();
                            while (tc.Length > 0 && !char.IsDigit(tc[0]))
                            {
                                tc = tc.Remove(0, 1);
                            }

                            if (tc.Length > 12)
                            {
                                tc = tc.Substring(0, 13);
                                var timeCode = tc.Split(new[] { ':', '.', ',' }, StringSplitOptions.RemoveEmptyEntries);
                                var realTC = new TimeCode(0, 0, 0, 0);
                                try
                                {
                                    realTC = new TimeCode(int.Parse(timeCode[1]), int.Parse(timeCode[2]), int.Parse(timeCode[3]), int.Parse(timeCode[4]) * 10);
                                }
                                catch
                                {
                                    this.SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                                    return;
                                }

                                int index = 0;
                                foreach (var p in this._subtitle.Paragraphs)
                                {
                                    if (Math.Abs(realTC.TotalMilliseconds - p.StartTime.TotalMilliseconds) < 50)
                                    {
                                        this.SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                                        break;
                                    }

                                    index++;
                                }
                            }
                        }
                    }
                }
                else if (this.textBoxSource.SelectionStart == 0 && this.textBoxSource.TextLength > 30)
                {
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                }
            }
        }

        /// <summary>
        /// The color tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ColorToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (this._subtitle.Paragraphs.Count > 0 && this.SubtitleListview1.SelectedItems.Count > 0)
            {
                if (this.colorDialog1.ShowDialog(this) == DialogResult.OK)
                {
                    string color = Utilities.ColorToHex(this.colorDialog1.Color);

                    this.MakeHistoryForUndo(this._language.BeforeSettingColor);

                    foreach (ListViewItem item in this.SubtitleListview1.SelectedItems)
                    {
                        var p = this._subtitle.GetParagraphOrDefault(item.Index);
                        if (p != null)
                        {
                            SetFontColor(p, color);
                            this.SubtitleListview1.SetText(item.Index, p.Text);
                            if (this._subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle && this.SubtitleListview1.IsAlternateTextColumnVisible)
                            {
                                var original = Utilities.GetOriginalParagraph(item.Index, p, this._subtitleAlternate.Paragraphs);
                                if (original != null)
                                {
                                    SetFontColor(original, color);
                                    this.SubtitleListview1.SetAlternateText(item.Index, original.Text);
                                }
                            }
                        }
                    }

                    this.RefreshSelectedParagraph();
                }
            }
        }

        /// <summary>
        /// The set font color.
        /// </summary>
        /// <param name="p">
        /// The p.
        /// </param>
        /// <param name="color">
        /// The color.
        /// </param>
        private static void SetFontColor(Paragraph p, string color)
        {
            if (p == null)
            {
                return;
            }

            string s = p.Text;
            if (s.StartsWith("<font "))
            {
                int end = s.IndexOf('>');
                if (end > 0)
                {
                    string f = s.Substring(0, end);

                    if (f.Contains(" face=") && !f.Contains(" color="))
                    {
                        var start = s.IndexOf(" face=", StringComparison.Ordinal);
                        s = s.Insert(start, string.Format(" color=\"{0}\"", color));
                        p.Text = s;
                        return;
                    }

                    var colorStart = f.IndexOf(" color=", StringComparison.Ordinal);
                    if (colorStart >= 0)
                    {
                        if (s.IndexOf('"', colorStart + 8) > 0)
                        {
                            end = s.IndexOf('"', colorStart + 8);
                        }

                        s = s.Substring(0, colorStart) + string.Format(" color=\"{0}", color) + s.Substring(end);
                        p.Text = s;
                        return;
                    }
                }
            }

            p.Text = string.Format("<font color=\"{0}\">{1}</font>", color, p.Text);
        }

        /// <summary>
        /// The tool strip menu item font_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemFont_Click(object sender, EventArgs e)
        {
            if (this._subtitle.Paragraphs.Count > 0 && this.SubtitleListview1.SelectedItems.Count > 0)
            {
                if (this.fontDialog1.ShowDialog(this) == DialogResult.OK)
                {
                    this.MakeHistoryForUndo(this._language.BeforeSettingFontName);

                    foreach (ListViewItem item in this.SubtitleListview1.SelectedItems)
                    {
                        var p = this._subtitle.GetParagraphOrDefault(item.Index);
                        if (p != null)
                        {
                            this.SetFontName(p);
                            this.SubtitleListview1.SetText(item.Index, p.Text);
                            if (this._subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle && this.SubtitleListview1.IsAlternateTextColumnVisible)
                            {
                                var original = Utilities.GetOriginalParagraph(item.Index, p, this._subtitleAlternate.Paragraphs);
                                if (original != null)
                                {
                                    this.SetFontName(original);
                                    this.SubtitleListview1.SetAlternateText(item.Index, original.Text);
                                }
                            }
                        }
                    }

                    this.RefreshSelectedParagraph();
                }
            }
        }

        /// <summary>
        /// The set font name.
        /// </summary>
        /// <param name="p">
        /// The p.
        /// </param>
        private void SetFontName(Paragraph p)
        {
            if (p == null)
            {
                return;
            }

            string s = p.Text;
            if (s.StartsWith("<font "))
            {
                var end = s.IndexOf('>');
                if (end > 0)
                {
                    var f = s.Substring(0, end);

                    if (f.Contains(" color=") && !f.Contains(" face="))
                    {
                        var start = s.IndexOf(" color=", StringComparison.Ordinal);
                        p.Text = s.Insert(start, string.Format(" face=\"{0}\"", this.fontDialog1.Font.Name));
                        return;
                    }

                    var faceStart = f.IndexOf(" face=", StringComparison.Ordinal);
                    if (f.Contains(" face="))
                    {
                        if (s.IndexOf('"', faceStart + 7) > 0)
                        {
                            end = s.IndexOf('"', faceStart + 7);
                        }

                        p.Text = s.Substring(0, faceStart) + string.Format(" face=\"{0}", this.fontDialog1.Font.Name) + s.Substring(end);
                        return;
                    }
                }
            }

            p.Text = string.Format("<font face=\"{0}\">{1}</font>", this.fontDialog1.Font.Name, s);
        }

        /// <summary>
        /// The type effect tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void TypeEffectToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (this.SubtitleListview1.SelectedItems.Count > 0)
            {
                using (var typewriter = new EffectTypewriter())
                {
                    typewriter.Initialize(this.SubtitleListview1.GetSelectedParagraph(this._subtitle));

                    if (typewriter.ShowDialog(this) == DialogResult.OK)
                    {
                        this.MakeHistoryForUndo(this._language.BeforeTypeWriterEffect);
                        int lastSelectedIndex = this.SubtitleListview1.SelectedItems[0].Index;
                        int index = lastSelectedIndex;
                        this._subtitle.Paragraphs.RemoveAt(index);
                        bool isframeBased = this.GetCurrentSubtitleFormat().IsFrameBased;
                        foreach (var p in typewriter.TypewriterParagraphs)
                        {
                            if (isframeBased)
                            {
                                p.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                                p.CalculateTimeCodesFromFrameNumbers(this.CurrentFrameRate);
                            }

                            this._subtitle.Paragraphs.Insert(index, p);
                            index++;
                        }

                        this._subtitle.Renumber();
                        this._subtitleListViewIndex = -1;
                        this.ShowSource();
                        this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                        this.SubtitleListview1.SelectIndexAndEnsureVisible(lastSelectedIndex);
                    }
                }
            }
        }

        /// <summary>
        /// The karokee effect tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void KarokeeEffectToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (this.SubtitleListview1.SelectedItems.Count > 0)
            {
                using (var karaoke = new EffectKaraoke())
                {
                    karaoke.Initialize(this.SubtitleListview1.GetSelectedParagraph(this._subtitle));

                    if (karaoke.ShowDialog(this) == DialogResult.OK)
                    {
                        this.MakeHistoryForUndo(this._language.BeforeKaraokeEffect);
                        int lastSelectedIndex = this.SubtitleListview1.SelectedItems[0].Index;
                        bool isframeBased = this.GetCurrentSubtitleFormat().IsFrameBased;

                        int i = this.SubtitleListview1.SelectedItems.Count - 1;
                        while (i >= 0)
                        {
                            var item = this.SubtitleListview1.SelectedItems[i];
                            var p = this._subtitle.GetParagraphOrDefault(item.Index);
                            if (p != null)
                            {
                                int index = item.Index;
                                this._subtitle.Paragraphs.RemoveAt(index);
                                foreach (var kp in karaoke.MakeAnimation(p))
                                {
                                    if (isframeBased)
                                    {
                                        p.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                                        p.CalculateTimeCodesFromFrameNumbers(this.CurrentFrameRate);
                                    }

                                    this._subtitle.Paragraphs.Insert(index, kp);
                                    index++;
                                }
                            }

                            i--;
                        }

                        this._subtitle.Renumber();
                        this._subtitleListViewIndex = -1;
                        this.ShowSource();
                        this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                        this.SubtitleListview1.SelectIndexAndEnsureVisible(lastSelectedIndex);
                    }
                }
            }
        }

        /// <summary>
        /// The matroska import strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void MatroskaImportStripMenuItemClick(object sender, EventArgs e)
        {
            this.openFileDialog1.Title = this._language.OpenMatroskaFile;
            this.openFileDialog1.FileName = string.Empty;
            this.openFileDialog1.Filter = this._language.MatroskaFiles + "|*.mkv;*.mks|" + this._languageGeneral.AllFiles + "|*.*";
            if (this.openFileDialog1.ShowDialog(this) == DialogResult.OK)
            {
                this.openFileDialog1.InitialDirectory = Path.GetDirectoryName(this.openFileDialog1.FileName);
                this.ImportSubtitleFromMatroskaFile(this.openFileDialog1.FileName);
            }
        }

        /// <summary>
        /// The import subtitle from matroska file.
        /// </summary>
        /// <param name="fileName">
        /// The file name.
        /// </param>
        private void ImportSubtitleFromMatroskaFile(string fileName)
        {
            using (var matroska = new MatroskaFile(fileName))
            {
                if (matroska.IsValid)
                {
                    var subtitleList = matroska.GetTracks(true);
                    if (subtitleList.Count == 0)
                    {
                        MessageBox.Show(this._language.NoSubtitlesFound);
                    }
                    else if (this.ContinueNewOrExit())
                    {
                        if (subtitleList.Count > 1)
                        {
                            using (var subtitleChooser = new MatroskaSubtitleChooser())
                            {
                                subtitleChooser.Initialize(subtitleList);
                                if (this._loading)
                                {
                                    subtitleChooser.Icon = (Icon)this.Icon.Clone();
                                    subtitleChooser.ShowInTaskbar = true;
                                    subtitleChooser.ShowIcon = true;
                                }

                                if (subtitleChooser.ShowDialog(this) == DialogResult.OK)
                                {
                                    if (this.LoadMatroskaSubtitle(subtitleList[subtitleChooser.SelectedIndex], matroska, false) && Path.GetExtension(matroska.Path).Equals(".mkv", StringComparison.OrdinalIgnoreCase))
                                    {
                                        this.OpenVideo(matroska.Path);
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (this.LoadMatroskaSubtitle(subtitleList[0], matroska, false) && Path.GetExtension(matroska.Path).Equals(".mkv", StringComparison.OrdinalIgnoreCase))
                            {
                                this.OpenVideo(matroska.Path);
                            }
                        }
                    }
                }
                else
                {
                    MessageBox.Show(string.Format(this._language.NotAValidMatroskaFileX, fileName));
                }
            }
        }

        /// <summary>
        /// The update progress.
        /// </summary>
        /// <param name="position">
        /// The position.
        /// </param>
        /// <param name="total">
        /// The total.
        /// </param>
        /// <param name="statusMessage">
        /// The status message.
        /// </param>
        private void UpdateProgress(long position, long total, string statusMessage)
        {
            var percent = (int)Math.Round(position * 100.0 / total);
            if (percent == this._lastProgressPercent)
            {
                return;
            }

            this.ShowStatus(string.Format("{0}, {1:0}%", statusMessage, this._lastProgressPercent));
            this.statusStrip1.Refresh();
            TaskbarList.SetProgressValue(this.Handle, percent, 100);
            if (DateTime.Now.Ticks % 10 == 0)
            {
                Application.DoEvents();
            }

            this._lastProgressPercent = percent;
        }

        /// <summary>
        /// The matroska progress.
        /// </summary>
        /// <param name="position">
        /// The position.
        /// </param>
        /// <param name="total">
        /// The total.
        /// </param>
        private void MatroskaProgress(long position, long total)
        {
            this.UpdateProgress(position, total, this._language.ParsingMatroskaFile);
        }

        /// <summary>
        /// The load matroska subtitle for sync.
        /// </summary>
        /// <param name="matroskaSubtitleInfo">
        /// The matroska subtitle info.
        /// </param>
        /// <param name="matroska">
        /// The matroska.
        /// </param>
        /// <returns>
        /// The <see cref="Subtitle"/>.
        /// </returns>
        private Subtitle LoadMatroskaSubtitleForSync(MatroskaTrackInfo matroskaSubtitleInfo, MatroskaFile matroska)
        {
            var subtitle = new Subtitle();
            bool isSsa = false;

            if (matroskaSubtitleInfo.CodecId.Equals("S_VOBSUB", StringComparison.OrdinalIgnoreCase))
            {
                return subtitle;
            }

            if (matroskaSubtitleInfo.CodecId.Equals("S_HDMV/PGS", StringComparison.OrdinalIgnoreCase))
            {
                return subtitle;
            }

            SubtitleFormat format;
            if (matroskaSubtitleInfo.CodecPrivate.Contains("[script info]", StringComparison.OrdinalIgnoreCase))
            {
                if (matroskaSubtitleInfo.CodecPrivate.Contains("[V4 Styles]", StringComparison.OrdinalIgnoreCase))
                {
                    format = new SubStationAlpha();
                }
                else
                {
                    format = new AdvancedSubStationAlpha();
                }

                isSsa = true;
            }
            else
            {
                format = new SubRip();
            }

            var sub = matroska.GetSubtitle(matroskaSubtitleInfo.TrackNumber, this.MatroskaProgress);
            TaskbarList.SetProgressState(this.Handle, TaskbarButtonProgressFlags.NoProgress);
            if (isSsa)
            {
                foreach (var p in Utilities.LoadMatroskaSSA(matroskaSubtitleInfo, matroska.Path, format, sub).Paragraphs)
                {
                    subtitle.Paragraphs.Add(p);
                }
            }
            else
            {
                foreach (var p in sub)
                {
                    subtitle.Paragraphs.Add(new Paragraph(p.Text, p.Start, p.End));
                }
            }

            return subtitle;
        }

        /// <summary>
        /// The load matroska subtitle.
        /// </summary>
        /// <param name="matroskaSubtitleInfo">
        /// The matroska subtitle info.
        /// </param>
        /// <param name="matroska">
        /// The matroska.
        /// </param>
        /// <param name="batchMode">
        /// The batch mode.
        /// </param>
        /// <returns>
        /// The <see cref="bool"/>.
        /// </returns>
        private bool LoadMatroskaSubtitle(MatroskaTrackInfo matroskaSubtitleInfo, MatroskaFile matroska, bool batchMode)
        {
            if (matroskaSubtitleInfo.CodecId.Equals("S_VOBSUB", StringComparison.OrdinalIgnoreCase))
            {
                if (batchMode)
                {
                    return false;
                }

                return this.LoadVobSubFromMatroska(matroskaSubtitleInfo, matroska);
            }

            if (matroskaSubtitleInfo.CodecId.Equals("S_HDMV/PGS", StringComparison.OrdinalIgnoreCase))
            {
                if (batchMode)
                {
                    return false;
                }

                return this.LoadBluRaySubFromMatroska(matroskaSubtitleInfo, matroska);
            }

            this.ShowStatus(this._language.ParsingMatroskaFile);
            this.Refresh();
            Cursor.Current = Cursors.WaitCursor;
            var sub = matroska.GetSubtitle(matroskaSubtitleInfo.TrackNumber, this.MatroskaProgress);
            TaskbarList.SetProgressState(this.Handle, TaskbarButtonProgressFlags.NoProgress);
            Cursor.Current = Cursors.Default;

            this.MakeHistoryForUndo(this._language.BeforeImportFromMatroskaFile);
            this._subtitleListViewIndex = -1;
            if (!batchMode)
            {
                this.ResetSubtitle();
            }

            this._subtitle.Paragraphs.Clear();

            var format = Utilities.LoadMatroskaTextSubtitle(matroskaSubtitleInfo, matroska, sub, this._subtitle);

            if (matroskaSubtitleInfo.CodecPrivate.Contains("[script info]", StringComparison.OrdinalIgnoreCase))
            {
                if (this._networkSession == null)
                {
                    this.SubtitleListview1.ShowExtraColumn(this._languageGeneral.Style);
                    this.SubtitleListview1.DisplayExtraFromExtra = true;
                }
            }
            else if (this._networkSession == null && this.SubtitleListview1.IsExtraColumnVisible)
            {
                this.SubtitleListview1.HideExtraColumn();
            }

            this.comboBoxSubtitleFormats.SelectedIndexChanged -= this.ComboBoxSubtitleFormatsSelectedIndexChanged;
            this.SetCurrentFormat(format);
            this.comboBoxSubtitleFormats.SelectedIndexChanged += this.ComboBoxSubtitleFormatsSelectedIndexChanged;
            this.SetEncoding(Encoding.UTF8);
            this.ShowStatus(this._language.SubtitleImportedFromMatroskaFile);
            this._subtitle.Renumber();
            this._subtitle.WasLoadedWithFrameNumbers = false;
            if (matroska.Path.EndsWith(".mkv", StringComparison.OrdinalIgnoreCase) || matroska.Path.EndsWith(".mks", StringComparison.OrdinalIgnoreCase))
            {
                this._fileName = matroska.Path.Remove(matroska.Path.Length - 4);
                this.Text = this.Title + " - " + this._fileName;
            }
            else
            {
                this.Text = this.Title;
            }

            this._fileDateTime = new DateTime();

            this._converted = true;

            if (batchMode)
            {
                return true;
            }

            this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
            if (this._subtitle.Paragraphs.Count > 0)
            {
                this.SubtitleListview1.SelectIndexAndEnsureVisible(0);
            }

            this.ShowSource();
            return true;
        }

        /// <summary>
        /// The copy stream.
        /// </summary>
        /// <param name="input">
        /// The input.
        /// </param>
        /// <param name="output">
        /// The output.
        /// </param>
        public static void CopyStream(Stream input, Stream output)
        {
            var buffer = new byte[128 * 1024];
            int len;
            while ((len = input.Read(buffer, 0, buffer.Length)) > 0)
            {
                output.Write(buffer, 0, len);
            }

            output.Flush();
        }

        /// <summary>
        /// The load vob sub from matroska.
        /// </summary>
        /// <param name="matroskaSubtitleInfo">
        /// The matroska subtitle info.
        /// </param>
        /// <param name="matroska">
        /// The matroska.
        /// </param>
        /// <returns>
        /// The <see cref="bool"/>.
        /// </returns>
        private bool LoadVobSubFromMatroska(MatroskaTrackInfo matroskaSubtitleInfo, MatroskaFile matroska)
        {
            if (matroskaSubtitleInfo.ContentEncodingType == 1)
            {
                MessageBox.Show(this._language.NoSupportEncryptedVobSub);
            }

            this.ShowStatus(this._language.ParsingMatroskaFile);
            this.Refresh();
            Cursor.Current = Cursors.WaitCursor;
            var sub = matroska.GetSubtitle(matroskaSubtitleInfo.TrackNumber, this.MatroskaProgress);
            TaskbarList.SetProgressState(this.Handle, TaskbarButtonProgressFlags.NoProgress);
            Cursor.Current = Cursors.Default;

            this.MakeHistoryForUndo(this._language.BeforeImportFromMatroskaFile);
            this._subtitleListViewIndex = -1;
            this._subtitle.Paragraphs.Clear();

            List<VobSubMergedPack> mergedVobSubPacks = new List<VobSubMergedPack>();
            Idx idx = new Logic.VobSub.Idx(matroskaSubtitleInfo.CodecPrivate.SplitToLines());
            foreach (var p in sub)
            {
                if (matroskaSubtitleInfo.ContentEncodingType == 0)
                {
                    // compressed with zlib
                    bool error = false;
                    MemoryStream outStream = new MemoryStream();
                    var outZStream = new zlib.ZOutputStream(outStream);
                    MemoryStream inStream = new MemoryStream(p.Data);
                    byte[] buffer = null;
                    try
                    {
                        CopyStream(inStream, outZStream);
                        buffer = new byte[outZStream.TotalOut];
                        outStream.Position = 0;
                        outStream.Read(buffer, 0, buffer.Length);
                    }
                    catch (Exception exception)
                    {
                        MessageBox.Show(exception.Message + Environment.NewLine + Environment.NewLine + exception.StackTrace);
                        error = true;
                    }
                    finally
                    {
                        outZStream.Close();
                        inStream.Close();
                    }

                    if (!error && buffer.Length > 2)
                    {
                        mergedVobSubPacks.Add(new VobSubMergedPack(buffer, TimeSpan.FromMilliseconds(p.Start), 32, null));
                    }
                }
                else
                {
                    mergedVobSubPacks.Add(new VobSubMergedPack(p.Data, TimeSpan.FromMilliseconds(p.Start), 32, null));
                }

                if (mergedVobSubPacks.Count > 0)
                {
                    mergedVobSubPacks[mergedVobSubPacks.Count - 1].EndTime = TimeSpan.FromMilliseconds(p.End);
                }

                // fix overlapping (some versions of Handbrake makes overlapping time codes - thx Hawke)
                if (mergedVobSubPacks.Count > 1 && mergedVobSubPacks[mergedVobSubPacks.Count - 2].EndTime > mergedVobSubPacks[mergedVobSubPacks.Count - 1].StartTime)
                {
                    mergedVobSubPacks[mergedVobSubPacks.Count - 2].EndTime = TimeSpan.FromMilliseconds(mergedVobSubPacks[mergedVobSubPacks.Count - 1].StartTime.TotalMilliseconds - 1);
                }
            }

            using (var formSubOcr = new VobSubOcr())
            {
                formSubOcr.Initialize(mergedVobSubPacks, idx.Palette, Configuration.Settings.VobSubOcr, null); // TODO: language???
                if (this._loading)
                {
                    formSubOcr.Icon = (Icon)this.Icon.Clone();
                    formSubOcr.ShowInTaskbar = true;
                    formSubOcr.ShowIcon = true;
                }

                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    this.ResetSubtitle();
                    this._subtitle.Paragraphs.Clear();
                    this._subtitle.WasLoadedWithFrameNumbers = false;
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        this._subtitle.Paragraphs.Add(p);
                    }

                    this.ShowSource();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this._subtitleListViewIndex = -1;
                    this.SubtitleListview1.FirstVisibleIndex = -1;
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(0);

                    this._fileName = Path.GetFileNameWithoutExtension(matroska.Path);
                    this._converted = true;
                    this.Text = this.Title;

                    Configuration.Settings.Save();
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// The load blu ray sub from matroska.
        /// </summary>
        /// <param name="matroskaSubtitleInfo">
        /// The matroska subtitle info.
        /// </param>
        /// <param name="matroska">
        /// The matroska.
        /// </param>
        /// <returns>
        /// The <see cref="bool"/>.
        /// </returns>
        private bool LoadBluRaySubFromMatroska(MatroskaTrackInfo matroskaSubtitleInfo, MatroskaFile matroska)
        {
            if (matroskaSubtitleInfo.ContentEncodingType == 1)
            {
                MessageBox.Show(this._language.NoSupportEncryptedVobSub);
            }

            this.ShowStatus(this._language.ParsingMatroskaFile);
            this.Refresh();
            Cursor.Current = Cursors.WaitCursor;
            var sub = matroska.GetSubtitle(matroskaSubtitleInfo.TrackNumber, this.MatroskaProgress);
            TaskbarList.SetProgressState(this.Handle, TaskbarButtonProgressFlags.NoProgress);
            Cursor.Current = Cursors.Default;

            int noOfErrors = 0;
            string lastError = string.Empty;
            this.MakeHistoryForUndo(this._language.BeforeImportFromMatroskaFile);
            this._subtitleListViewIndex = -1;
            this._subtitle.Paragraphs.Clear();
            var subtitles = new List<BluRaySupParser.PcsData>();
            var log = new StringBuilder();
            foreach (var p in sub)
            {
                byte[] buffer = null;
                if (matroskaSubtitleInfo.ContentEncodingType == 0)
                {
                    // compressed with zlib
                    MemoryStream outStream = new MemoryStream();
                    var outZStream = new zlib.ZOutputStream(outStream);
                    MemoryStream inStream = new MemoryStream(p.Data);
                    try
                    {
                        CopyStream(inStream, outZStream);
                        buffer = new byte[outZStream.TotalOut];
                        outStream.Position = 0;
                        outStream.Read(buffer, 0, buffer.Length);
                    }
                    catch (Exception exception)
                    {
                        var tc = new TimeCode(p.Start);
                        lastError = tc + ": " + exception.Message + ": " + exception.StackTrace;
                        noOfErrors++;
                    }
                    finally
                    {
                        outZStream.Close();
                        inStream.Close();
                    }
                }
                else
                {
                    buffer = p.Data;
                }

                if (buffer != null && buffer.Length > 100)
                {
                    MemoryStream ms = new MemoryStream(buffer);
                    var list = BluRaySupParser.ParseBluRaySup(ms, log, true);
                    foreach (var sup in list)
                    {
                        sup.StartTime = (long)((p.Start - 1) * 90.0);
                        sup.EndTime = (long)((p.End - 1) * 90.0);
                        subtitles.Add(sup);

                        // fix overlapping
                        if (subtitles.Count > 1 && sub[subtitles.Count - 2].End > sub[subtitles.Count - 1].Start)
                        {
                            subtitles[subtitles.Count - 2].EndTime = subtitles[subtitles.Count - 1].StartTime - 1;
                        }
                    }

                    ms.Close();
                }
                else if (subtitles.Count > 0)
                {
                    var lastSub = subtitles[subtitles.Count - 1];
                    if (lastSub.StartTime == lastSub.EndTime)
                    {
                        lastSub.EndTime = (long)((p.Start - 1) * 90.0);
                        if (lastSub.EndTime - lastSub.StartTime > 1000000)
                        {
                            lastSub.EndTime = lastSub.StartTime;
                        }
                    }
                }
            }

            if (noOfErrors > 0)
            {
                MessageBox.Show(string.Format("{0} error(s) occured during extraction of bdsup\r\n\r\n{1}", noOfErrors, lastError));
            }

            using (var formSubOcr = new VobSubOcr())
            {
                formSubOcr.Initialize(subtitles, Configuration.Settings.VobSubOcr, matroska.Path);
                if (this._loading)
                {
                    formSubOcr.Icon = (Icon)this.Icon.Clone();
                    formSubOcr.ShowInTaskbar = true;
                    formSubOcr.ShowIcon = true;
                }

                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    this.MakeHistoryForUndo(this._language.BeforeImportingDvdSubtitle);

                    this._subtitle.Paragraphs.Clear();
                    this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    this._subtitle.WasLoadedWithFrameNumbers = false;
                    this._subtitle.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        this._subtitle.Paragraphs.Add(p);
                    }

                    this.ShowSource();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this._subtitleListViewIndex = -1;
                    this.SubtitleListview1.FirstVisibleIndex = -1;
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(0);

                    this._fileName = string.Empty;
                    this.Text = this.Title;

                    Configuration.Settings.Save();
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// The import subtitle from dvb sup file.
        /// </summary>
        /// <param name="fileName">
        /// The file name.
        /// </param>
        private void ImportSubtitleFromDvbSupFile(string fileName)
        {
            using (var formSubOcr = new VobSubOcr())
            {
                var subtitles = TransportStreamParser.GetDvbSup(fileName);
                formSubOcr.Initialize(subtitles, Configuration.Settings.VobSubOcr, fileName);
                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    this.MakeHistoryForUndo(this._language.BeforeImportingDvdSubtitle);

                    this._subtitle.Paragraphs.Clear();
                    this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    this._subtitle.WasLoadedWithFrameNumbers = false;
                    this._subtitle.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        this._subtitle.Paragraphs.Add(p);
                    }

                    this.ShowSource();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this._subtitleListViewIndex = -1;
                    this.SubtitleListview1.FirstVisibleIndex = -1;
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(0);

                    this._fileName = string.Empty;
                    this.Text = this.Title;

                    Configuration.Settings.Save();
                }
            }
        }

        /// <summary>
        /// The import subtitle from transport stream.
        /// </summary>
        /// <param name="fileName">
        /// The file name.
        /// </param>
        /// <returns>
        /// The <see cref="bool"/>.
        /// </returns>
        private bool ImportSubtitleFromTransportStream(string fileName)
        {
            this.ShowStatus(this._language.ParsingTransportStream);
            this.Refresh();
            var tsParser = new TransportStreamParser();
            tsParser.Parse(fileName, (pos, total) => this.UpdateProgress(pos, total, this._language.ParsingTransportStreamFile));
            this.ShowStatus(string.Empty);
            TaskbarList.SetProgressState(this.Handle, TaskbarButtonProgressFlags.NoProgress);

            if (tsParser.SubtitlePacketIds.Count == 0)
            {
                MessageBox.Show(this._language.NoSubtitlesFound);
                return false;
            }

            int packedId = tsParser.SubtitlePacketIds[0];
            if (tsParser.SubtitlePacketIds.Count > 1)
            {
                using (var subChooser = new TransportStreamSubtitleChooser())
                {
                    subChooser.Initialize(tsParser, fileName);
                    if (subChooser.ShowDialog(this) == DialogResult.Cancel)
                    {
                        return false;
                    }

                    packedId = tsParser.SubtitlePacketIds[subChooser.SelectedIndex];
                }
            }

            var subtitles = tsParser.GetDvbSubtitles(packedId);

            using (var formSubOcr = new VobSubOcr())
            {
                formSubOcr.Initialize(subtitles, Configuration.Settings.VobSubOcr, fileName);
                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    this.MakeHistoryForUndo(this._language.BeforeImportingDvdSubtitle);

                    this._subtitle.Paragraphs.Clear();
                    this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    this._subtitle.WasLoadedWithFrameNumbers = false;
                    this._subtitle.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        this._subtitle.Paragraphs.Add(p);
                    }

                    this.ShowSource();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this._subtitleListViewIndex = -1;
                    this.SubtitleListview1.FirstVisibleIndex = -1;
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(0);

                    this._fileName = string.Empty;
                    this.Text = this.Title;

                    Configuration.Settings.Save();
                    return true;
                }

                return false;
            }
        }

        /// <summary>
        /// The import subtitle from mp 4.
        /// </summary>
        /// <param name="fileName">
        /// The file name.
        /// </param>
        /// <returns>
        /// The <see cref="bool"/>.
        /// </returns>
        private bool ImportSubtitleFromMp4(string fileName)
        {
            var mp4Parser = new MP4Parser(fileName);
            var mp4SubtitleTracks = mp4Parser.GetSubtitleTracks();
            if (mp4SubtitleTracks.Count == 0)
            {
                MessageBox.Show(this._language.NoSubtitlesFound);
                return false;
            }
            else if (mp4SubtitleTracks.Count == 1)
            {
                this.LoadMp4Subtitle(fileName, mp4SubtitleTracks[0]);
                return true;
            }
            else
            {
                using (var subtitleChooser = new MatroskaSubtitleChooser())
                {
                    subtitleChooser.Initialize(mp4SubtitleTracks);
                    if (subtitleChooser.ShowDialog(this) == DialogResult.OK)
                    {
                        this.LoadMp4Subtitle(fileName, mp4SubtitleTracks[subtitleChooser.SelectedIndex]);
                        return true;
                    }
                }

                return false;
            }
        }

        /// <summary>
        /// The import subtitle from div x.
        /// </summary>
        /// <param name="fileName">
        /// The file name.
        /// </param>
        /// <returns>
        /// The <see cref="bool"/>.
        /// </returns>
        private bool ImportSubtitleFromDivX(string fileName)
        {
            var count = 0;
            var list = new List<XSub>();
            using (var f = new FileStream(fileName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
            {
                var searchBuffer = new byte[2048];
                long pos = 0;
                long length = f.Length - 50;
                while (pos < length)
                {
                    f.Position = pos;
                    int readCount = f.Read(searchBuffer, 0, searchBuffer.Length);
                    for (int i = 0; i < readCount; i++)
                    {
                        if (searchBuffer[i] != 0x5b || (i + 4 < readCount && (searchBuffer[i + 1] < 0x30 || searchBuffer[i + 1] > 0x39 || searchBuffer[i + 3] != 0x3a)))
                        {
                            continue;
                        }

                        f.Position = pos + i + 1;

                        var buffer = new byte[26];
                        f.Read(buffer, 0, buffer.Length);

                        if (buffer[2] == 0x3a && // :
                            buffer[5] == 0x3a && // :
                            buffer[8] == 0x2e && // .
                            buffer[12] == 0x2d && // -
                            buffer[15] == 0x3a && // :
                            buffer[18] == 0x3a && // :
                            buffer[21] == 0x2e && // .
                            buffer[25] == 0x5d)
                        { // subtitle time code
                            // ]
                            string timeCode = Encoding.ASCII.GetString(buffer, 0, 25);

                            f.Read(buffer, 0, 2);
                            int width = (int)BitConverter.ToUInt16(buffer, 0);
                            f.Read(buffer, 0, 2);
                            int height = (int)BitConverter.ToUInt16(buffer, 0);
                            f.Read(buffer, 0, 2);
                            int x = (int)BitConverter.ToUInt16(buffer, 0);
                            f.Read(buffer, 0, 2);
                            int y = (int)BitConverter.ToUInt16(buffer, 0);
                            f.Read(buffer, 0, 2);
                            int xEnd = (int)BitConverter.ToUInt16(buffer, 0);
                            f.Read(buffer, 0, 2);
                            int yEnd = (int)BitConverter.ToUInt16(buffer, 0);
                            f.Read(buffer, 0, 2);
                            int RleLength = (int)BitConverter.ToUInt16(buffer, 0);

                            var colorBuffer = new byte[4 * 3]; // four colors with rgb (3 bytes)
                            f.Read(colorBuffer, 0, colorBuffer.Length);

                            buffer = new byte[RleLength];
                            int bytesRead = f.Read(buffer, 0, buffer.Length);

                            if (width > 0 && height > 0 && bytesRead == buffer.Length)
                            {
                                var xSub = new XSub(timeCode, width, height, colorBuffer, buffer);
                                list.Add(xSub);
                                count++;
                            }
                        }
                    }

                    pos += searchBuffer.Length;
                }
            }

            if (count == 0)
            {
                return false;
            }

            using (var formSubOcr = new VobSubOcr())
            {
                formSubOcr.Initialize(list, Configuration.Settings.VobSubOcr, fileName); // TODO: language???
                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    this.MakeHistoryForUndo(this._language.BeforeImportFromMatroskaFile);
                    this._subtitleListViewIndex = -1;
                    this.FileNew();
                    this._subtitle.WasLoadedWithFrameNumbers = false;
                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        this._subtitle.Paragraphs.Add(p);
                    }

                    this.ShowSource();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this._subtitleListViewIndex = -1;
                    this.SubtitleListview1.FirstVisibleIndex = -1;
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(0);

                    this._fileName = Path.GetFileNameWithoutExtension(fileName);
                    this._converted = true;
                    this.Text = this.Title;

                    Configuration.Settings.Save();
                    this.OpenVideo(fileName);
                }
            }

            return true;
        }

        /// <summary>
        /// The load mp 4 subtitle for sync.
        /// </summary>
        /// <param name="mp4SubtitleTrack">
        /// The mp 4 subtitle track.
        /// </param>
        /// <returns>
        /// The <see cref="Subtitle"/>.
        /// </returns>
        private static Subtitle LoadMp4SubtitleForSync(Trak mp4SubtitleTrack)
        {
            var subtitle = new Subtitle();
            if (mp4SubtitleTrack.Mdia.IsVobSubSubtitle)
            {
                return subtitle;
            }
            else
            {
                for (int i = 0; i < mp4SubtitleTrack.Mdia.Minf.Stbl.EndTimeCodes.Count; i++)
                {
                    if (mp4SubtitleTrack.Mdia.Minf.Stbl.Texts.Count > i)
                    {
                        var start = TimeSpan.FromSeconds(mp4SubtitleTrack.Mdia.Minf.Stbl.StartTimeCodes[i]);
                        var end = TimeSpan.FromSeconds(mp4SubtitleTrack.Mdia.Minf.Stbl.EndTimeCodes[i]);
                        string text = mp4SubtitleTrack.Mdia.Minf.Stbl.Texts[i];
                        var p = new Paragraph(text, start.TotalMilliseconds, end.TotalMilliseconds);
                        if (p.EndTime.TotalMilliseconds - p.StartTime.TotalMilliseconds > Configuration.Settings.General.SubtitleMaximumDisplayMilliseconds)
                        {
                            p.EndTime.TotalMilliseconds = p.StartTime.TotalMilliseconds + Configuration.Settings.General.SubtitleMaximumDisplayMilliseconds;
                        }

                        if (mp4SubtitleTrack.Mdia.IsClosedCaption && string.IsNullOrEmpty(text))
                        {
                            // do not add empty lines
                        }
                        else
                        {
                            subtitle.Paragraphs.Add(p);
                        }
                    }
                }
            }

            return subtitle;
        }

        /// <summary>
        /// The load mp 4 subtitle.
        /// </summary>
        /// <param name="fileName">
        /// The file name.
        /// </param>
        /// <param name="mp4SubtitleTrack">
        /// The mp 4 subtitle track.
        /// </param>
        private void LoadMp4Subtitle(string fileName, Trak mp4SubtitleTrack)
        {
            if (mp4SubtitleTrack.Mdia.IsVobSubSubtitle)
            {
                var subPicturesWithTimeCodes = new List<VobSubOcr.SubPicturesWithSeparateTimeCodes>();
                for (int i = 0; i < mp4SubtitleTrack.Mdia.Minf.Stbl.EndTimeCodes.Count; i++)
                {
                    if (mp4SubtitleTrack.Mdia.Minf.Stbl.SubPictures.Count > i)
                    {
                        var start = TimeSpan.FromSeconds(mp4SubtitleTrack.Mdia.Minf.Stbl.StartTimeCodes[i]);
                        var end = TimeSpan.FromSeconds(mp4SubtitleTrack.Mdia.Minf.Stbl.EndTimeCodes[i]);
                        subPicturesWithTimeCodes.Add(new VobSubOcr.SubPicturesWithSeparateTimeCodes(mp4SubtitleTrack.Mdia.Minf.Stbl.SubPictures[i], start, end));
                    }
                }

                using (var formSubOcr = new VobSubOcr())
                {
                    formSubOcr.Initialize(subPicturesWithTimeCodes, Configuration.Settings.VobSubOcr, fileName); // TODO: language???
                    if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                    {
                        this.MakeHistoryForUndo(this._language.BeforeImportFromMatroskaFile);
                        this._subtitleListViewIndex = -1;
                        this.FileNew();
                        this._subtitle.WasLoadedWithFrameNumbers = false;
                        foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                        {
                            this._subtitle.Paragraphs.Add(p);
                        }

                        this.ShowSource();
                        this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                        this._subtitleListViewIndex = -1;
                        this.SubtitleListview1.FirstVisibleIndex = -1;
                        this.SubtitleListview1.SelectIndexAndEnsureVisible(0);

                        this._fileName = Path.GetFileNameWithoutExtension(fileName);
                        this._converted = true;
                        this.Text = this.Title;

                        Configuration.Settings.Save();
                    }
                }
            }
            else
            {
                this.MakeHistoryForUndo(this._language.BeforeImportFromMatroskaFile);
                this._subtitleListViewIndex = -1;
                this.FileNew();

                for (int i = 0; i < mp4SubtitleTrack.Mdia.Minf.Stbl.EndTimeCodes.Count; i++)
                {
                    if (mp4SubtitleTrack.Mdia.Minf.Stbl.Texts.Count > i)
                    {
                        var start = TimeSpan.FromSeconds(mp4SubtitleTrack.Mdia.Minf.Stbl.StartTimeCodes[i]);
                        var end = TimeSpan.FromSeconds(mp4SubtitleTrack.Mdia.Minf.Stbl.EndTimeCodes[i]);
                        string text = mp4SubtitleTrack.Mdia.Minf.Stbl.Texts[i];
                        var p = new Paragraph(text, start.TotalMilliseconds, end.TotalMilliseconds);
                        if (p.EndTime.TotalMilliseconds - p.StartTime.TotalMilliseconds > Configuration.Settings.General.SubtitleMaximumDisplayMilliseconds)
                        {
                            p.EndTime.TotalMilliseconds = p.StartTime.TotalMilliseconds + Configuration.Settings.General.SubtitleMaximumDisplayMilliseconds;
                        }

                        if (mp4SubtitleTrack.Mdia.IsClosedCaption && string.IsNullOrEmpty(text))
                        {
                            // do not add empty lines
                        }
                        else
                        {
                            this._subtitle.Paragraphs.Add(p);
                        }
                    }
                }

                this.SetEncoding(Encoding.UTF8);
                this.ShowStatus(this._language.SubtitleImportedFromMatroskaFile);
                this._subtitle.Renumber();
                this._subtitle.WasLoadedWithFrameNumbers = false;
                if (fileName.EndsWith(".mp4", StringComparison.OrdinalIgnoreCase) || fileName.EndsWith(".m4v", StringComparison.OrdinalIgnoreCase))
                {
                    this._fileName = fileName.Substring(0, fileName.Length - 4);
                    this.Text = this.Title + " - " + this._fileName;
                }
                else
                {
                    this.Text = this.Title;
                }

                this._fileDateTime = new DateTime();

                this._converted = true;

                this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                if (this._subtitle.Paragraphs.Count > 0)
                {
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(0);
                }

                this.ShowSource();
            }
        }

        /// <summary>
        /// The subtitle listview 1_ drag enter.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void SubtitleListview1_DragEnter(object sender, DragEventArgs e)
        {
            // make sure they're actually dropping files (not text or anything else)
            if (e.Data.GetDataPresent(DataFormats.FileDrop, false))
            {
                e.Effect = DragDropEffects.All;
            }
        }

        /// <summary>
        /// The subtitle listview 1_ drag drop.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void SubtitleListview1_DragDrop(object sender, DragEventArgs e)
        {
            this._dragAndDropFiles = (string[])e.Data.GetData(DataFormats.FileDrop);
            if (this._dragAndDropFiles.Length == 1)
            {
                this._dragAndDropTimer.Start();
            }
            else
            {
                MessageBox.Show(this._language.DropOnlyOneFile);
            }
        }

        /// <summary>
        /// The do subtitle listview 1 drop.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void DoSubtitleListview1Drop(object sender, EventArgs e)
        {
            this._dragAndDropTimer.Stop();

            if (this.ContinueNewOrExit())
            {
                string fileName = this._dragAndDropFiles[0];

                var dirName = Path.GetDirectoryName(fileName);
                this.saveFileDialog1.InitialDirectory = dirName;
                this.openFileDialog1.InitialDirectory = dirName;

                var file = new FileInfo(fileName);

                // Do not allow directory drop
                if (FileUtil.IsDirectory(fileName))
                {
                    MessageBox.Show(this._language.ErrorDirectoryDropNotAllowed, file.Name, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                var ext = file.Extension.ToLowerInvariant();

                if (ext == ".mkv")
                {
                    using (var matroska = new MatroskaFile(fileName))
                    {
                        if (matroska.IsValid)
                        {
                            var subtitleList = matroska.GetTracks(true);
                            if (subtitleList.Count == 0)
                            {
                                MessageBox.Show(this._language.NoSubtitlesFound);
                            }
                            else if (subtitleList.Count > 1)
                            {
                                using (var subtitleChooser = new MatroskaSubtitleChooser())
                                {
                                    subtitleChooser.Initialize(subtitleList);
                                    if (subtitleChooser.ShowDialog(this) == DialogResult.OK)
                                    {
                                        this.LoadMatroskaSubtitle(subtitleList[subtitleChooser.SelectedIndex], matroska, false);
                                    }
                                }
                            }
                            else
                            {
                                this.LoadMatroskaSubtitle(subtitleList[0], matroska, false);
                            }
                        }
                    }

                    return;
                }

                if (file.Length < 1024 * 1024 * 2)
                {
                    // max 2 mb
                    this.OpenSubtitle(fileName, null);
                }
                else if (file.Length < 150000000 && ext == ".sub" && this.IsVobSubFile(fileName, true))
                {
                    // max 150 mb
                    this.OpenSubtitle(fileName, null);
                }
                else if (file.Length < 250000000 && ext == ".sup" && FileUtil.IsBluRaySup(fileName))
                {
                    // max 250 mb
                    this.OpenSubtitle(fileName, null);
                }
                else if ((ext == ".ts" || ext == ".rec" || ext == ".mpg" || ext == ".mpeg") && FileUtil.IsTransportStream(fileName))
                {
                    this.OpenSubtitle(fileName, null);
                }
                else if (ext == ".m2ts" && FileUtil.IsM2TransportStream(fileName))
                {
                    this.OpenSubtitle(fileName, null);
                }
                else
                {
                    MessageBox.Show(string.Format(this._language.DropFileXNotAccepted, fileName));
                }
            }
        }

        /// <summary>
        /// The text box source drag enter.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void TextBoxSourceDragEnter(object sender, DragEventArgs e)
        {
            // make sure they're actually dropping files (not text or anything else)
            if (e.Data.GetDataPresent(DataFormats.FileDrop, false))
            {
                e.Effect = DragDropEffects.All;
            }
        }

        /// <summary>
        /// The text box source drag drop.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void TextBoxSourceDragDrop(object sender, DragEventArgs e)
        {
            var files = (string[])e.Data.GetData(DataFormats.FileDrop);
            if (files.Length == 1)
            {
                if (this.ContinueNewOrExit())
                {
                    this.OpenSubtitle(files[0], null);
                }
            }
            else
            {
                MessageBox.Show(this._language.DropOnlyOneFile);
            }
        }

        /// <summary>
        /// The tool strip menu item manual ansi click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemManualAnsiClick(object sender, EventArgs e)
        {
            this.ReloadFromSourceView();
            this.openFileDialog1.Title = this._language.OpenAnsiSubtitle;
            this.openFileDialog1.FileName = string.Empty;
            this.openFileDialog1.Filter = Utilities.GetOpenDialogFilter();
            if (this.openFileDialog1.ShowDialog(this) == DialogResult.OK)
            {
                var chooseEncoding = new ChooseEncoding();
                chooseEncoding.Initialize(this.openFileDialog1.FileName);
                if (chooseEncoding.ShowDialog(this) == DialogResult.OK)
                {
                    Encoding encoding = chooseEncoding.GetEncoding();
                    this.SetEncoding(Encoding.UTF8);
                    this.OpenSubtitle(this.openFileDialog1.FileName, encoding);
                    this._converted = true;
                }
            }
        }

        /// <summary>
        /// The change casing tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ChangeCasingToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.ChangeCasing(false);
        }

        /// <summary>
        /// The change casing.
        /// </summary>
        /// <param name="onlySelectedLines">
        /// The only selected lines.
        /// </param>
        private void ChangeCasing(bool onlySelectedLines)
        {
            if (!this.IsSubtitleLoaded)
            {
                this.DisplaySubtitleNotLoadedMessage();
                return;
            }

            this.SaveSubtitleListviewIndices();
            using (var changeCasing = new ChangeCasing())
            {
                if (onlySelectedLines)
                {
                    changeCasing.Text += " - " + this._language.SelectedLines;
                }

                this.ReloadFromSourceView();
                if (changeCasing.ShowDialog(this) == DialogResult.OK)
                {
                    this.MakeHistoryForUndo(this._language.BeforeChangeCasing);

                    Cursor.Current = Cursors.WaitCursor;
                    var selectedLines = new Subtitle();
                    selectedLines.WasLoadedWithFrameNumbers = this._subtitle.WasLoadedWithFrameNumbers;
                    if (onlySelectedLines)
                    {
                        foreach (int index in this.SubtitleListview1.SelectedIndices)
                        {
                            selectedLines.Paragraphs.Add(new Paragraph(this._subtitle.Paragraphs[index]));
                        }
                    }
                    else
                    {
                        foreach (var p in this._subtitle.Paragraphs)
                        {
                            selectedLines.Paragraphs.Add(new Paragraph(p));
                        }
                    }

                    bool saveChangeCaseChanges = true;
                    var casingNamesLinesChanged = 0;
                    changeCasing.FixCasing(selectedLines, Utilities.AutoDetectLanguageName(Configuration.Settings.General.SpellCheckLanguage, this._subtitle));
                    if (changeCasing.ChangeNamesToo)
                    {
                        using (var changeCasingNames = new ChangeCasingNames())
                        {
                            changeCasingNames.Initialize(selectedLines);
                            if (changeCasingNames.ShowDialog(this) == DialogResult.OK)
                            {
                                changeCasingNames.FixCasing();
                                casingNamesLinesChanged = changeCasingNames.LinesChanged;

                                if (changeCasing.LinesChanged == 0)
                                {
                                    this.ShowStatus(string.Format(this._language.CasingCompleteMessageOnlyNames, casingNamesLinesChanged, this._subtitle.Paragraphs.Count));
                                }
                                else
                                {
                                    this.ShowStatus(string.Format(this._language.CasingCompleteMessage, changeCasing.LinesChanged, this._subtitle.Paragraphs.Count, casingNamesLinesChanged));
                                }
                            }
                            else
                            {
                                saveChangeCaseChanges = false;
                            }
                        }
                    }
                    else
                    {
                        this.ShowStatus(string.Format(this._language.CasingCompleteMessageNoNames, changeCasing.LinesChanged, this._subtitle.Paragraphs.Count));
                    }

                    if (saveChangeCaseChanges)
                    {
                        if (onlySelectedLines)
                        {
                            int i = 0;
                            foreach (int index in this.SubtitleListview1.SelectedIndices)
                            {
                                this._subtitle.Paragraphs[index].Text = selectedLines.Paragraphs[i].Text;
                                i++;
                            }
                        }
                        else
                        {
                            for (int i = 0; i < this._subtitle.Paragraphs.Count; i++)
                            {
                                this._subtitle.Paragraphs[i].Text = selectedLines.Paragraphs[i].Text;
                            }
                        }

                        this.ShowSource();
                        this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                        if (changeCasing.LinesChanged > 0 || casingNamesLinesChanged > 0)
                        {
                            this._subtitleListViewIndex = -1;
                            this.RestoreSubtitleListviewIndices();
                            this.UpdateSourceView();
                        }
                    }

                    Cursor.Current = Cursors.Default;
                }
            }
        }

        /// <summary>
        /// The tool strip menu item change frame rate click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemChangeFrameRateClick(object sender, EventArgs e)
        {
            if (!this.IsSubtitleLoaded)
            {
                this.DisplaySubtitleNotLoadedMessage();
                return;
            }

            int lastSelectedIndex = 0;
            if (this.SubtitleListview1.SelectedItems.Count > 0)
            {
                lastSelectedIndex = this.SubtitleListview1.SelectedItems[0].Index;
            }

            this.ReloadFromSourceView();
            using (var changeFrameRate = new ChangeFrameRate())
            {
                changeFrameRate.Initialize(this.CurrentFrameRate.ToString());
                if (changeFrameRate.ShowDialog(this) == DialogResult.OK)
                {
                    this.MakeHistoryForUndo(this._language.BeforeChangeFrameRate);

                    double oldFrameRate = changeFrameRate.OldFrameRate;
                    double newFrameRate = changeFrameRate.NewFrameRate;
                    this._subtitle.ChangeFrameRate(oldFrameRate, newFrameRate);

                    this.ShowStatus(string.Format(this._language.FrameRateChangedFromXToY, oldFrameRate, newFrameRate));
                    this.toolStripComboBoxFrameRate.Text = newFrameRate.ToString();

                    this.ShowSource();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this._subtitleListViewIndex = -1;
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(lastSelectedIndex);
                }
            }
        }

        /// <summary>
        /// The is vob sub file.
        /// </summary>
        /// <param name="subFileName">
        /// The sub file name.
        /// </param>
        /// <param name="verbose">
        /// The verbose.
        /// </param>
        /// <returns>
        /// The <see cref="bool"/>.
        /// </returns>
        private bool IsVobSubFile(string subFileName, bool verbose)
        {
            try
            {
                if (FileUtil.IsVobSub(subFileName))
                {
                    if (!verbose)
                    {
                        return true;
                    }

                    var idxFileName = Path.Combine(Path.GetDirectoryName(subFileName), Path.GetFileNameWithoutExtension(subFileName) + ".idx");
                    if (File.Exists(idxFileName))
                    {
                        return true;
                    }

                    var dr = MessageBox.Show(string.Format(this._language.IdxFileNotFoundWarning, idxFileName), this._title, MessageBoxButtons.YesNo);
                    return dr == DialogResult.Yes;
                }

                if (verbose)
                {
                    MessageBox.Show(string.Format(this._language.InvalidVobSubHeader, subFileName));
                }
            }
            catch (Exception ex)
            {
                if (verbose)
                {
                    MessageBox.Show(ex.Message);
                }
            }

            return false;
        }

        /// <summary>
        /// The import and ocr sp dvd sup.
        /// </summary>
        /// <param name="fileName">
        /// The file name.
        /// </param>
        /// <param name="showInTaskbar">
        /// The show in taskbar.
        /// </param>
        private void ImportAndOcrSpDvdSup(string fileName, bool showInTaskbar)
        {
            var spList = new List<SpHeader>();

            using (var fs = new FileStream(fileName, FileMode.Open, FileAccess.Read, FileShare.Read))
            {
                var buffer = new byte[SpHeader.SpHeaderLength];
                int bytesRead = fs.Read(buffer, 0, buffer.Length);
                var header = new SpHeader(buffer);

                while (header.Identifier == "SP" && bytesRead > 0 && header.NextBlockPosition > 4)
                {
                    buffer = new byte[header.NextBlockPosition];
                    bytesRead = fs.Read(buffer, 0, buffer.Length);
                    if (bytesRead == buffer.Length)
                    {
                        header.AddPicture(buffer);
                        spList.Add(header);
                    }

                    buffer = new byte[SpHeader.SpHeaderLength];
                    bytesRead = fs.Read(buffer, 0, buffer.Length);
                    header = new SpHeader(buffer);
                }
            }

            using (var vobSubOcr = new VobSubOcr())
            {
                if (showInTaskbar)
                {
                    vobSubOcr.Icon = (Icon)this.Icon.Clone();
                    vobSubOcr.ShowInTaskbar = true;
                    vobSubOcr.ShowIcon = true;
                }

                vobSubOcr.Initialize(fileName, null, Configuration.Settings.VobSubOcr, spList);
                if (vobSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    this.MakeHistoryForUndo(this._language.BeforeImportingVobSubFile);
                    this.FileNew();
                    this._subtitle.Paragraphs.Clear();
                    this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    this._subtitle.WasLoadedWithFrameNumbers = false;
                    this._subtitle.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                    foreach (var p in vobSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        this._subtitle.Paragraphs.Add(p);
                    }

                    this.ShowSource();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this._subtitleListViewIndex = -1;
                    this.SubtitleListview1.FirstVisibleIndex = -1;
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(0);

                    this._fileName = Path.ChangeExtension(vobSubOcr.FileName, ".srt");
                    this.SetTitle();
                    this._converted = true;

                    Configuration.Settings.Save();
                }
            }
        }

        /// <summary>
        /// The import and ocr vob sub subtitle new.
        /// </summary>
        /// <param name="fileName">
        /// The file name.
        /// </param>
        /// <param name="showInTaskbar">
        /// The show in taskbar.
        /// </param>
        private void ImportAndOcrVobSubSubtitleNew(string fileName, bool showInTaskbar)
        {
            if (!this.IsVobSubFile(fileName, true))
            {
                return;
            }

            using (var vobSubOcr = new VobSubOcr())
            {
                if (showInTaskbar)
                {
                    vobSubOcr.Icon = (Icon)this.Icon.Clone();
                    vobSubOcr.ShowInTaskbar = true;
                    vobSubOcr.ShowIcon = true;
                }

                if (vobSubOcr.Initialize(fileName, Configuration.Settings.VobSubOcr, this) && vobSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    this.MakeHistoryForUndo(this._language.BeforeImportingVobSubFile);
                    this.FileNew();
                    this._subtitle.Paragraphs.Clear();
                    this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    this._subtitle.WasLoadedWithFrameNumbers = false;
                    this._subtitle.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                    foreach (var p in vobSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        this._subtitle.Paragraphs.Add(p);
                    }

                    this.ShowSource();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this._subtitleListViewIndex = -1;
                    this.SubtitleListview1.FirstVisibleIndex = -1;
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(0);

                    this._fileName = Path.ChangeExtension(vobSubOcr.FileName, ".srt");
                    this.SetTitle();
                    this._converted = true;

                    Configuration.Settings.Save();
                }
            }
        }

        /// <summary>
        /// The tool strip menu item merge lines click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemMergeLinesClick(object sender, EventArgs e)
        {
            if (this._subtitle.Paragraphs.Count > 0 && this.SubtitleListview1.SelectedItems.Count >= 1)
            {
                this.MergeAfterToolStripMenuItemClick(null, null);
            }
        }

        /// <summary>
        /// The visual sync selected lines tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void VisualSyncSelectedLinesToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.ShowVisualSync(true);
        }

        /// <summary>
        /// The google translate selected lines tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void GoogleTranslateSelectedLinesToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.TranslateViaGoogle(true, true);
        }

        /// <summary>
        /// The save subtitle listview indices.
        /// </summary>
        private void SaveSubtitleListviewIndices()
        {
            this._selectedIndices = new List<int>();
            foreach (int index in this.SubtitleListview1.SelectedIndices)
            {
                this._selectedIndices.Add(index);
            }
        }

        /// <summary>
        /// The restore subtitle listview indices.
        /// </summary>
        private void RestoreSubtitleListviewIndices()
        {
            this._subtitleListViewIndex = -1;
            if (this._selectedIndices != null)
            {
                this.SubtitleListview1.SelectNone();
                int i = 0;
                foreach (int index in this._selectedIndices)
                {
                    if (index >= 0 && index < this.SubtitleListview1.Items.Count)
                    {
                        this.SubtitleListview1.Items[index].Selected = true;
                        if (i == 0)
                        {
                            this.SubtitleListview1.Items[index].EnsureVisible();
                        }
                    }

                    i++;
                }
            }
        }

        /// <summary>
        /// The show selected lines earlierlater tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ShowSelectedLinesEarlierlaterToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!this.IsSubtitleLoaded)
            {
                this.DisplaySubtitleNotLoadedMessage();
                return;
            }

            if (this._showEarlierOrLater != null && !this._showEarlierOrLater.IsDisposed)
            {
                this._showEarlierOrLater.WindowState = FormWindowState.Normal;
                this._showEarlierOrLater.Focus();
                return;
            }

            bool waveformEnabled = this.timerWaveform.Enabled;
            this.timerWaveform.Stop();
            this.timer1.Stop();

            this._showEarlierOrLater = new ShowEarlierLater();
            if (!this._showEarlierOrLater.IsPositionAndSizeSaved)
            {
                this._showEarlierOrLater.Top = this.Top + 100;
                this._showEarlierOrLater.Left = this.Left + (this.Width / 2) - (this._showEarlierOrLater.Width / 3);
            }

            this._showEarlierOrLater.Initialize(this.ShowEarlierOrLater, true);
            this.MakeHistoryForUndo(this._language.BeforeShowSelectedLinesEarlierLater);
            this._showEarlierOrLater.Show(this);

            this.timerWaveform.Enabled = waveformEnabled;
            this.timer1.Start();

            this.RefreshSelectedParagraph();
        }

        /// <summary>
        /// The find focused control.
        /// </summary>
        /// <param name="control">
        /// The control.
        /// </param>
        /// <returns>
        /// The <see cref="Control"/>.
        /// </returns>
        public static Control FindFocusedControl(Control control)
        {
            var container = control as ContainerControl;
            while (container != null)
            {
                control = container.ActiveControl;
                container = control as ContainerControl;
            }

            return control;
        }

        /// <summary>
        /// The serialize subtitle.
        /// </summary>
        /// <param name="subtitle">
        /// The subtitle.
        /// </param>
        /// <returns>
        /// The <see cref="string"/>.
        /// </returns>
        private static string SerializeSubtitle(Subtitle subtitle)
        {
            var sb = new StringBuilder();
            for (int i = 0; i < subtitle.Paragraphs.Count; i++)
            {
                var p = subtitle.Paragraphs[i];
                sb.Append(p.StartTime.TotalMilliseconds + (p.EndTime.TotalMilliseconds * 127));
                sb.Append(p.Text);
            }

            return sb.ToString().TrimEnd();
        }

        /// <summary>
        /// The main key down.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        internal void MainKeyDown(object sender, KeyEventArgs e)
        {
            if (e.Modifiers == Keys.Alt && e.KeyCode == (Keys.RButton | Keys.ShiftKey) && this.textBoxListViewText.Focused)
            { // annoying that focus leaves textbox while typing, when pressing Alt alone
                e.SuppressKeyPress = true;
                return;
            }

            if (e.Modifiers == Keys.Alt && e.KeyCode == (Keys.RButton | Keys.ShiftKey))
            {
                return;
            }

            if (e.Modifiers == Keys.Shift && e.KeyCode == Keys.ShiftKey)
            {
                return;
            }

            if (e.Modifiers == Keys.Control && e.KeyCode == (Keys.LButton | Keys.ShiftKey))
            {
                return;
            }

            if (e.Modifiers == (Keys.Control | Keys.Shift) && e.KeyCode == Keys.ShiftKey)
            {
                return;
            }

            var fc = FindFocusedControl(this);
            if (fc != null && e.Modifiers != Keys.Control && e.Modifiers != (Keys.Control | Keys.Shift) && e.Modifiers != (Keys.Control | Keys.Shift | Keys.Alt))
            {
                // do not check for shortcuts if text is being entered and a textbox is focused
                if ((fc.Name == this.textBoxListViewText.Name || fc.Name == this.textBoxListViewTextAlternate.Name || fc.Name == this.textBoxSearchWord.Name) && e.KeyCode >= Keys.A && e.KeyCode <= Keys.Z)
                {
                    return;
                }

                // do not check for shortcuts if a number is being entered and a time box is focused
                if (fc.Parent != null && (fc.Parent.Name == this.timeUpDownStartTime.Name || fc.Parent.Name == this.numericUpDownDuration.Name) && (e.KeyCode >= Keys.NumPad0 && e.KeyCode <= Keys.NumPad9 || e.KeyValue >= 48 && e.KeyValue <= 57))
                {
                    return;
                }
            }

            bool inListView = this.tabControlSubtitle.SelectedIndex == TabControlListView;

            if (e.KeyCode == Keys.Escape && !this._cancelWordSpellCheck)
            {
                this._cancelWordSpellCheck = true;
            }
            else if (inListView && (Keys.Shift | Keys.Control) == e.Modifiers && e.KeyCode == Keys.B)
            {
                this.AutoBalanceLinesAndAllow2PlusLines();
                e.SuppressKeyPress = true;
            }
            else if (this.audioVisualizer != null && this.audioVisualizer.Visible && e.KeyData == this._waveformVerticalZoom)
            {
                if (this.audioVisualizer.VerticalZoomPercent >= 0.1)
                {
                    this.audioVisualizer.VerticalZoomPercent -= 0.05;
                }

                e.SuppressKeyPress = true;
            }
            else if (this.audioVisualizer != null && this.audioVisualizer.Visible && e.KeyData == this._waveformVerticalZoomOut)
            {
                if (this.audioVisualizer.VerticalZoomPercent < 1)
                {
                    this.audioVisualizer.VerticalZoomPercent += 0.05;
                }

                e.SuppressKeyPress = true;
            }

            if (this.audioVisualizer != null && this.audioVisualizer.Visible && e.KeyData == this._waveformZoomIn)
            {
                this.audioVisualizer.ZoomIn();
                e.SuppressKeyPress = true;
            }

            if (this.audioVisualizer != null && this.audioVisualizer.Visible && e.KeyData == this._waveformZoomOut)
            {
                this.audioVisualizer.ZoomOut();
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == this._videoPlayFirstSelected && !string.IsNullOrEmpty(this._videoFileName))
            {
                this.PlayFirstSelectedSubtitle();
            }
            else if (this.audioVisualizer != null && this.audioVisualizer.Visible && e.KeyData == this._waveformPlaySelection)
            {
                this.toolStripMenuItemWaveformPlaySelection_Click(null, null);
                e.SuppressKeyPress = true;
            }
            else if (this.audioVisualizer != null && this.audioVisualizer.Visible && e.KeyData == this._waveformSearchSilenceForward)
            {
                this.audioVisualizer.FindDataBelowThreshold(Configuration.Settings.VideoControls.WaveformSeeksSilenceMaxVolume, Configuration.Settings.VideoControls.WaveformSeeksSilenceDurationSeconds);
                e.SuppressKeyPress = true;
            }
            else if (this.audioVisualizer != null && this.audioVisualizer.Visible && e.KeyData == this._waveformSearchSilenceBack)
            {
                this.audioVisualizer.FindDataBelowThresholdBack(Configuration.Settings.VideoControls.WaveformSeeksSilenceMaxVolume, Configuration.Settings.VideoControls.WaveformSeeksSilenceDurationSeconds);
                e.SuppressKeyPress = true;
            }
            else if (this._mainInsertBefore == e.KeyData && inListView)
            {
                this.InsertBefore();
                e.SuppressKeyPress = true;
                this.textBoxListViewText.Focus();
            }
            else if (this._mainMergeDialog == e.KeyData && inListView)
            {
                this.MergeDialogs();
                e.SuppressKeyPress = true;
            }
            else if (this._mainListViewToggleDashes == e.KeyData && inListView)
            {
                this.ToggleDashes();
                e.SuppressKeyPress = true;
            }
            else if (!this.toolStripMenuItemReverseRightToLeftStartEnd.Visible && this._mainEditReverseStartAndEndingForRTL == e.KeyData && inListView)
            {
                this.ReverseStartAndEndingForRTL();
                e.SuppressKeyPress = true;
            }
            else if (this.toolStripMenuItemUndo.ShortcutKeys == e.KeyData)
            {
                // undo
                this.toolStripMenuItemUndo_Click(sender, e);
                e.SuppressKeyPress = true;
            }
            else if (this.toolStripMenuItemRedo.ShortcutKeys == e.KeyData)
            {
                // redo
                this.toolStripMenuItemRedo_Click(sender, e);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyCode == Keys.Down && e.Modifiers == Keys.Alt)
            {
                if (this.AutoRepeatContinueOn)
                {
                    this.Next();
                }
                else
                {
                    this.ButtonNextClick(null, null);
                }
            }
            else if (e.KeyCode == Keys.Up && e.Modifiers == Keys.Alt)
            {
                if (this.AutoRepeatContinueOn)
                {
                    this.PlayPrevious();
                }
                else
                {
                    this.ButtonPreviousClick(null, null);
                }
            }
            else if (this._mainGeneralGoToNextSubtitle == e.KeyData)
            {
                if (this.AutoRepeatContinueOn)
                {
                    this.Next();
                }
                else
                {
                    this.ButtonNextClick(null, null);
                }

                e.SuppressKeyPress = true;
            }
            else if (this._mainGeneralGoToPrevSubtitle == e.KeyData)
            {
                if (this.AutoRepeatContinueOn)
                {
                    this.PlayPrevious();
                }
                else
                {
                    this.ButtonPreviousClick(null, null);
                }

                e.SuppressKeyPress = true;
            }
            else if (this._mainGeneralGoToStartOfCurrentSubtitle == e.KeyData)
            {
                if (this.SubtitleListview1.SelectedItems.Count == 1 && this.mediaPlayer.VideoPlayer != null)
                {
                    this.mediaPlayer.CurrentPosition = this._subtitle.Paragraphs[this.SubtitleListview1.SelectedItems[0].Index].StartTime.TotalSeconds;
                    e.SuppressKeyPress = true;
                }

                e.SuppressKeyPress = true;
            }
            else if (this._mainGeneralGoToEndOfCurrentSubtitle == e.KeyData)
            {
                if (this.SubtitleListview1.SelectedItems.Count == 1 && this.mediaPlayer.VideoPlayer != null)
                {
                    this.mediaPlayer.CurrentPosition = this._subtitle.Paragraphs[this.SubtitleListview1.SelectedItems[0].Index].EndTime.TotalSeconds;
                    e.SuppressKeyPress = true;
                }

                e.SuppressKeyPress = true;
            }
            else if (this._mainGeneralFileSaveAll == e.KeyData)
            {
                this.ToolStripButtonSaveClick(sender, e);
                e.SuppressKeyPress = true;
            }
            else if (this._mainToggleFocus == e.KeyData && inListView)
            {
                if (this.SubtitleListview1.Focused)
                {
                    this.textBoxListViewText.Focus();
                }
                else
                {
                    this.SubtitleListview1.Focus();
                }

                e.SuppressKeyPress = true;
            }
            else if (e.KeyCode == Keys.Home && e.Modifiers == Keys.Alt)
            {
                this.SubtitleListview1.FirstVisibleIndex = -1;
                this.SubtitleListview1.SelectIndexAndEnsureVisible(0);
                e.SuppressKeyPress = true;
            }
            else if (e.KeyCode == Keys.End && e.Modifiers == Keys.Alt)
            {
                this.SubtitleListview1.SelectIndexAndEnsureVisible(this.SubtitleListview1.Items.Count - 1);
                e.SuppressKeyPress = true;
            }
            else if (this._mainGeneralGoToFirstSelectedLine == e.KeyData)
            {
                // Locate first selected line in subtitle listview
                if (this.SubtitleListview1.SelectedItems.Count > 0)
                {
                    this.SubtitleListview1.SelectedItems[0].EnsureVisible();
                }

                e.SuppressKeyPress = true;
            }
            else if (this._mainGeneralGoToFirstEmptyLine == e.KeyData)
            {
                // Go to first empty line - if any
                this.GoToFirstEmptyLine();
                e.SuppressKeyPress = true;
            }
            else if (this._mainGeneralMergeSelectedLines == e.KeyData)
            {
                if (this._subtitle.Paragraphs.Count > 0 && this.SubtitleListview1.SelectedItems.Count >= 1)
                {
                    e.SuppressKeyPress = true;
                    if (this.SubtitleListview1.SelectedItems.Count == 2)
                    {
                        this.MergeAfterToolStripMenuItemClick(null, null);
                    }
                    else
                    {
                        this.MergeSelectedLines();
                    }
                }
            }
            else if (this._mainGeneralMergeSelectedLinesOnlyFirstText == e.KeyData)
            {
                if (this._subtitle.Paragraphs.Count > 0 && this.SubtitleListview1.SelectedItems.Count >= 1)
                {
                    e.SuppressKeyPress = true;
                    this.MergeSelectedLinesOnlyFirstText();
                }
            }
            else if (this._mainGeneralToggleTranslationMode == e.KeyData)
            { // toggle translator mode
                this.EditToolStripMenuItemDropDownOpening(null, null);
                this.toolStripMenuItemTranslationMode_Click(null, null);
            }
            else if (e.KeyData == this._videoPlayPauseToggle)
            {
                if (this.mediaPlayer.VideoPlayer != null)
                {
                    this._endSeconds = -1;
                    this.mediaPlayer.TogglePlayPause();
                    e.SuppressKeyPress = true;
                }
            }
            else if (e.KeyData == this._videoPause)
            {
                if (this.mediaPlayer.VideoPlayer != null)
                {
                    this._endSeconds = -1;
                    this.mediaPlayer.Pause();
                    e.SuppressKeyPress = true;
                }
            }
            else if (e.Modifiers == (Keys.Control | Keys.Shift) && e.KeyCode == Keys.Right)
            {
                if (!this.textBoxListViewText.Focused && !this.textBoxListViewTextAlternate.Focused)
                {
                    this.mediaPlayer.CurrentPosition += 1.0;
                    e.SuppressKeyPress = true;
                }
            }
            else if (e.Modifiers == (Keys.Control | Keys.Shift) && e.KeyCode == Keys.Left)
            {
                if (!this.textBoxListViewText.Focused && !this.textBoxListViewTextAlternate.Focused)
                {
                    this.mediaPlayer.CurrentPosition -= 1.0;
                    e.SuppressKeyPress = true;
                }
            }
            else if (e.Modifiers == Keys.None && e.KeyCode == Keys.Space)
            {
                if (!this.textBoxListViewText.Focused && !this.textBoxListViewTextAlternate.Focused && !this.textBoxSource.Focused && this.mediaPlayer.VideoPlayer != null)
                {
                    if (this.audioVisualizer != null && this.audioVisualizer.Focused || this.mediaPlayer.Focused || this.SubtitleListview1.Focused)
                    {
                        this._endSeconds = -1;
                        this.mediaPlayer.TogglePlayPause();
                        e.SuppressKeyPress = true;
                    }
                }
            }
            else if (e.Modifiers == Keys.Alt && e.KeyCode == Keys.D1)
            {
                if (this.SubtitleListview1.SelectedItems.Count > 0 && this._subtitle != null && this.mediaPlayer.VideoPlayer != null)
                {
                    var p = this._subtitle.GetParagraphOrDefault(this.SubtitleListview1.SelectedItems[0].Index);
                    if (p != null)
                    {
                        this.mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                        e.SuppressKeyPress = true;
                    }
                }
            }
            else if (e.Modifiers == Keys.Alt && e.KeyCode == Keys.D2)
            {
                if (this.SubtitleListview1.SelectedItems.Count > 0 && this._subtitle != null && this.mediaPlayer.VideoPlayer != null)
                {
                    var p = this._subtitle.GetParagraphOrDefault(this.SubtitleListview1.SelectedItems[0].Index);
                    if (p != null)
                    {
                        this.mediaPlayer.CurrentPosition = p.EndTime.TotalSeconds;
                        e.SuppressKeyPress = true;
                    }
                }
            }
            else if (e.Modifiers == Keys.Alt && e.KeyCode == Keys.D3)
            {
                if (this.SubtitleListview1.SelectedItems.Count > 0 && this._subtitle != null && this.mediaPlayer.VideoPlayer != null)
                {
                    int index = this.SubtitleListview1.SelectedItems[0].Index - 1;
                    var p = this._subtitle.GetParagraphOrDefault(index);
                    if (p != null)
                    {
                        this.SubtitleListview1.SelectIndexAndEnsureVisible(index);
                        this.mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                        e.SuppressKeyPress = true;
                    }
                }
            }
            else if (e.Modifiers == Keys.Alt && e.KeyCode == Keys.D4)
            {
                if (this.SubtitleListview1.SelectedItems.Count > 0 && this._subtitle != null && this.mediaPlayer.VideoPlayer != null)
                {
                    int index = this.SubtitleListview1.SelectedItems[0].Index + 1;
                    var p = this._subtitle.GetParagraphOrDefault(index);
                    if (p != null)
                    {
                        this.SubtitleListview1.SelectIndexAndEnsureVisible(index);
                        this.mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                        e.SuppressKeyPress = true;
                    }
                }
            }
            else if (e.Modifiers == Keys.None && e.KeyCode == Keys.F4)
            {
                if (this.SubtitleListview1.SelectedItems.Count > 0 && this._subtitle != null && this.mediaPlayer.VideoPlayer != null)
                {
                    this.mediaPlayer.Pause();
                    var p = this._subtitle.GetParagraphOrDefault(this.SubtitleListview1.SelectedItems[0].Index);
                    if (p != null)
                    {
                        if (Math.Abs(this.mediaPlayer.CurrentPosition - p.StartTime.TotalSeconds) < 0.1)
                        {
                            this.mediaPlayer.CurrentPosition = p.EndTime.TotalSeconds;
                        }
                        else
                        {
                            this.mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                        }

                        e.SuppressKeyPress = true;
                    }
                }
            }
            else if (e.Modifiers == Keys.None && e.KeyCode == Keys.F5)
            {
                if (this.SubtitleListview1.SelectedItems.Count > 0 && this._subtitle != null && this.mediaPlayer.VideoPlayer != null)
                {
                    var p = this._subtitle.GetParagraphOrDefault(this.SubtitleListview1.SelectedItems[0].Index);
                    if (p != null)
                    {
                        this.mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                        this.ShowSubtitle();
                        this.mediaPlayer.Play();
                        this._endSeconds = p.EndTime.TotalSeconds;
                        e.SuppressKeyPress = true;
                    }
                }
            }
            else if (e.Modifiers == Keys.None && e.KeyCode == Keys.F6)
            {
                if (this.mediaPlayer.VideoPlayer != null)
                {
                    this.GotoSubPositionAndPause();
                }
            }
            else if (e.Modifiers == Keys.None && e.KeyCode == Keys.F7)
            {
                if (this.mediaPlayer.VideoPlayer != null)
                {
                    this.GoBackSeconds(3);
                }
            }
            else if (e.Modifiers == Keys.None && e.KeyCode == Keys.F8)
            {
                if (this.mediaPlayer.VideoPlayer != null)
                {
                    this._endSeconds = -1;
                    this.mediaPlayer.TogglePlayPause();
                    e.SuppressKeyPress = true;
                }
            }
            else if (e.Modifiers == (Keys.Control | Keys.Alt | Keys.Shift) && e.KeyCode == Keys.W)
            {
                // watermak
                Encoding enc = this.GetCurrentEncoding();
                if (enc != Encoding.UTF8 && enc != Encoding.UTF32 && enc != Encoding.Unicode && enc != Encoding.UTF7)
                {
                    MessageBox.Show("Watermark only works with unicode file encoding");
                }
                else
                {
                    using (var watermarkForm = new Watermark())
                    {
                        watermarkForm.Initialize(this._subtitle, this.FirstSelectedIndex);
                        if (watermarkForm.ShowDialog(this) == DialogResult.OK)
                        {
                            watermarkForm.AddOrRemove(this._subtitle);
                            this.RefreshSelectedParagraph();
                        }
                    }
                }
            }
            else if (e.Modifiers == (Keys.Control | Keys.Alt | Keys.Shift) && e.KeyCode == Keys.F)
            {
                // Toggle HHMMSSFF / HHMMSSMMM
                Configuration.Settings.General.UseTimeFormatHHMMSSFF = !Configuration.Settings.General.UseTimeFormatHHMMSSFF;
                this.RefreshTimeCodeMode();
            }
            else if (this._mainGeneralSwitchTranslationAndOriginal == e.KeyData)
            {
                // switch original/current
                if (this._subtitleAlternate != null && this._subtitleAlternate.Paragraphs.Count > 0 && this._networkSession == null)
                {
                    int firstIndex = this.FirstSelectedIndex;
                    double firstMs = -1;
                    if (firstIndex >= 0)
                    {
                        firstMs = this._subtitle.Paragraphs[firstIndex].StartTime.TotalMilliseconds;
                    }

                    var temp = this._subtitle;
                    this._subtitle = this._subtitleAlternate;
                    this._subtitleAlternate = temp;

                    var tempName = this._fileName;
                    this._fileName = this._subtitleAlternateFileName;
                    this._subtitleAlternateFileName = tempName;

                    var tempChangeSubText = this._changeSubtitleToString;
                    this._changeSubtitleToString = this._changeAlternateSubtitleToString;
                    this._changeAlternateSubtitleToString = tempChangeSubText;

                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);

                    this._subtitleListViewIndex = -1;
                    if (firstIndex >= 0 && this._subtitle.Paragraphs.Count > firstIndex && this._subtitle.Paragraphs[firstIndex].StartTime.TotalMilliseconds == firstMs)
                    {
                        this.SubtitleListview1.SelectIndexAndEnsureVisible(firstIndex);
                    }
                    else
                    {
                        this.RefreshSelectedParagraph();
                    }

                    this.SetTitle();

                    this._fileDateTime = new DateTime();
                }
            }
            else if (this._mainGeneralMergeTranslationAndOriginal == e.KeyData)
            {
                // Merge translation and original
                if (this._subtitleAlternate != null && this._subtitleAlternate.Paragraphs.Count > 0 && this._networkSession == null)
                {
                    if (this.ContinueNewOrExit())
                    {
                        var subtitle = new Subtitle();
                        foreach (var p in this._subtitle.Paragraphs)
                        {
                            var newP = new Paragraph(p);
                            var original = Utilities.GetOriginalParagraph(this._subtitle.GetIndex(p), p, this._subtitleAlternate.Paragraphs);
                            if (original != null)
                            {
                                newP.Text += Environment.NewLine + Environment.NewLine + original.Text;
                            }

                            subtitle.Paragraphs.Add(newP);
                        }

                        this.RemoveAlternate(true);
                        this.FileNew();
                        this._subtitle = subtitle;
                        this._subtitleListViewIndex = -1;
                        this.ShowSource();
                        this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                        this.SubtitleListview1.SelectIndexAndEnsureVisible(0);

                        e.SuppressKeyPress = true;
                    }
                }
            }
            else if (e.KeyData == this._toggleVideoDockUndock)
            {
                if (this._isVideoControlsUndocked)
                {
                    this.RedockVideoControlsToolStripMenuItemClick(null, null);
                }
                else
                {
                    this.UndockVideoControlsToolStripMenuItemClick(null, null);
                }
            }
            else if (this.mediaPlayer.VideoPlayer != null && e.KeyData == this._video1FrameLeft)
            {
                this.MoveVideoSeconds(-1.0 / Configuration.Settings.General.CurrentFrameRate);
                e.SuppressKeyPress = true;
            }
            else if (this.mediaPlayer.VideoPlayer != null && e.KeyData == this._video1FrameRight)
            {
                this.MoveVideoSeconds(1.0 / Configuration.Settings.General.CurrentFrameRate);
                e.SuppressKeyPress = true;
            }
            else if (this.mediaPlayer.VideoPlayer != null && e.KeyData == this._video100MsLeft)
            {
                this.MoveVideoSeconds(-0.1);
                e.SuppressKeyPress = true;
            }
            else if (this.mediaPlayer.VideoPlayer != null && e.KeyData == this._video100MsRight)
            {
                this.MoveVideoSeconds(0.1);
                e.SuppressKeyPress = true;
            }
            else if (this.mediaPlayer.VideoPlayer != null && e.KeyData == this._video500MsLeft)
            {
                this.MoveVideoSeconds(-0.5);
                e.SuppressKeyPress = true;
            }
            else if (this.mediaPlayer.VideoPlayer != null && e.KeyData == this._video500MsRight)
            {
                this.MoveVideoSeconds(0.5);
                e.SuppressKeyPress = true;
            }
            else if (this.mediaPlayer.VideoPlayer != null && e.KeyData == this._video1000MsLeft)
            {
                this.MoveVideoSeconds(-1.0);
                e.SuppressKeyPress = true;
            }
            else if (this.mediaPlayer.VideoPlayer != null && e.KeyData == this._video1000MsRight)
            {
                this.MoveVideoSeconds(1.0);
                e.SuppressKeyPress = true;
            }
            else if (this._mainToolsBeamer == e.KeyData)
            {
                var beamer = new Beamer(this, this._subtitle, this._subtitleListViewIndex);
                beamer.ShowDialog(this);
            }
            else if (e.KeyData == this._mainVideoFullscreen)
            {
                // fullscreen
                this.GoFullscreen();
            }
            else if (this.audioVisualizer.Focused && this.audioVisualizer.NewSelectionParagraph != null && e.KeyData == this._waveformAddTextAtHere)
            {
                this.addParagraphHereToolStripMenuItem_Click(null, null);
                e.SuppressKeyPress = true;
            }
            else if (this.audioVisualizer.Focused && e.KeyData == this._waveformFocusListView)
            {
                this.SubtitleListview1.Focus();
                e.SuppressKeyPress = true;
            }
            else if (this.audioVisualizer.Focused && e.KeyCode == Keys.Delete)
            {
                this.ToolStripMenuItemDeleteClick(null, null);
                e.SuppressKeyPress = true;
            }
            else if (this._mainToolsAutoDuration == e.KeyData)
            {
                this.MakeAutoDuration();
                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == (Keys.Control | Keys.Alt | Keys.Shift) && e.KeyCode == Keys.I)
            {
                // watermak
                using (var form = new ImportUnknownFormat(string.Empty))
                {
                    if (form.ShowDialog(this) == DialogResult.OK)
                    {
                        this._subtitle = form.ImportedSubitle;
                        this._fileName = null;
                        this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if ((this.textBoxListViewText.Focused || (this.SubtitleListview1.Focused && this.SubtitleListview1.SelectedItems.Count == 1) || (this.audioVisualizer.Focused && this.SubtitleListview1.SelectedItems.Count == 1)) && this._mainTextBoxMoveLastWordDown == e.KeyData)
            {
                this.MoveLastWordDown();
                e.SuppressKeyPress = true;
            }
            else if ((this.textBoxListViewText.Focused || (this.SubtitleListview1.Focused && this.SubtitleListview1.SelectedItems.Count == 1) || (this.audioVisualizer.Focused && this.SubtitleListview1.SelectedItems.Count == 1)) && this._mainTextBoxMoveFirstWordFromNextUp == e.KeyData)
            {
                this.MoveFirstWordInNextUp();
                e.SuppressKeyPress = true;
            }

            // TABS - MUST BE LAST
            else if (this.tabControlButtons.SelectedTab == this.tabPageAdjust)
            {
                if (this._mainAdjustSelected100MsForward == e.KeyData)
                {
                    this.ShowEarlierOrLater(100, SelectionChoice.SelectionOnly);
                    e.SuppressKeyPress = true;
                }
                else if (this._mainAdjustSelected100MsBack == e.KeyData)
                {
                    this.ShowEarlierOrLater(-100, SelectionChoice.SelectionOnly);
                    e.SuppressKeyPress = true;
                }
                else if (this.mediaPlayer.VideoPlayer != null)
                {
                    if (this._mainAdjustSetStartAndOffsetTheRest == e.KeyData)
                    {
                        this.ButtonSetStartAndOffsetRestClick(null, null);
                        e.SuppressKeyPress = true;
                    }
                    else if (this._mainAdjustSetEndAndOffsetTheRest == e.KeyData)
                    {
                        this.SetEndAndOffsetTheRest(false);
                        e.SuppressKeyPress = true;
                    }
                    else if (this._mainAdjustSetEndAndOffsetTheRestAndGoToNext == e.KeyData)
                    {
                        this.SetEndAndOffsetTheRest(true);
                        e.SuppressKeyPress = true;
                    }
                    else if (this._mainAdjustSetEndAndGotoNext == e.KeyData)
                    {
                        this.ButtonSetEndAndGoToNextClick(null, null);
                        e.SuppressKeyPress = true;
                    }
                    else if (e.Modifiers == Keys.None && e.KeyCode == Keys.F9)
                    {
                        this.ButtonSetStartAndOffsetRestClick(null, null);
                        e.SuppressKeyPress = true;
                    }
                    else if (e.Modifiers == Keys.None && e.KeyCode == Keys.F10)
                    {
                        this.ButtonSetEndAndGoToNextClick(null, null);
                        e.SuppressKeyPress = true;
                    }
                    else if ((e.Modifiers == Keys.None && e.KeyCode == Keys.F11) || this._mainAdjustSetStart == e.KeyData)
                    {
                        this.buttonSetStartTime_Click(null, null);
                        e.SuppressKeyPress = true;
                    }
                    else if (this._mainAdjustSetStartKeepDuration == e.KeyData)
                    {
                        this.SetStartTime(true);
                        e.SuppressKeyPress = true;
                    }
                    else if (e.Modifiers == Keys.None && e.KeyCode == Keys.F11)
                    {
                        this.SetStartTime(false);
                        e.SuppressKeyPress = true;
                    }
                    else if ((e.Modifiers == Keys.None && e.KeyCode == Keys.F12) || this._mainAdjustSetEnd == e.KeyData)
                    {
                        this.StopAutoDuration();
                        this.ButtonSetEndClick(null, null);
                        e.SuppressKeyPress = true;
                    }
                    else if (this._mainAdjustInsertViaEndAutoStartAndGoToNext == e.KeyData)
                    {
                        this.SetCurrentViaEndPositionAndGotoNext(this.FirstSelectedIndex);
                        e.SuppressKeyPress = true;
                    }
                    else if (this._mainAdjustSetStartAutoDurationAndGoToNext == e.KeyData)
                    {
                        this.SetCurrentStartAutoDurationAndGotoNext(this.FirstSelectedIndex);
                        e.SuppressKeyPress = true;
                    }
                    else if (this._mainAdjustSetEndNextStartAndGoToNext == e.KeyData)
                    {
                        this.SetCurrentEndNextStartAndGoToNext(this.FirstSelectedIndex);
                        e.SuppressKeyPress = true;
                    }
                    else if (this._mainAdjustStartDownEndUpAndGoToNext == e.KeyData && this._mainAdjustStartDownEndUpAndGoToNextParagraph == null)
                    {
                        this._mainAdjustStartDownEndUpAndGoToNextParagraph = this._subtitle.GetParagraphOrDefault(this.FirstSelectedIndex);
                        this.SetStartTime(true);
                        e.SuppressKeyPress = true;
                    }
                }
            }
            else if (this.tabControlButtons.SelectedTab == this.tabPageCreate && this.mediaPlayer.VideoPlayer != null)
            {
                if (e.Modifiers == Keys.Control && e.KeyCode == Keys.F9)
                {
                    this.InsertNewTextAtVideoPosition();
                    e.SuppressKeyPress = true;
                }
                else if ((e.Modifiers == Keys.Shift && e.KeyCode == Keys.F9) || this._mainCreateInsertSubAtVideoPos == e.KeyData)
                {
                    var p = this.InsertNewTextAtVideoPosition();
                    p.Text = string.Empty; // p.StartTime.ToShortString();
                    this.SubtitleListview1.SetText(this._subtitle.GetIndex(p), p.Text);
                    this.textBoxListViewText.Text = p.Text;
                    e.SuppressKeyPress = true;
                }
                else if (e.Modifiers == Keys.Alt && e.KeyCode == Keys.F9)
                {
                    this.StopAutoDuration();
                    this.ButtonSetEndClick(null, null);
                    e.SuppressKeyPress = true;
                }
                else if (e.Modifiers == Keys.None && e.KeyCode == Keys.F9)
                {
                    this.ButtonInsertNewTextClick(null, null);
                    e.SuppressKeyPress = true;
                }
                else if ((e.Modifiers == Keys.None && e.KeyCode == Keys.F10) || this._mainCreatePlayFromJustBefore == e.KeyData)
                {
                    this.buttonBeforeText_Click(null, null);
                    e.SuppressKeyPress = true;
                }
                else if ((e.Modifiers == Keys.None && e.KeyCode == Keys.F11) || this._mainCreateSetStart == e.KeyData)
                {
                    this.buttonSetStartTime_Click(null, null);
                    e.SuppressKeyPress = true;
                }
                else if ((e.Modifiers == Keys.None && e.KeyCode == Keys.F12) || this._mainCreateSetEnd == e.KeyData)
                {
                    this.StopAutoDuration();
                    this.ButtonSetEndClick(null, null);
                    e.SuppressKeyPress = true;
                }
                else if (this._mainCreateSetEndAddNewAndGoToNew == e.KeyData)
                {
                    this.StopAutoDuration();
                    e.SuppressKeyPress = true;

                    if (this.SubtitleListview1.SelectedItems.Count == 1)
                    {
                        double videoPosition = this.mediaPlayer.CurrentPosition;
                        if (!this.mediaPlayer.IsPaused)
                        {
                            videoPosition -= Configuration.Settings.General.SetStartEndHumanDelay / TimeCode.BaseUnit;
                        }

                        int index = this.SubtitleListview1.SelectedItems[0].Index;
                        this.MakeHistoryForUndoOnlyIfNotResent(string.Format(this._language.VideoControls.BeforeChangingTimeInWaveformX, "#" + this._subtitle.Paragraphs[index].Number + " " + this._subtitle.Paragraphs[index].Text));

                        this._subtitle.Paragraphs[index].EndTime = TimeCode.FromSeconds(videoPosition);
                        this.SubtitleListview1.SetStartTimeAndDuration(index, this._subtitle.Paragraphs[index]);

                        this.SetDurationInSeconds(this._subtitle.Paragraphs[index].Duration.TotalSeconds);

                        this.ButtonInsertNewTextClick(null, null);
                    }
                }
                else if (this._mainCreateStartDownEndUp == e.KeyData)
                {
                    if (this._mainCreateStartDownEndUpParagraph == null)
                    {
                        this._mainCreateStartDownEndUpParagraph = this.InsertNewTextAtVideoPosition();
                    }

                    e.SuppressKeyPress = true;
                }
                else if (this._mainAdjustSelected100MsForward == e.KeyData)
                {
                    this.ShowEarlierOrLater(100, SelectionChoice.SelectionOnly);
                    e.SuppressKeyPress = true;
                }
                else if (this._mainAdjustSelected100MsBack == e.KeyData)
                {
                    this.ShowEarlierOrLater(-100, SelectionChoice.SelectionOnly);
                    e.SuppressKeyPress = true;
                }
            }
            else if (this.tabControlButtons.SelectedTab == this.tabPageTranslate)
            {
                if (this._mainTranslateCustomSearch1 == e.KeyData)
                {
                    e.SuppressKeyPress = true;
                    this.RunCustomSearch(Configuration.Settings.VideoControls.CustomSearchUrl1);
                }
                else if (this._mainTranslateCustomSearch2 == e.KeyData)
                {
                    e.SuppressKeyPress = true;
                    this.RunCustomSearch(Configuration.Settings.VideoControls.CustomSearchUrl2);
                }
                else if (this._mainTranslateCustomSearch3 == e.KeyData)
                {
                    e.SuppressKeyPress = true;
                    this.RunCustomSearch(Configuration.Settings.VideoControls.CustomSearchUrl3);
                }
                else if (this._mainTranslateCustomSearch4 == e.KeyData)
                {
                    e.SuppressKeyPress = true;
                    this.RunCustomSearch(Configuration.Settings.VideoControls.CustomSearchUrl4);
                }
                else if (this._mainTranslateCustomSearch5 == e.KeyData)
                {
                    e.SuppressKeyPress = true;
                    this.RunCustomSearch(Configuration.Settings.VideoControls.CustomSearchUrl5);
                }
                else if (this._mainTranslateCustomSearch6 == e.KeyData)
                {
                    e.SuppressKeyPress = true;
                    this.RunCustomSearch(Configuration.Settings.VideoControls.CustomSearchUrl6);
                }
            }

            // put new entries above tabs
        }

        /// <summary>
        /// The merge selected lines only first text.
        /// </summary>
        private void MergeSelectedLinesOnlyFirstText()
        {
            if (this._subtitle.Paragraphs.Count > 0 && this.SubtitleListview1.SelectedItems.Count > 1)
            {
                var deleteIndices = new List<int>();
                bool first = true;
                int firstIndex = 0;
                int next = 0;
                string text = string.Empty;
                double endTime = 0;
                foreach (int index in this.SubtitleListview1.SelectedIndices)
                {
                    if (first)
                    {
                        firstIndex = index;
                        next = index + 1;
                    }
                    else
                    {
                        deleteIndices.Add(index);
                        if (next != index)
                        {
                            return;
                        }

                        next++;
                    }

                    first = false;
                    if (string.IsNullOrEmpty(text))
                    {
                        text = this._subtitle.Paragraphs[index].Text.Trim();
                    }

                    endTime = this._subtitle.Paragraphs[index].EndTime.TotalMilliseconds;
                }

                this.SubtitleListview1.SelectedIndexChanged -= this.SubtitleListview1_SelectedIndexChanged;
                this.MakeHistoryForUndo(this._language.BeforeMergeLines);

                var currentParagraph = this._subtitle.Paragraphs[firstIndex];
                currentParagraph.Text = text;
                currentParagraph.EndTime.TotalMilliseconds = endTime;

                var nextParagraph = this._subtitle.GetParagraphOrDefault(next);
                if (nextParagraph != null && currentParagraph.EndTime.TotalMilliseconds > nextParagraph.StartTime.TotalMilliseconds && currentParagraph.StartTime.TotalMilliseconds < nextParagraph.StartTime.TotalMilliseconds)
                {
                    currentParagraph.EndTime.TotalMilliseconds = nextParagraph.StartTime.TotalMilliseconds - 1;
                }

                // original subtitle
                if (this._subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                {
                    var original = Utilities.GetOriginalParagraph(firstIndex, currentParagraph, this._subtitleAlternate.Paragraphs);
                    if (original != null)
                    {
                        string originalText = string.Empty;
                        for (int i = 0; i < deleteIndices.Count; i++)
                        {
                            var originalNext = Utilities.GetOriginalParagraph(deleteIndices[i], this._subtitle.Paragraphs[deleteIndices[i]], this._subtitleAlternate.Paragraphs);
                            if (originalNext != null && string.IsNullOrEmpty(originalText))
                            {
                                originalText = originalNext.Text;
                            }
                        }

                        for (int i = deleteIndices.Count - 1; i >= 0; i--)
                        {
                            var originalNext = Utilities.GetOriginalParagraph(deleteIndices[i], this._subtitle.Paragraphs[deleteIndices[i]], this._subtitleAlternate.Paragraphs);
                            if (originalNext != null)
                            {
                                this._subtitleAlternate.Paragraphs.Remove(originalNext);
                            }
                        }

                        original.Text = originalText;
                        original.EndTime.TotalMilliseconds = currentParagraph.EndTime.TotalMilliseconds;
                        this._subtitleAlternate.Renumber();
                    }
                }

                if (this._networkSession != null)
                {
                    this._networkSession.TimerStop();
                    this._networkSession.UpdateLine(firstIndex, currentParagraph);
                    this.NetworkGetSendUpdates(deleteIndices, 0, null);
                }
                else
                {
                    for (int i = deleteIndices.Count - 1; i >= 0; i--)
                    {
                        this._subtitle.Paragraphs.RemoveAt(deleteIndices[i]);
                    }

                    this._subtitle.Renumber();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                }

                this.ShowSource();
                this.ShowStatus(this._language.LinesMerged);
                this.SubtitleListview1.SelectIndexAndEnsureVisible(firstIndex, true);
                this.SubtitleListview1.SelectedIndexChanged += this.SubtitleListview1_SelectedIndexChanged;
                this.RefreshSelectedParagraph();
            }
        }

        /// <summary>
        /// The go to first empty line.
        /// </summary>
        private void GoToFirstEmptyLine()
        {
            var index = this.FirstSelectedIndex + 1;
            for (; index < this._subtitle.Paragraphs.Count; index++)
            {
                if (string.IsNullOrWhiteSpace(this._subtitle.Paragraphs[index].Text))
                {
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(index);
                    return;
                }
            }
        }

        /// <summary>
        /// The play first selected subtitle.
        /// </summary>
        private void PlayFirstSelectedSubtitle()
        {
            if (this._subtitleListViewIndex >= 0 && this.mediaPlayer.VideoPlayer != null)
            {
                this.GotoSubtitleIndex(this._subtitleListViewIndex);
                var paragraph = this._subtitle.Paragraphs[this._subtitleListViewIndex];
                double startSeconds = paragraph.StartTime.TotalSeconds;
                this._endSeconds = paragraph.EndTime.TotalSeconds;
                this.mediaPlayer.CurrentPosition = startSeconds;
                this.ShowSubtitle();
                this.mediaPlayer.Play();
            }
        }

        /// <summary>
        /// The set end and offset the rest.
        /// </summary>
        /// <param name="goToNext">
        /// The go to next.
        /// </param>
        private void SetEndAndOffsetTheRest(bool goToNext)
        {
            if (this.SubtitleListview1.SelectedItems.Count == 1)
            {
                bool oldSync = this.checkBoxSyncListViewWithVideoWhilePlaying.Checked;
                this.checkBoxSyncListViewWithVideoWhilePlaying.Checked = false;

                int index = this.SubtitleListview1.SelectedItems[0].Index;
                double videoPosition = this.mediaPlayer.CurrentPosition;
                if (!this.mediaPlayer.IsPaused)
                {
                    videoPosition -= Configuration.Settings.General.SetStartEndHumanDelay / TimeCode.BaseUnit;
                }

                var tc = TimeCode.FromSeconds(videoPosition);

                double offset = tc.TotalMilliseconds - this._subtitle.Paragraphs[index].EndTime.TotalMilliseconds;
                if (this._subtitle.Paragraphs[index].StartTime.TotalMilliseconds + 100 > tc.TotalMilliseconds || offset > Configuration.Settings.General.SubtitleMaximumDisplayMilliseconds)
                {
                    return;
                }

                this.MakeHistoryForUndo(this._language.BeforeSetEndTimeAndOffsetTheRest + @"  " + this._subtitle.Paragraphs[index].Number + @" - " + tc);

                this.numericUpDownDuration.ValueChanged -= this.NumericUpDownDurationValueChanged;
                this._subtitle.Paragraphs[index].EndTime.TotalSeconds = videoPosition;
                this.SubtitleListview1.SetDuration(index, this._subtitle.Paragraphs[index]);
                this.checkBoxSyncListViewWithVideoWhilePlaying.Checked = oldSync;
                this.numericUpDownDuration.Value = (decimal)this._subtitle.Paragraphs[index].Duration.TotalSeconds;
                this.numericUpDownDuration.ValueChanged += this.NumericUpDownDurationValueChanged;

                for (int i = index + 1; i < this.SubtitleListview1.Items.Count; i++)
                {
                    if (!this._subtitle.Paragraphs[i].StartTime.IsMaxTime)
                    {
                        this._subtitle.Paragraphs[i].StartTime = new TimeCode(this._subtitle.Paragraphs[i].StartTime.TotalMilliseconds + offset);
                        this._subtitle.Paragraphs[i].EndTime = new TimeCode(this._subtitle.Paragraphs[i].EndTime.TotalMilliseconds + offset);
                        this.SubtitleListview1.SetDuration(i, this._subtitle.Paragraphs[i]);
                    }
                }

                if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && this._subtitleAlternate != null && this._subtitleAlternate.Paragraphs.Count > 0)
                {
                    var original = Utilities.GetOriginalParagraph(index, this._subtitle.Paragraphs[index], this._subtitleAlternate.Paragraphs);
                    if (original != null)
                    {
                        index = this._subtitleAlternate.GetIndex(original);
                        for (int i = index; i < this._subtitleAlternate.Paragraphs.Count; i++)
                        {
                            if (!this._subtitleAlternate.Paragraphs[i].StartTime.IsMaxTime)
                            {
                                this._subtitleAlternate.Paragraphs[i].StartTime = new TimeCode(this._subtitleAlternate.Paragraphs[i].StartTime.TotalMilliseconds + offset);
                                this._subtitleAlternate.Paragraphs[i].EndTime = new TimeCode(this._subtitleAlternate.Paragraphs[i].EndTime.TotalMilliseconds + offset);
                            }
                        }
                    }
                }

                if (this.IsFramesRelevant && this.CurrentFrameRate > 0)
                {
                    this._subtitle.CalculateFrameNumbersFromTimeCodesNoCheck(this.CurrentFrameRate);
                    if (this.tabControlSubtitle.SelectedIndex == TabControlSourceView)
                    {
                        this.ShowSource();
                    }
                }

                this.checkBoxSyncListViewWithVideoWhilePlaying.Checked = oldSync;
                this.numericUpDownDuration.ValueChanged += this.NumericUpDownDurationValueChanged;

                if (goToNext)
                {
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(index + 1);
                }
            }
        }

        /// <summary>
        /// The move video seconds.
        /// </summary>
        /// <param name="seconds">
        /// The seconds.
        /// </param>
        private void MoveVideoSeconds(double seconds)
        {
            if (this.mediaPlayer.IsPaused && Configuration.Settings.General.MoveVideo100Or500MsPlaySmallSample)
            {
                double p = this.mediaPlayer.CurrentPosition + seconds;
                this.mediaPlayer.CurrentPosition = p;
                this.mediaPlayer.Play();
                System.Threading.Thread.Sleep(99);
                this.mediaPlayer.Stop();
                this.mediaPlayer.CurrentPosition = p;
            }
            else
            {
                this.mediaPlayer.CurrentPosition += seconds;
            }
        }

        /// <summary>
        /// The run custom search.
        /// </summary>
        /// <param name="url">
        /// The url.
        /// </param>
        private void RunCustomSearch(string url)
        {
            if (!string.IsNullOrEmpty(url) && !string.IsNullOrEmpty(this.textBoxSearchWord.Text))
            {
                if (url.Contains("{0}"))
                {
                    url = string.Format(url, Utilities.UrlEncode(this.textBoxSearchWord.Text));
                }

                System.Diagnostics.Process.Start(url);
            }
        }

        /// <summary>
        /// The go fullscreen.
        /// </summary>
        private void GoFullscreen()
        {
            if (this.mediaPlayer.VideoPlayer == null)
            {
                return;
            }

            this.mediaPlayer.ShowFullScreenControls();
            bool setRedockOnFullscreenEnd = false;

            if (this._videoPlayerUndocked == null || this._videoPlayerUndocked.IsDisposed)
            {
                this.UndockVideoControlsToolStripMenuItemClick(null, null);
                setRedockOnFullscreenEnd = true;
            }

            if (this._videoPlayerUndocked != null && !this._videoPlayerUndocked.IsDisposed)
            {
                this._videoPlayerUndocked.Focus();
                this._videoPlayerUndocked.GoFullscreen();
                if (setRedockOnFullscreenEnd)
                {
                    this._videoPlayerUndocked.RedockOnFullscreenEnd = true;
                }
            }
        }

        /// <summary>
        /// The refresh time code mode.
        /// </summary>
        private void RefreshTimeCodeMode()
        {
            if (Configuration.Settings.General.UseTimeFormatHHMMSSFF)
            {
                this.numericUpDownDuration.DecimalPlaces = 2;
                this.numericUpDownDuration.Increment = (decimal)0.01;

                this.toolStripSeparatorFrameRate.Visible = true;
                this.toolStripLabelFrameRate.Visible = true;
                this.toolStripComboBoxFrameRate.Visible = true;
                this.toolStripButtonGetFrameRate.Visible = true;
            }
            else
            {
                this.numericUpDownDuration.DecimalPlaces = 3;
                this.numericUpDownDuration.Increment = (decimal)0.1;

                this.toolStripSeparatorFrameRate.Visible = Configuration.Settings.General.ShowFrameRate;
                this.toolStripLabelFrameRate.Visible = Configuration.Settings.General.ShowFrameRate;
                this.toolStripComboBoxFrameRate.Visible = Configuration.Settings.General.ShowFrameRate;
                this.toolStripButtonGetFrameRate.Visible = Configuration.Settings.General.ShowFrameRate;
            }

            this.SaveSubtitleListviewIndices();
            this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
            this.RestoreSubtitleListviewIndices();
            this.RefreshSelectedParagraph();
        }

        /// <summary>
        /// The reverse start and ending for rtl.
        /// </summary>
        private void ReverseStartAndEndingForRTL()
        {
            int selectedIndex = this.FirstSelectedIndex;
            foreach (int index in this.SubtitleListview1.SelectedIndices)
            {
                var p = this._subtitle.Paragraphs[index];
                p.Text = ReverseStartAndEndingForRTL(p.Text);
                this.SubtitleListview1.SetText(index, p.Text);
                if (index == selectedIndex)
                {
                    this.textBoxListViewText.Text = p.Text;
                }
            }
        }

        /// <summary>
        /// The reverse string.
        /// </summary>
        /// <param name="s">
        /// The s.
        /// </param>
        /// <returns>
        /// The <see cref="string"/>.
        /// </returns>
        private static string ReverseString(string s)
        {
            var charArray = s.ToCharArray();
            Array.Reverse(charArray);
            return new string(charArray);
        }

        /// <summary>
        /// The reverse parenthesis.
        /// </summary>
        /// <param name="s">
        /// The s.
        /// </param>
        /// <returns>
        /// The <see cref="string"/>.
        /// </returns>
        private static string ReverseParenthesis(string s)
        {
            const string k = "@__<<>___@";

            s = s.Replace("(", k);
            s = s.Replace(")", "(");
            s = s.Replace(k, ")");

            s = s.Replace("[", k);
            s = s.Replace("]", "[");
            s = s.Replace(k, "]");

            return s;
        }

        /// <summary>
        /// The reverse start and ending for rtl.
        /// </summary>
        /// <param name="s">
        /// The s.
        /// </param>
        /// <returns>
        /// The <see cref="string"/>.
        /// </returns>
        private static string ReverseStartAndEndingForRTL(string s)
        {
            var lines = s.SplitToLines();
            var newLines = new StringBuilder();
            foreach (var line in lines)
            {
                string s2 = line;

                bool startsWithItalic = false;
                if (s2.StartsWith("<i>", StringComparison.Ordinal))
                {
                    startsWithItalic = true;
                    s2 = s2.Remove(0, 3);
                }

                bool endsWithItalic = false;
                if (s2.EndsWith("</i>", StringComparison.Ordinal))
                {
                    endsWithItalic = true;
                    s2 = s2.Remove(s2.Length - 4, 4);
                }

                var pre = new StringBuilder();
                var post = new StringBuilder();

                int i = 0;
                while (i < s2.Length && @"- !?.""،,():;[]".Contains(s2[i]))
                {
                    pre.Append(s2[i]);
                    i++;
                }

                int j = s2.Length - 1;
                while (j > i && @"- !?.""،,():;[]".Contains(s2[j]))
                {
                    post.Append(s2[j]);
                    j--;
                }

                if (startsWithItalic)
                {
                    newLines.Append("<i>");
                }

                newLines.Append(ReverseParenthesis(post.ToString()));
                newLines.Append(s2.Substring(pre.Length, s2.Length - (pre.Length + post.Length)));
                newLines.Append(ReverseParenthesis(ReverseString(pre.ToString())));
                if (endsWithItalic)
                {
                    newLines.Append("</i>");
                }

                newLines.AppendLine();
            }

            return newLines.ToString().Trim();
        }

        /// <summary>
        /// The merge dialogs.
        /// </summary>
        private void MergeDialogs()
        {
            if (this.SubtitleListview1.SelectedItems.Count == 2 && this.SubtitleListview1.SelectedIndices[0] + 1 == this.SubtitleListview1.SelectedIndices[1])
            {
                this.MergeWithLineAfter(true);
            }
        }

        /// <summary>
        /// The toggle dashes.
        /// </summary>
        private void ToggleDashes()
        {
            var index = this.FirstSelectedIndex;
            if (index >= 0)
            {
                var hasStartDash = false;
                var p = this._subtitle.Paragraphs[index];
                var lines = p.Text.SplitToLines();
                foreach (var line in lines)
                {
                    var trimmed = line.TrimStart();
                    if (trimmed.StartsWith('-') || trimmed.StartsWith("<i>-") || trimmed.StartsWith("<i> -"))
                    {
                        hasStartDash = true;
                        break;
                    }
                }

                this.MakeHistoryForUndo(this._language.BeforeToggleDialogDashes);
                if (hasStartDash)
                {
                    this.RemoveDashes();
                }
                else
                {
                    this.AddDashes();
                }
            }
        }

        /// <summary>
        /// The add dashes.
        /// </summary>
        private void AddDashes()
        {
            foreach (int index in this.SubtitleListview1.SelectedIndices)
            {
                var p = this._subtitle.Paragraphs[index];
                var lines = p.Text.SplitToLines();
                var sb = new StringBuilder();
                foreach (var line in lines)
                {
                    if (line.TrimStart().StartsWith('-') || line.TrimStart().StartsWith("<i>-") || line.TrimStart().StartsWith("<i> -"))
                    {
                        sb.AppendLine(line);
                    }
                    else if (line.TrimStart().StartsWith("<i>") && line.Trim().Length > 3)
                    {
                        sb.AppendLine("<i>-" + line.Substring(3));
                    }
                    else
                    {
                        sb.AppendLine("- " + line);
                    }
                }

                var text = sb.ToString().Trim();
                this._subtitle.Paragraphs[index].Text = text;
                this.SubtitleListview1.SetText(index, text);
                if (index == this._subtitleListViewIndex)
                {
                    this.textBoxListViewText.Text = text;
                }
            }
        }

        /// <summary>
        /// The remove dashes.
        /// </summary>
        private void RemoveDashes()
        {
            foreach (int index in this.SubtitleListview1.SelectedIndices)
            {
                var p = this._subtitle.Paragraphs[index];
                var lines = p.Text.SplitToLines();
                var sb = new StringBuilder();
                foreach (var line in lines)
                {
                    if (line.TrimStart().StartsWith('-'))
                    {
                        sb.AppendLine(line.TrimStart().TrimStart('-').TrimStart());
                    }
                    else if (line.TrimStart().StartsWith("<i>-") || line.TrimStart().StartsWith("<i> -"))
                    {
                        sb.AppendLine("<i>" + line.TrimStart().Substring(3).TrimStart().TrimStart('-').TrimStart());
                    }
                    else
                    {
                        sb.AppendLine(line);
                    }
                }

                string text = sb.ToString().Trim();
                this._subtitle.Paragraphs[index].Text = text;
                this.SubtitleListview1.SetText(index, text);
                if (index == this._subtitleListViewIndex)
                {
                    this.textBoxListViewText.Text = text;
                }
            }
        }

        /// <summary>
        /// The set title.
        /// </summary>
        private void SetTitle()
        {
            this.Text = this.Title;

            string separator = " - ";
            if (!string.IsNullOrEmpty(this._fileName))
            {
                this.Text = this.Text + separator + this._fileName;
                separator = " + ";
            }

            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && this._subtitleAlternate != null && this._subtitleAlternate.Paragraphs.Count > 0)
            {
                this.Text = this.Text + separator;
                if (string.IsNullOrEmpty(this._fileName))
                {
                    this.Text = this.Text + this._language.New + " + ";
                }

                if (!string.IsNullOrEmpty(this._subtitleAlternateFileName))
                {
                    this.Text = this.Text + this._subtitleAlternateFileName;
                }
                else
                {
                    this.Text = this.Text + this._language.New;
                }
            }
        }

        /// <summary>
        /// The subtitle listview 1 key down.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void SubtitleListview1KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.C && e.Modifiers == Keys.Control)
            {
                // Ctrl+c = Copy to clipboard
                var tmp = new Subtitle();
                foreach (int i in this.SubtitleListview1.SelectedIndices)
                {
                    var p = this._subtitle.GetParagraphOrDefault(i);
                    if (p != null)
                    {
                        tmp.Paragraphs.Add(new Paragraph(p));
                    }
                }

                if (tmp.Paragraphs.Count > 0)
                {
                    Clipboard.SetText(tmp.ToText(new SubRip()));
                }

                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == this._mainListViewCopyText)
            {
                var sb = new StringBuilder();
                foreach (int i in this.SubtitleListview1.SelectedIndices)
                {
                    var p = this._subtitle.GetParagraphOrDefault(i);
                    if (p != null)
                    {
                        sb.AppendLine(p.Text + Environment.NewLine);
                    }
                }

                if (sb.Length > 0)
                {
                    Clipboard.SetText(sb.ToString().Trim());
                }

                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == this._mainListViewAutoDuration)
            {
                this.MakeAutoDurationSelectedLines();
            }
            else if (e.KeyData == this._mainListViewFocusWaveform)
            {
                if (this.audioVisualizer.CanFocus)
                {
                    this.audioVisualizer.Focus();
                    e.SuppressKeyPress = true;
                }
            }
            else if (e.KeyData == this._mainListViewGoToNextError)
            {
                this.GoToNextSynaxError();
                e.SuppressKeyPress = true;
            }
            else if (e.KeyCode == Keys.V && e.Modifiers == Keys.Control)
            {
                // Ctrl+vPaste from clipboard
                if (Clipboard.ContainsText())
                {
                    var text = Clipboard.GetText();
                    var tmp = new Subtitle();
                    var format = new SubRip();
                    var list = new List<string>(text.SplitToLines());
                    format.LoadSubtitle(tmp, list, null);
                    if (this.SubtitleListview1.SelectedItems.Count == 1 && tmp.Paragraphs.Count > 0)
                    {
                        this.MakeHistoryForUndo(this._language.BeforeInsertLine);
                        this._makeHistoryPaused = true;
                        Paragraph lastParagraph = null;
                        Paragraph lastTempParagraph = null;
                        foreach (var p in tmp.Paragraphs)
                        {
                            this.InsertAfter();
                            this.textBoxListViewText.Text = p.Text;
                            if (lastParagraph != null)
                            {
                                double millisecondsBetween = p.StartTime.TotalMilliseconds - lastTempParagraph.EndTime.TotalMilliseconds;
                                this.timeUpDownStartTime.TimeCode = new TimeCode(lastParagraph.EndTime.TotalMilliseconds + millisecondsBetween);
                            }

                            this.SetDurationInSeconds(p.Duration.TotalSeconds);
                            lastParagraph = this._subtitle.GetParagraphOrDefault(this._subtitleListViewIndex);
                            lastTempParagraph = p;
                        }

                        this.RestartHistory();
                    }
                    else if (this.SubtitleListview1.Items.Count == 0 && tmp.Paragraphs.Count > 0)
                    { // insert into empty subtitle
                        this.MakeHistoryForUndo(this._language.BeforeInsertLine);
                        foreach (var p in tmp.Paragraphs)
                        {
                            this._subtitle.Paragraphs.Add(p);
                        }

                        this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                        this.SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                    }
                    else if (this.SubtitleListview1.Items.Count > 1 && tmp.Paragraphs.Count > 0)
                    {
                        // multiple lines selected - first delete, then insert
                        int firstIndex = this.FirstSelectedIndex;
                        if (firstIndex >= 0)
                        {
                            this.MakeHistoryForUndo(this._language.BeforeInsertLine);
                            this._makeHistoryPaused = true;

                            this.DeleteSelectedLines();
                            foreach (var p in tmp.Paragraphs)
                            {
                                this._subtitle.Paragraphs.Insert(firstIndex, p);
                                firstIndex++;
                            }

                            this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                            this.SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                            this.RestartHistory();
                        }
                    }
                    else if (list.Count >= 1 && list.Count < 4)
                    {
                        // less than 4 lines of text, just insert into first selected
                        this.textBoxListViewText.Text = text.Trim();
                    }
                    else if (list.Count > 1 && list.Count < 2000)
                    {
                        this.MakeHistoryForUndo(this._language.BeforeInsertLine);
                        this._makeHistoryPaused = true;
                        foreach (var line in list)
                        {
                            if (!string.IsNullOrWhiteSpace(line))
                            {
                                this.InsertAfter();
                                this.textBoxListViewText.Text = Utilities.AutoBreakLine(line);
                            }
                        }

                        this.RestartHistory();
                    }
                }

                e.SuppressKeyPress = true;
            }
            else if (e.KeyCode == Keys.X && e.Modifiers == Keys.Control)
            {
                // Ctrl+X = Cut to clipboard
                var tmp = new Subtitle();
                foreach (int i in this.SubtitleListview1.SelectedIndices)
                {
                    var p = this._subtitle.GetParagraphOrDefault(i);
                    if (p != null)
                    {
                        tmp.Paragraphs.Add(new Paragraph(p));
                    }
                }

                e.SuppressKeyPress = true;
                this._cutText = tmp.ToText(new SubRip());
                this.ToolStripMenuItemDeleteClick(null, null);
            }
            else if (e.KeyCode == Keys.A && e.Modifiers == Keys.Control)
            {
                // SelectAll
                foreach (ListViewItem item in this.SubtitleListview1.Items)
                {
                    item.Selected = true;
                }

                e.SuppressKeyPress = true;
            }
            else if (e.KeyCode == Keys.D && e.Modifiers == Keys.Control)
            {
                // SelectFirstSelectedItemOnly
                if (this.SubtitleListview1.SelectedItems.Count > 0)
                {
                    bool skipFirst = true;
                    foreach (ListViewItem item in this.SubtitleListview1.SelectedItems)
                    {
                        if (skipFirst)
                        {
                            skipFirst = false;
                        }
                        else
                        {
                            item.Selected = false;
                        }
                    }

                    e.SuppressKeyPress = true;
                }
            }
            else if (e.KeyCode == Keys.Delete && this.SubtitleListview1.SelectedItems.Count > 0)
            {
                // Delete
                this.ToolStripMenuItemDeleteClick(null, null);
            }
            else if (e.KeyData == this._mainInsertBefore)
            {
                this.InsertBefore();
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == this._mainInsertAfter)
            {
                this.InsertAfter();
                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == Keys.Control && e.KeyCode == Keys.Home)
            {
                this.SubtitleListview1.FirstVisibleIndex = -1;
                this.SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == Keys.Control && e.KeyCode == Keys.End)
            {
                this.SubtitleListview1.SelectIndexAndEnsureVisible(this.SubtitleListview1.Items.Count - 1, true);
                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == Keys.None && e.KeyCode == Keys.Enter)
            {
                this.SubtitleListview1_MouseDoubleClick(null, null);
            }
        }

        /// <summary>
        /// The go to next synax error.
        /// </summary>
        private void GoToNextSynaxError()
        {
            int idx = this.FirstSelectedIndex + 1;
            try
            {
                for (int i = idx; i < this._subtitle.Paragraphs.Count - 1; i++)
                {
                    var item = this.SubtitleListview1.Items[i];
                    if (item.SubItems[SubtitleListView.ColumnIndexDuration].BackColor == Configuration.Settings.Tools.ListViewSyntaxErrorColor || item.SubItems[SubtitleListView.ColumnIndexText].BackColor == Configuration.Settings.Tools.ListViewSyntaxErrorColor || item.SubItems[SubtitleListView.ColumnIndexStart].BackColor == Configuration.Settings.Tools.ListViewSyntaxErrorColor)
                    {
                        this.SubtitleListview1.SelectIndexAndEnsureVisible(i, true);
                        return;
                    }
                }
            }
            catch
            {
            }
        }

        /// <summary>
        /// The restart history.
        /// </summary>
        private void RestartHistory()
        {
            this._listViewTextUndoLast = null;
            this._listViewTextUndoIndex = -1;
            this._listViewTextTicks = -1;
            this._listViewAlternateTextUndoLast = null;
            this._listViewAlternateTextTicks = -1;
            this._undoIndex = this._subtitle.HistoryItems.Count - 1;
            this._makeHistoryPaused = false;
        }

        /// <summary>
        /// The auto balance lines and allow 2 plus lines.
        /// </summary>
        private void AutoBalanceLinesAndAllow2PlusLines()
        {
            if (this._subtitle.Paragraphs.Count > 0 && this.SubtitleListview1.SelectedItems.Count > 0)
            {
                this.MakeHistoryForUndo(this._language.BeforeAutoBalanceSelectedLines);
                string language = Utilities.AutoDetectGoogleLanguage(this._subtitle);
                string languageOriginal = string.Empty;
                if (this._subtitleAlternate != null)
                {
                    Utilities.AutoDetectGoogleLanguage(this._subtitleAlternate);
                }

                foreach (ListViewItem item in this.SubtitleListview1.SelectedItems)
                {
                    var p = this._subtitle.GetParagraphOrDefault(item.Index);
                    if (p != null)
                    {
                        string s = Utilities.AutoBreakLineMoreThanTwoLines(p.Text, Configuration.Settings.General.SubtitleLineMaximumLength, language);
                        if (s != p.Text)
                        {
                            p.Text = s;
                            this.SubtitleListview1.SetText(item.Index, p.Text);
                        }

                        if (this._subtitleAlternate != null)
                        {
                            var original = Utilities.GetOriginalParagraph(item.Index, p, this._subtitleAlternate.Paragraphs);
                            if (original != null)
                            {
                                string s2 = Utilities.AutoBreakLineMoreThanTwoLines(original.Text, Configuration.Settings.General.SubtitleLineMaximumLength, languageOriginal);
                                if (s2 != original.Text)
                                {
                                    original.Text = s2;
                                    this.SubtitleListview1.SetAlternateText(item.Index, original.Text);
                                }
                            }
                        }
                    }
                }

                this.ShowSource();
                this.RefreshSelectedParagraph();
            }
        }

        /// <summary>
        /// The adjust display time for selected lines tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void AdjustDisplayTimeForSelectedLinesToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.AdjustDisplayTime(true);
        }

        /// <summary>
        /// The fix common errors in selected lines tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void FixCommonErrorsInSelectedLinesToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.FixCommonErrors(true);
        }

        /// <summary>
        /// The find double words tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void FindDoubleWordsToolStripMenuItemClick(object sender, EventArgs e)
        {
            var regex = new Regex(@"\b(\w+)\s+\1\b");
            this._clearLastFind = true;
            if (this._findHelper != null)
            {
                this._clearLastFindType = this._findHelper.FindType;
                this._clearLastFindText = this._findHelper.FindText;
            }

            this._findHelper = new FindReplaceDialogHelper(FindType.RegEx, string.Format(this._language.DoubleWordsViaRegEx, regex), regex, string.Empty, 0, 0, this._subtitleListViewIndex);

            this.ReloadFromSourceView();
            this.FindNext();
        }

        /// <summary>
        /// The change casing for selected lines tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ChangeCasingForSelectedLinesToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.ChangeCasing(true);
        }

        /// <summary>
        /// The center form on current screen.
        /// </summary>
        private void CenterFormOnCurrentScreen()
        {
            var screen = Screen.FromControl(this);
            this.Left = screen.Bounds.X + ((screen.Bounds.Width - this.Width) / 2);
            this.Top = screen.Bounds.Y + ((screen.Bounds.Height - this.Height) / 2);
        }

        /// <summary>
        /// The sort subtitle.
        /// </summary>
        /// <param name="subtitleSortCriteria">
        /// The subtitle sort criteria.
        /// </param>
        /// <param name="description">
        /// The description.
        /// </param>
        private void SortSubtitle(SubtitleSortCriteria subtitleSortCriteria, string description)
        {
            Paragraph firstSelectedParagraph = null;
            if (this.SubtitleListview1.SelectedItems.Count > 0)
            {
                firstSelectedParagraph = this._subtitle.Paragraphs[this.SubtitleListview1.SelectedItems[0].Index];
            }

            this._subtitleListViewIndex = -1;
            this.MakeHistoryForUndo(string.Format(this._language.BeforeSortX, description));
            this._subtitle.Sort(subtitleSortCriteria);
            if (this.descendingToolStripMenuItem.Checked)
            {
                this._subtitle.Paragraphs.Reverse();
            }

            this.ShowSource();
            this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
            this.SubtitleListview1.SelectIndexAndEnsureVisible(firstSelectedParagraph);
            this.ShowStatus(string.Format(this._language.SortedByX, description));
        }

        /// <summary>
        /// The sort number tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void SortNumberToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.SortSubtitle(SubtitleSortCriteria.Number, (sender as ToolStripItem).Text);
        }

        /// <summary>
        /// The sort start time tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void SortStartTimeToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.SortSubtitle(SubtitleSortCriteria.StartTime, (sender as ToolStripItem).Text);
        }

        /// <summary>
        /// The sort end time tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void SortEndTimeToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.SortSubtitle(SubtitleSortCriteria.EndTime, (sender as ToolStripItem).Text);
        }

        /// <summary>
        /// The sort display time tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void SortDisplayTimeToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.SortSubtitle(SubtitleSortCriteria.Duration, (sender as ToolStripItem).Text);
        }

        /// <summary>
        /// The sort text max line length tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void SortTextMaxLineLengthToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.SortSubtitle(SubtitleSortCriteria.TextMaxLineLength, (sender as ToolStripItem).Text);
        }

        /// <summary>
        /// The sort text total length tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void SortTextTotalLengthToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.SortSubtitle(SubtitleSortCriteria.TextTotalLength, (sender as ToolStripItem).Text);
        }

        /// <summary>
        /// The sort text number of lines tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void SortTextNumberOfLinesToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.SortSubtitle(SubtitleSortCriteria.TextNumberOfLines, (sender as ToolStripItem).Text);
        }

        /// <summary>
        /// The sort text alphabeticallytool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void SortTextAlphabeticallytoolStripMenuItemClick(object sender, EventArgs e)
        {
            this.SortSubtitle(SubtitleSortCriteria.Text, (sender as ToolStripItem).Text);
        }

        /// <summary>
        /// The text charssec tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void textCharssecToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.SortSubtitle(SubtitleSortCriteria.TextCharactersPerSeconds, (sender as ToolStripItem).Text);
        }

        /// <summary>
        /// The change language tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ChangeLanguageToolStripMenuItemClick(object sender, EventArgs e)
        {
            using (var cl = new ChooseLanguage())
            {
                if (cl.ShowDialog(this) == DialogResult.OK)
                {
                    this.SetLanguage(cl.CultureName);
                    Configuration.Settings.Save();
                }
            }
        }

        /// <summary>
        /// The set language.
        /// </summary>
        /// <param name="cultureName">
        /// The culture name.
        /// </param>
        private void SetLanguage(string cultureName)
        {
            try
            {
                if (string.IsNullOrEmpty(cultureName) || cultureName == "en-US")
                {
                    Configuration.Settings.Language = new Language(); // default is en-US
                }
                else
                {
                    Configuration.Settings.Language = Language.Load(Path.Combine(Configuration.BaseDirectory, "Languages", cultureName + ".xml"));
                }

                Configuration.Settings.General.Language = cultureName;
                this._languageGeneral = Configuration.Settings.Language.General;
                this._language = Configuration.Settings.Language.Main;
                this.InitializeLanguage();
            }
            catch (Exception exception)
            {
                MessageBox.Show(exception.Message + Environment.NewLine + Environment.NewLine + exception.StackTrace, "Error loading language file");
                Configuration.Settings.Language = new Language(); // default is en-US
                Configuration.Settings.General.Language = null;
                this._languageGeneral = Configuration.Settings.Language.General;
                this._language = Configuration.Settings.Language.Main;
                this.InitializeLanguage();
            }
        }

        /// <summary>
        /// The tool strip menu item compare click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemCompareClick(object sender, EventArgs e)
        {
            var compareForm = new Compare();
            if (this._subtitleAlternate != null && this._subtitleAlternateFileName != null)
            {
                compareForm.Initialize(this._subtitle, this._fileName, this._subtitleAlternate, this._subtitleAlternateFileName);
            }
            else
            {
                compareForm.Initialize(this._subtitle, this._fileName, this._languageGeneral.CurrentSubtitle);
            }

            compareForm.Show(this);
        }

        /// <summary>
        /// The tool strip menu item auto break lines click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemAutoBreakLinesClick(object sender, EventArgs e)
        {
            if (!this.IsSubtitleLoaded)
            {
                this.DisplaySubtitleNotLoadedMessage();
                return;
            }

            this.ReloadFromSourceView();
            using (var autoBreakUnbreakLines = new AutoBreakUnbreakLines())
            {
                var selectedLines = new Subtitle();
                foreach (int index in this.SubtitleListview1.SelectedIndices)
                {
                    selectedLines.Paragraphs.Add(this._subtitle.Paragraphs[index]);
                }

                autoBreakUnbreakLines.Initialize(selectedLines, true);

                if (autoBreakUnbreakLines.ShowDialog() == DialogResult.OK && autoBreakUnbreakLines.FixedText.Count > 0)
                {
                    this.MakeHistoryForUndo(this._language.BeforeAutoBalanceSelectedLines);
                    var language = Utilities.AutoDetectGoogleLanguage(this._subtitle);
                    this.SubtitleListview1.BeginUpdate();
                    foreach (int index in this.SubtitleListview1.SelectedIndices)
                    {
                        var p = this._subtitle.GetParagraphOrDefault(index);
                        if (autoBreakUnbreakLines.FixedText.ContainsKey(p.ID))
                        {
                            p.Text = autoBreakUnbreakLines.FixedText[p.ID];
                            this.SubtitleListview1.SetText(index, p.Text);
                            this.SubtitleListview1.SyntaxColorLine(this._subtitle.Paragraphs, index, p);
                        }
                    }

                    this.SubtitleListview1.EndUpdate();
                    this.RefreshSelectedParagraph();
                    this.ShowStatus(string.Format(this._language.NumberOfLinesAutoBalancedX, autoBreakUnbreakLines.FixedText.Count));
                }
            }
        }

        /// <summary>
        /// The tool strip menu item unbreak lines click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemUnbreakLinesClick(object sender, EventArgs e)
        {
            if (!this.IsSubtitleLoaded)
            {
                this.DisplaySubtitleNotLoadedMessage();
                return;
            }

            this.ReloadFromSourceView();
            using (var autoBreakUnbreakLines = new AutoBreakUnbreakLines())
            {
                var selectedLines = new Subtitle();
                foreach (int index in this.SubtitleListview1.SelectedIndices)
                {
                    selectedLines.Paragraphs.Add(this._subtitle.Paragraphs[index]);
                }

                autoBreakUnbreakLines.Initialize(selectedLines, false);

                if (autoBreakUnbreakLines.ShowDialog() == DialogResult.OK && autoBreakUnbreakLines.FixedText.Count > 0)
                {
                    this.MakeHistoryForUndo(this._language.BeforeRemoveLineBreaksInSelectedLines);

                    this.SubtitleListview1.BeginUpdate();
                    foreach (int index in this.SubtitleListview1.SelectedIndices)
                    {
                        var p = this._subtitle.GetParagraphOrDefault(index);
                        if (autoBreakUnbreakLines.FixedText.ContainsKey(p.ID))
                        {
                            p.Text = autoBreakUnbreakLines.FixedText[p.ID];
                            this.SubtitleListview1.SetText(index, p.Text);
                            this.SubtitleListview1.SyntaxColorLine(this._subtitle.Paragraphs, index, p);
                        }
                    }

                    this.SubtitleListview1.EndUpdate();
                    this.RefreshSelectedParagraph();
                    this.ShowStatus(string.Format(this._language.NumberOfWithRemovedLineBreakX, autoBreakUnbreakLines.FixedText.Count));
                }
            }
        }

        /// <summary>
        /// The multiple replace tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void MultipleReplaceToolStripMenuItemClick(object sender, EventArgs e)
        {
            using (var multipleReplace = new MultipleReplace())
            {
                multipleReplace.Initialize(this._subtitle);
                if (multipleReplace.ShowDialog(this) == DialogResult.OK)
                {
                    this.MakeHistoryForUndo(this._language.BeforeMultipleReplace);
                    this.SaveSubtitleListviewIndices();

                    for (int i = 0; i < this._subtitle.Paragraphs.Count; i++)
                    {
                        this._subtitle.Paragraphs[i].Text = multipleReplace.FixedSubtitle.Paragraphs[i].Text;
                    }

                    foreach (int deleteIndex in multipleReplace.DeleteIndices)
                    {
                        this._subtitle.Paragraphs.RemoveAt(deleteIndex);
                    }

                    this._subtitle.Renumber();

                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this.RestoreSubtitleListviewIndices();
                    this.RefreshSelectedParagraph();
                    this.ShowSource();
                    this.ShowStatus(string.Format(this._language.NumberOfLinesReplacedX, multipleReplace.FixCount));
                }
            }
        }

        /// <summary>
        /// The tool strip menu item import dvd subtitles click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemImportDvdSubtitlesClick(object sender, EventArgs e)
        {
            if (!this.ContinueNewOrExit())
            {
                return;
            }

            using (var formSubRip = new DvdSubRip(this.Handle))
            {
                if (formSubRip.ShowDialog(this) == DialogResult.OK)
                {
                    using (var showSubtitles = new DvdSubRipChooseLanguage())
                    {
                        showSubtitles.Initialize(formSubRip.MergedVobSubPacks, formSubRip.Palette, formSubRip.Languages, formSubRip.SelectedLanguage);
                        if (formSubRip.Languages.Count == 1 || showSubtitles.ShowDialog(this) == DialogResult.OK)
                        {
                            using (var formSubOcr = new VobSubOcr())
                            {
                                var subs = formSubRip.MergedVobSubPacks;
                                if (showSubtitles.SelectedVobSubMergedPacks != null)
                                {
                                    subs = showSubtitles.SelectedVobSubMergedPacks;
                                }

                                formSubOcr.Initialize(subs, formSubRip.Palette, Configuration.Settings.VobSubOcr, formSubRip.SelectedLanguage);
                                if (formSubOcr.ShowDialog(this) == DialogResult.OK)
                                {
                                    this.MakeHistoryForUndo(this._language.BeforeImportingDvdSubtitle);
                                    this.FileNew();
                                    this._subtitle.Paragraphs.Clear();
                                    this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                                    this._subtitle.WasLoadedWithFrameNumbers = false;
                                    this._subtitle.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                                    foreach (var p in formSubOcr.SubtitleFromOcr.Paragraphs)
                                    {
                                        this._subtitle.Paragraphs.Add(p);
                                    }

                                    this.ShowSource();
                                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                                    this._subtitleListViewIndex = -1;
                                    this.SubtitleListview1.FirstVisibleIndex = -1;
                                    this.SubtitleListview1.SelectIndexAndEnsureVisible(0, true);

                                    this._fileName = string.Empty;
                                    this.Text = this.Title;

                                    Configuration.Settings.Save();
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// The tool strip menu item sub idx click 1.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemSubIdxClick1(object sender, EventArgs e)
        {
            if (this.ContinueNewOrExit())
            {
                this.openFileDialog1.Title = this._language.OpenVobSubFile;
                this.openFileDialog1.FileName = string.Empty;
                this.openFileDialog1.Filter = this._language.VobSubFiles + "|*.sub";
                if (this.openFileDialog1.ShowDialog(this) == DialogResult.OK)
                {
                    this.ImportAndOcrVobSubSubtitleNew(this.openFileDialog1.FileName, false);
                    this.openFileDialog1.InitialDirectory = Path.GetDirectoryName(this.openFileDialog1.FileName);
                }
            }
        }

        /// <summary>
        /// The subtitle listview 1_ mouse double click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void SubtitleListview1_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            if (Configuration.Settings.General.ListViewDoubleClickAction == 1)
            {
                this.GotoSubPositionAndPause();
            }
            else if (Configuration.Settings.General.ListViewDoubleClickAction == 2)
            {
                if (this.AutoRepeatContinueOn)
                {
                    this.PlayCurrent();
                }
                else
                {
                    this.buttonBeforeText_Click(null, null);
                }
            }
            else if (Configuration.Settings.General.ListViewDoubleClickAction == 3)
            {
                this.GotoSubPositionAndPause(-0.5);
            }
            else if (Configuration.Settings.General.ListViewDoubleClickAction == 4)
            {
                this.GotoSubPositionAndPause(-1.0);
            }
            else if (Configuration.Settings.General.ListViewDoubleClickAction == 5)
            {
                if (this.AutoRepeatContinueOn)
                {
                    this.PlayCurrent();
                }
                else
                {
                    if (this.SubtitleListview1.SelectedItems.Count > 0)
                    {
                        int index = this.SubtitleListview1.SelectedItems[0].Index;

                        this.mediaPlayer.Pause();
                        double pos = this._subtitle.Paragraphs[index].StartTime.TotalSeconds;
                        if (pos > 1)
                        {
                            this.mediaPlayer.CurrentPosition = this._subtitle.Paragraphs[index].StartTime.TotalSeconds - 1.0;
                        }
                        else
                        {
                            this.mediaPlayer.CurrentPosition = this._subtitle.Paragraphs[index].StartTime.TotalSeconds;
                        }

                        this.mediaPlayer.Play();
                    }
                }
            }
            else if (Configuration.Settings.General.ListViewDoubleClickAction == 6)
            {
                this.GotoSubPositionAndPause();
                this.textBoxListViewText.Focus();
            }
            else if (Configuration.Settings.General.ListViewDoubleClickAction == 7)
            {
                this.textBoxListViewText.Focus();
            }
        }

        /// <summary>
        /// The add word to namesetc list tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void AddWordToNamesetcListToolStripMenuItemClick(object sender, EventArgs e)
        {
            using (var addToNamesList = new AddToNamesList())
            {
                addToNamesList.Initialize(this._subtitle, this.textBoxListViewText.SelectedText);
                if (addToNamesList.ShowDialog(this) == DialogResult.OK)
                {
                    this.ShowStatus(string.Format(this._language.NameXAddedToNamesEtcList, addToNamesList.NewName));
                }
                else if (!string.IsNullOrEmpty(addToNamesList.NewName))
                {
                    this.ShowStatus(string.Format(this._language.NameXNotAddedToNamesEtcList, addToNamesList.NewName));
                }
            }
        }

        /// <summary>
        /// The edit tool strip menu item drop down opening.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void EditToolStripMenuItemDropDownOpening(object sender, EventArgs e)
        {
            this.toolStripMenuItemRtlUnicodeControlChars.Visible = this.IsUnicode;
            if (!this.IsUnicode || this._subtitleListViewIndex == -1)
            {
                this.toolStripMenuItemInsertUnicodeCharacter.Visible = false;
                this.toolStripSeparatorInsertUnicodeCharacter.Visible = false;
            }
            else
            {
                if (this.toolStripMenuItemInsertUnicodeCharacter.DropDownItems.Count == 0)
                {
                    foreach (var s in Configuration.Settings.Tools.UnicodeSymbolsToInsert.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries))
                    {
                        this.toolStripMenuItemInsertUnicodeCharacter.DropDownItems.Add(s, null, this.InsertUnicodeGlyphAllowMultiLine);
                        if (Environment.OSVersion.Version.Major < 6 && Configuration.Settings.General.SubtitleFontName == Utilities.WinXP2KUnicodeFontName)
                        {
                            // 6 == Vista/Win2008Server/Win7
                            this.toolStripMenuItemInsertUnicodeCharacter.DropDownItems[this.toolStripMenuItemInsertUnicodeCharacter.DropDownItems.Count - 1].Font = new Font(Utilities.WinXP2KUnicodeFontName, this.toolStripMenuItemInsertUnicodeSymbol.Font.Size);
                        }
                    }
                }

                this.toolStripMenuItemInsertUnicodeCharacter.Visible = this.toolStripMenuItemInsertUnicodeCharacter.DropDownItems.Count > 0;
                this.toolStripSeparatorInsertUnicodeCharacter.Visible = this.toolStripMenuItemInsertUnicodeCharacter.DropDownItems.Count > 0;
            }

            lock (_syncUndo)
            {
                this.toolStripMenuItemUndo.Enabled = this._subtitle != null && this._subtitle.CanUndo && this._undoIndex >= 0;
                this.toolStripMenuItemRedo.Enabled = this._subtitle != null && this._subtitle.CanUndo && this._undoIndex < this._subtitle.HistoryItems.Count - 1;
            }

            this.showHistoryforUndoToolStripMenuItem.Enabled = this._subtitle != null && this._subtitle.CanUndo;
            this.toolStripMenuItemShowOriginalInPreview.Visible = this.SubtitleListview1.IsAlternateTextColumnVisible;

            if (this._networkSession != null)
            {
                this.toolStripMenuItemUndo.Enabled = false;
                this.toolStripMenuItemRedo.Enabled = false;
                this.showHistoryforUndoToolStripMenuItem.Enabled = false;
            }
        }

        /// <summary>
        /// The insert unicode glyph.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void InsertUnicodeGlyph(object sender, EventArgs e)
        {
            var item = sender as ToolStripItem;
            if (item != null)
            {
                this.PasteIntoActiveTextBox(item.Text);
            }
        }

        /// <summary>
        /// The insert unicode glyph allow multi line.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void InsertUnicodeGlyphAllowMultiLine(object sender, EventArgs e)
        {
            var item = sender as ToolStripItem;
            if (item != null)
            {
                this.PasteIntoActiveTextBox(item.Text, true);
            }
        }

        /// <summary>
        /// The tool strip menu item auto merge short lines click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemAutoMergeShortLinesClick(object sender, EventArgs e)
        {
            if (!this.IsSubtitleLoaded)
            {
                this.DisplaySubtitleNotLoadedMessage();
                return;
            }

            this.ReloadFromSourceView();
            using (var formMergeShortLines = new MergeShortLines())
            {
                formMergeShortLines.Initialize(this._subtitle);
                if (formMergeShortLines.ShowDialog(this) == DialogResult.OK)
                {
                    this.MakeHistoryForUndo(this._language.BeforeMergeShortLines);
                    this._subtitle.Paragraphs.Clear();
                    foreach (var p in formMergeShortLines.MergedSubtitle.Paragraphs)
                    {
                        this._subtitle.Paragraphs.Add(p);
                    }

                    this.ShowStatus(string.Format(this._language.MergedShortLinesX, formMergeShortLines.NumberOfMerges));
                    this.SaveSubtitleListviewIndices();
                    this.ShowSource();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this.RestoreSubtitleListviewIndices();
                }
            }
        }

        /// <summary>
        /// The tool strip menu item auto split long lines_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemAutoSplitLongLines_Click(object sender, EventArgs e)
        {
            if (!this.IsSubtitleLoaded)
            {
                this.DisplaySubtitleNotLoadedMessage();
                return;
            }

            this.ReloadFromSourceView();
            using (var splitLongLines = new SplitLongLines())
            {
                splitLongLines.Initialize(this._subtitle);
                if (splitLongLines.ShowDialog(this) == DialogResult.OK)
                {
                    this.MakeHistoryForUndo(this._language.BeforeMergeShortLines);
                    this._subtitle.Paragraphs.Clear();
                    foreach (var p in splitLongLines.SplittedSubtitle.Paragraphs)
                    {
                        this._subtitle.Paragraphs.Add(p);
                    }

                    this.ShowStatus(string.Format(this._language.MergedShortLinesX, splitLongLines.NumberOfSplits));
                    this.SaveSubtitleListviewIndices();
                    this.ShowSource();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this.RestoreSubtitleListviewIndices();
                }
            }
        }

        /// <summary>
        /// The set minimal display time difference tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void SetMinimalDisplayTimeDifferenceToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!this.IsSubtitleLoaded)
            {
                this.DisplaySubtitleNotLoadedMessage();
                return;
            }

            using (var setMinDisplayDiff = new SetMinimumDisplayTimeBetweenParagraphs())
            {
                setMinDisplayDiff.Initialize(this._subtitle);
                if (setMinDisplayDiff.ShowDialog() == DialogResult.OK && setMinDisplayDiff.FixCount > 0)
                {
                    this.MakeHistoryForUndo(this._language.BeforeSetMinimumDisplayTimeBetweenParagraphs);
                    this._subtitle.Paragraphs.Clear();
                    foreach (var p in setMinDisplayDiff.FixedSubtitle.Paragraphs)
                    {
                        this._subtitle.Paragraphs.Add(p);
                    }

                    this._subtitle.CalculateFrameNumbersFromTimeCodesNoCheck(this.CurrentFrameRate);
                    this.ShowStatus(string.Format(this._language.XMinimumDisplayTimeBetweenParagraphsChanged, setMinDisplayDiff.FixCount));
                    this.SaveSubtitleListviewIndices();
                    this.ShowSource();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this.RestoreSubtitleListviewIndices();
                }
            }
        }

        /// <summary>
        /// The tool strip menu item import text click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemImportTextClick(object sender, EventArgs e)
        {
            using (var importText = new ImportText())
            {
                if (importText.ShowDialog(this) == DialogResult.OK)
                {
                    if (this.ContinueNewOrExit())
                    {
                        this.MakeHistoryForUndo(this._language.BeforeImportText);
                        if (!string.IsNullOrEmpty(importText.VideoFileName))
                        {
                            this.OpenVideo(importText.VideoFileName);
                        }

                        this._subtitleListViewIndex = -1;
                        this._subtitle = importText.FixedSubtitle;
                        this._subtitle.CalculateFrameNumbersFromTimeCodesNoCheck(this.CurrentFrameRate);
                        this.ShowStatus(this._language.TextImported);
                        this.ShowSource();
                        this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                        this.SubtitleListview1.SelectIndexAndEnsureVisible(0, true);
                    }
                }
            }
        }

        /// <summary>
        /// The tool strip menu item point sync_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemPointSync_Click(object sender, EventArgs e)
        {
            using (var pointSync = new SyncPointsSync())
            {
                pointSync.Initialize(this._subtitle, this._fileName, this._videoFileName, this._videoAudioTrackNumber);
                this.mediaPlayer.Pause();
                if (pointSync.ShowDialog(this) == DialogResult.OK)
                {
                    this._subtitleListViewIndex = -1;
                    this.MakeHistoryForUndo(this._language.BeforePointSynchronization);
                    this._subtitle.Paragraphs.Clear();
                    foreach (var p in pointSync.FixedSubtitle.Paragraphs)
                    {
                        this._subtitle.Paragraphs.Add(p);
                    }

                    this._subtitle.CalculateFrameNumbersFromTimeCodesNoCheck(this.CurrentFrameRate);
                    this.ShowStatus(this._language.PointSynchronizationDone);
                    this.ShowSource();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                }

                this.Activate();
                this._videoFileName = pointSync.VideoFileName;
            }
        }

        /// <summary>
        /// The point sync via other subtitle tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void pointSyncViaOtherSubtitleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            using (var pointSync = new SyncPointsSync())
            {
                this.openFileDialog1.Title = this._language.OpenOtherSubtitle;
                this.openFileDialog1.FileName = string.Empty;
                this.openFileDialog1.Filter = Utilities.GetOpenDialogFilter();
                if (this.openFileDialog1.ShowDialog() == DialogResult.OK && File.Exists(this.openFileDialog1.FileName))
                {
                    var sub = new Subtitle();
                    var file = new FileInfo(this.openFileDialog1.FileName);
                    var fileName = file.FullName;
                    var extension = file.Extension.ToLowerInvariant();

                    // TODO: Check for mkv etc
                    if (extension == ".sub")
                    {
                        if (this.IsVobSubFile(fileName, false))
                        {
                            MessageBox.Show(this._language.NoSupportHereVobSub);
                            return;
                        }
                    }

                    if (extension == ".sup")
                    {
                        if (FileUtil.IsBluRaySup(fileName))
                        {
                            MessageBox.Show(this._language.NoSupportHereBluRaySup);
                            return;
                        }
                        else if (FileUtil.IsSpDvdSup(fileName))
                        {
                            MessageBox.Show(this._language.NoSupportHereDvdSup);
                            return;
                        }
                    }

                    if (extension == ".mkv" || extension == ".mks")
                    {
                        using (var matroska = new MatroskaFile(fileName))
                        {
                            if (matroska.IsValid)
                            {
                                var subtitleList = matroska.GetTracks(true);
                                if (subtitleList.Count > 1)
                                {
                                    using (var subtitleChooser = new MatroskaSubtitleChooser())
                                    {
                                        subtitleChooser.Initialize(subtitleList);
                                        if (this._loading)
                                        {
                                            subtitleChooser.Icon = (Icon)this.Icon.Clone();
                                            subtitleChooser.ShowInTaskbar = true;
                                            subtitleChooser.ShowIcon = true;
                                        }

                                        if (subtitleChooser.ShowDialog(this) == DialogResult.OK)
                                        {
                                            sub = this.LoadMatroskaSubtitleForSync(subtitleList[subtitleChooser.SelectedIndex], matroska);
                                        }
                                    }
                                }
                                else if (subtitleList.Count > 0)
                                {
                                    sub = this.LoadMatroskaSubtitleForSync(subtitleList[0], matroska);
                                }
                                else
                                {
                                    MessageBox.Show(this._language.NoSubtitlesFound);
                                    return;
                                }
                            }
                        }
                    }

                    if (extension == ".divx" || extension == ".avi")
                    {
                        MessageBox.Show(this._language.NoSupportHereDivx);
                        return;
                    }

                    if ((extension == ".mp4" || extension == ".m4v" || extension == ".3gp") && file.Length > 10000)
                    {
                        var mp4Parser = new MP4Parser(fileName);
                        var mp4SubtitleTracks = mp4Parser.GetSubtitleTracks();
                        if (mp4SubtitleTracks.Count == 0)
                        {
                            MessageBox.Show(this._language.NoSubtitlesFound);
                            return;
                        }
                        else if (mp4SubtitleTracks.Count == 1)
                        {
                            sub = LoadMp4SubtitleForSync(mp4SubtitleTracks[0]);
                        }
                        else
                        {
                            using (var subtitleChooser = new MatroskaSubtitleChooser())
                            {
                                subtitleChooser.Initialize(mp4SubtitleTracks);
                                if (subtitleChooser.ShowDialog(this) == DialogResult.OK)
                                {
                                    sub = LoadMp4SubtitleForSync(mp4SubtitleTracks[0]);
                                }
                            }
                        }
                    }

                    if (file.Length > 1024 * 1024 * 10 && sub.Paragraphs.Count == 0)
                    {
                        // max 10 mb
                        var text = string.Format(this._language.FileXIsLargerThan10MB + Environment.NewLine + Environment.NewLine + this._language.ContinueAnyway, fileName);
                        if (MessageBox.Show(this, text, this.Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                        {
                            return;
                        }
                    }

                    sub.Renumber();
                    if (sub.Paragraphs.Count == 0)
                    {
                        Encoding enc;
                        SubtitleFormat f = sub.LoadSubtitle(fileName, out enc, null);
                        if (f == null)
                        {
                            this.ShowUnknownSubtitle();
                            return;
                        }
                    }

                    pointSync.Initialize(this._subtitle, this._fileName, this._videoFileName, this._videoAudioTrackNumber, fileName, sub);
                    this.mediaPlayer.Pause();
                    if (pointSync.ShowDialog(this) == DialogResult.OK)
                    {
                        this._subtitleListViewIndex = -1;
                        this.MakeHistoryForUndo(this._language.BeforePointSynchronization);
                        this._subtitle.Paragraphs.Clear();
                        foreach (var p in pointSync.FixedSubtitle.Paragraphs)
                        {
                            this._subtitle.Paragraphs.Add(p);
                        }

                        this._subtitle.CalculateFrameNumbersFromTimeCodesNoCheck(this.CurrentFrameRate);
                        this.ShowStatus(this._language.PointSynchronizationDone);
                        this.ShowSource();
                        this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    }

                    this._videoFileName = pointSync.VideoFileName;
                }
            }
        }

        /// <summary>
        /// The tool strip menu item import time codes_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemImportTimeCodes_Click(object sender, EventArgs e)
        {
            if (this._subtitle.Paragraphs.Count < 1)
            {
                this.DisplaySubtitleNotLoadedMessage();
                return;
            }

            this.openFileDialog1.Title = this._languageGeneral.OpenSubtitle;
            this.openFileDialog1.FileName = string.Empty;
            this.openFileDialog1.Filter = Utilities.GetOpenDialogFilter();
            if (this.openFileDialog1.ShowDialog(this) == DialogResult.OK)
            {
                Encoding encoding;
                var timeCodeSubtitle = new Subtitle();
                SubtitleFormat format = timeCodeSubtitle.LoadSubtitle(this.openFileDialog1.FileName, out encoding, null);
                if (format == null)
                {
                    this.ShowUnknownSubtitle();
                    return;
                }

                if (timeCodeSubtitle.Paragraphs.Count != this._subtitle.Paragraphs.Count)
                {
                    var text = string.Format(this._language.ImportTimeCodesDifferentNumberOfLinesWarning, timeCodeSubtitle.Paragraphs.Count, this._subtitle.Paragraphs.Count);
                    if (MessageBox.Show(this, text, this._title, MessageBoxButtons.YesNo) == DialogResult.No)
                    {
                        return;
                    }
                }

                this.MakeHistoryForUndo(this._language.BeforeTimeCodeImport);

                if (this.GetCurrentSubtitleFormat().IsFrameBased)
                {
                    timeCodeSubtitle.CalculateTimeCodesFromFrameNumbers(this.CurrentFrameRate);
                }
                else
                {
                    timeCodeSubtitle.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                }

                int count = 0;
                for (int i = 0; i < timeCodeSubtitle.Paragraphs.Count; i++)
                {
                    var existing = this._subtitle.GetParagraphOrDefault(i);
                    var newTimeCode = timeCodeSubtitle.GetParagraphOrDefault(i);
                    if (existing == null || newTimeCode == null)
                    {
                        break;
                    }

                    existing.StartTime.TotalMilliseconds = newTimeCode.StartTime.TotalMilliseconds;
                    existing.EndTime.TotalMilliseconds = newTimeCode.EndTime.TotalMilliseconds;
                    existing.StartFrame = newTimeCode.StartFrame;
                    existing.EndFrame = newTimeCode.EndFrame;
                    count++;
                }

                this.ShowStatus(string.Format(this._language.TimeCodeImportedFromXY, Path.GetFileName(this.openFileDialog1.FileName), count));
                this.SaveSubtitleListviewIndices();
                this.ShowSource();
                this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                this.RestoreSubtitleListviewIndices();
            }
        }

        /// <summary>
        /// The tool strip menu item translation mode_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemTranslationMode_Click(object sender, EventArgs e)
        {
            if (this.SubtitleListview1.IsAlternateTextColumnVisible)
            {
                this.SubtitleListview1.HideAlternateTextColumn();
                this.SubtitleListview1.AutoSizeAllColumns(this);
                this._subtitleAlternate = new Subtitle();
                this._subtitleAlternateFileName = null;

                this.buttonUnBreak.Visible = true;
                this.buttonAutoBreak.Visible = true;
                this.textBoxListViewTextAlternate.Visible = false;
                this.labelAlternateText.Visible = false;
                this.labelAlternateCharactersPerSecond.Visible = false;
                this.labelTextAlternateLineLengths.Visible = false;
                this.labelAlternateSingleLine.Visible = false;
                this.labelTextAlternateLineTotal.Visible = false;
                this.textBoxListViewText.Width = this.groupBoxEdit.Width - (this.textBoxListViewText.Left + 8 + this.buttonUnBreak.Width);
                this.textBoxListViewText.Anchor = AnchorStyles.Left | AnchorStyles.Top | AnchorStyles.Right;

                this.labelCharactersPerSecond.Left = this.textBoxListViewText.Left + (this.textBoxListViewText.Width - this.labelCharactersPerSecond.Width);
                this.labelTextLineTotal.Left = this.textBoxListViewText.Left + (this.textBoxListViewText.Width - this.labelTextLineTotal.Width);
            }
            else
            {
                this.OpenAlternateSubtitle();
            }

            this.SetTitle();
        }

        /// <summary>
        /// The open alternate subtitle.
        /// </summary>
        private void OpenAlternateSubtitle()
        {
            if (this.ContinueNewOrExitAlternate())
            {
                this.SaveSubtitleListviewIndices();
                this.openFileDialog1.Title = this._languageGeneral.OpenOriginalSubtitleFile;
                this.openFileDialog1.FileName = string.Empty;
                this.openFileDialog1.Filter = Utilities.GetOpenDialogFilter();
                if (this.openFileDialog1.ShowDialog(this) != DialogResult.OK)
                {
                    return;
                }

                if (!this.LoadAlternateSubtitleFile(this.openFileDialog1.FileName))
                {
                    return;
                }

                this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                this.RestoreSubtitleListviewIndices();

                Configuration.Settings.RecentFiles.Add(this._fileName, this.FirstVisibleIndex, this.FirstSelectedIndex, this._videoFileName, this._subtitleAlternateFileName);
                Configuration.Settings.Save();
                this.UpdateRecentFilesUI();
            }
        }

        /// <summary>
        /// The load alternate subtitle file.
        /// </summary>
        /// <param name="fileName">
        /// The file name.
        /// </param>
        /// <returns>
        /// The <see cref="bool"/>.
        /// </returns>
        private bool LoadAlternateSubtitleFile(string fileName)
        {
            if (!File.Exists(fileName))
            {
                return false;
            }

            var file = new FileInfo(fileName);

            if (file.Extension.Equals(".sub", StringComparison.OrdinalIgnoreCase) && this.IsVobSubFile(fileName, false))
            {
                return false;
            }

            if (file.Length > 1024 * 1024 * 10)
            {
                // max 10 mb
                var text = string.Format(this._language.FileXIsLargerThan10MB + Environment.NewLine + Environment.NewLine + this._language.ContinueAnyway, fileName);
                if (MessageBox.Show(this, text, this.Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                {
                    return false;
                }
            }

            Encoding encoding;
            this._subtitleAlternate = new Subtitle();
            this._subtitleAlternateFileName = fileName;
            SubtitleFormat format = this._subtitleAlternate.LoadSubtitle(fileName, out encoding, null);

            if (format == null)
            {
                var ebu = new Ebu();
                if (ebu.IsMine(null, fileName))
                {
                    ebu.LoadSubtitle(this._subtitleAlternate, null, fileName);
                    format = ebu;
                }
            }

            if (format == null)
            {
                var pac = new Pac();
                if (pac.IsMine(null, fileName))
                {
                    pac.BatchMode = true;
                    pac.LoadSubtitle(this._subtitleAlternate, null, fileName);
                    format = pac;
                }
            }

            if (format == null)
            {
                var cavena890 = new Cavena890();
                if (cavena890.IsMine(null, fileName))
                {
                    cavena890.LoadSubtitle(this._subtitleAlternate, null, fileName);
                    format = cavena890;
                }
            }

            if (format == null)
            {
                var spt = new Spt();
                if (spt.IsMine(null, fileName))
                {
                    spt.LoadSubtitle(this._subtitleAlternate, null, fileName);
                    format = spt;
                }
            }

            if (format == null)
            {
                var cheetahCaption = new CheetahCaption();
                if (cheetahCaption.IsMine(null, fileName))
                {
                    cheetahCaption.LoadSubtitle(this._subtitleAlternate, null, fileName);
                    format = cheetahCaption;
                }
            }

            if (format == null)
            {
                var capMakerPlus = new CapMakerPlus();
                if (capMakerPlus.IsMine(null, fileName))
                {
                    capMakerPlus.LoadSubtitle(this._subtitleAlternate, null, fileName);
                    format = capMakerPlus;
                }
            }

            if (format == null)
            {
                var captionate = new Captionate();
                if (captionate.IsMine(null, fileName))
                {
                    captionate.LoadSubtitle(this._subtitleAlternate, null, fileName);
                    format = captionate;
                }
            }

            if (format == null)
            {
                var ultech130 = new Ultech130();
                if (ultech130.IsMine(null, fileName))
                {
                    ultech130.LoadSubtitle(this._subtitleAlternate, null, fileName);
                    format = ultech130;
                }
            }

            if (format == null)
            {
                var nciCaption = new NciCaption();
                if (nciCaption.IsMine(null, fileName))
                {
                    nciCaption.LoadSubtitle(this._subtitleAlternate, null, fileName);
                    format = nciCaption;
                }
            }

            if (format == null)
            {
                var tsb4 = new TSB4();
                if (tsb4.IsMine(null, fileName))
                {
                    tsb4.LoadSubtitle(this._subtitleAlternate, null, fileName);
                    format = tsb4;
                }
            }

            if (format == null)
            {
                var avidStl = new AvidStl();
                if (avidStl.IsMine(null, fileName))
                {
                    avidStl.LoadSubtitle(this._subtitleAlternate, null, fileName);
                    format = avidStl;
                }
            }

            if (format == null)
            {
                return false;
            }

            if (format.IsFrameBased)
            {
                this._subtitleAlternate.CalculateTimeCodesFromFrameNumbers(this.CurrentFrameRate);
            }
            else
            {
                this._subtitleAlternate.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
            }

            this.SetupAlternateEdit();
            return true;
        }

        /// <summary>
        /// The setup alternate edit.
        /// </summary>
        private void SetupAlternateEdit()
        {
            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && this._subtitleAlternate.Paragraphs.Count > 1)
            {
                InsertMissingParagraphs(this._subtitle, this._subtitleAlternate);
                InsertMissingParagraphs(this._subtitleAlternate, this._subtitle);

                this.buttonUnBreak.Visible = false;
                this.buttonAutoBreak.Visible = false;
                this.buttonSplitLine.Visible = false;

                this.textBoxListViewText.Anchor = AnchorStyles.Left | AnchorStyles.Top | AnchorStyles.Bottom;
                this.textBoxListViewText.Width = (this.groupBoxEdit.Width - (this.textBoxListViewText.Left + 10)) / 2;
                this.textBoxListViewTextAlternate.Anchor = AnchorStyles.Left | AnchorStyles.Top | AnchorStyles.Bottom;
                this.textBoxListViewTextAlternate.Left = this.textBoxListViewText.Left + this.textBoxListViewText.Width + 3;
                this.textBoxListViewTextAlternate.Width = this.textBoxListViewText.Width;
                this.textBoxListViewTextAlternate.Visible = true;
                this.labelAlternateText.Text = this._languageGeneral.OriginalText;
                this.labelAlternateText.Visible = true;
                this.labelAlternateCharactersPerSecond.Visible = true;
                this.labelTextAlternateLineLengths.Visible = true;
                this.labelAlternateSingleLine.Visible = true;
                this.labelTextAlternateLineTotal.Visible = true;

                this.labelCharactersPerSecond.Left = this.textBoxListViewText.Left + (this.textBoxListViewText.Width - this.labelCharactersPerSecond.Width);
                this.labelTextLineTotal.Left = this.textBoxListViewText.Left + (this.textBoxListViewText.Width - this.labelTextLineTotal.Width);
                this.Main_Resize(null, null);
                this._changeAlternateSubtitleToString = this._subtitleAlternate.ToText(new SubRip()).Trim();

                this.SetTitle();
            }

            this.SubtitleListview1.ShowAlternateTextColumn(this._languageGeneral.OriginalText);
            this.SubtitleListview1.AutoSizeAllColumns(this);
        }

        /// <summary>
        /// The insert missing paragraphs.
        /// </summary>
        /// <param name="masterSubtitle">
        /// The master subtitle.
        /// </param>
        /// <param name="insertIntoSubtitle">
        /// The insert into subtitle.
        /// </param>
        private static void InsertMissingParagraphs(Subtitle masterSubtitle, Subtitle insertIntoSubtitle)
        {
            int index = 0;
            foreach (var p in masterSubtitle.Paragraphs)
            {
                var insertParagraph = Utilities.GetOriginalParagraph(index, p, insertIntoSubtitle.Paragraphs);
                if (insertParagraph == null)
                {
                    insertParagraph = new Paragraph(p);
                    insertParagraph.Text = string.Empty;
                    insertIntoSubtitle.InsertParagraphInCorrectTimeOrder(insertParagraph);
                }

                index++;
            }

            insertIntoSubtitle.Renumber();
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// The open video.
        /// </summary>
        /// <param name="fileName">
        /// The file name.
        /// </param>
        private void OpenVideo(string fileName)
        {
            if (!string.IsNullOrEmpty(fileName) && File.Exists(fileName))
            {
                if (this._loading)
                {
                    this._videoFileName = fileName;
                    return;
                }

                var fi = new FileInfo(fileName);
                if (fi.Length < 1000)
                {
                    return;
                }

                this.ShowSubtitleTimer.Stop();
                this.Cursor = Cursors.WaitCursor;
                this.VideoFileName = fileName;
                if (this.mediaPlayer.VideoPlayer != null)
                {
                    this.mediaPlayer.Pause();
                    this.mediaPlayer.VideoPlayer.DisposeVideoPlayer();
                }

                this._endSeconds = -1;

                this._videoInfo = ShowVideoInfo(fileName);
                if (this._videoInfo.FramesPerSecond > 0)
                {
                    this.toolStripComboBoxFrameRate.Text = string.Format("{0:0.###}", this._videoInfo.FramesPerSecond);
                }

                Utilities.InitializeVideoPlayerAndContainer(fileName, this._videoInfo, this.mediaPlayer, this.VideoLoaded, this.VideoEnded);
                this.mediaPlayer.ShowFullscreenButton = Configuration.Settings.General.VideoPlayerShowFullscreenButton;
                this.mediaPlayer.OnButtonClicked -= this.MediaPlayer_OnButtonClicked;
                this.mediaPlayer.OnButtonClicked += this.MediaPlayer_OnButtonClicked;
                this.mediaPlayer.Volume = 0;

                if (this._videoInfo.VideoCodec != null)
                {
                    this.labelVideoInfo.Text = Path.GetFileName(fileName) + " " + this._videoInfo.Width + "x" + this._videoInfo.Height + " " + this._videoInfo.VideoCodec.Trim();
                }
                else
                {
                    this.labelVideoInfo.Text = Path.GetFileName(fileName) + " " + this._videoInfo.Width + "x" + this._videoInfo.Height;
                }

                if (this._videoInfo.FramesPerSecond > 0)
                {
                    this.labelVideoInfo.Text = this.labelVideoInfo.Text + " " + string.Format("{0:0.0##}", this._videoInfo.FramesPerSecond);
                }

                string peakWaveFileName = GetPeakWaveFileName(fileName);
                string spectrogramFolder = GetSpectrogramFolder(fileName);
                if (File.Exists(peakWaveFileName))
                {
                    this.audioVisualizer.WavePeaks = new WavePeakGenerator(peakWaveFileName);
                    this.audioVisualizer.ResetSpectrogram();
                    this.audioVisualizer.InitializeSpectrogram(spectrogramFolder);
                    this.toolStripComboBoxWaveform_SelectedIndexChanged(null, null);
                    this.audioVisualizer.WavePeaks.GenerateAllSamples();
                    this.audioVisualizer.WavePeaks.Close();
                    this.SetWaveformPosition(0, 0, 0);
                    this.timerWaveform.Start();
                }

                this.Cursor = Cursors.Default;

                this.SetUndockedWindowsTitle();
                this.ShowSubtitleTimer.Start();
            }
        }

        /// <summary>
        /// The media player_ on button clicked.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void MediaPlayer_OnButtonClicked(object sender, EventArgs e)
        {
            var pb = sender as PictureBox;
            if (pb != null && pb.Name == "_pictureBoxFullscreenOver")
            {
                if (this._videoPlayerUndocked != null && !this._videoPlayerUndocked.IsDisposed && this._videoPlayerUndocked.IsFullscreen)
                {
                    this._videoPlayerUndocked.NoFullscreen();
                }
                else
                {
                    this.GoFullscreen();
                }
            }
        }

        /// <summary>
        /// The set waveform position.
        /// </summary>
        /// <param name="startPositionSeconds">
        /// The start position seconds.
        /// </param>
        /// <param name="currentVideoPositionSeconds">
        /// The current video position seconds.
        /// </param>
        /// <param name="subtitleIndex">
        /// The subtitle index.
        /// </param>
        private void SetWaveformPosition(double startPositionSeconds, double currentVideoPositionSeconds, int subtitleIndex)
        {
            if (this._subtitleAlternate != null && this.SubtitleListview1.IsAlternateTextColumnVisible && Configuration.Settings.General.ShowOriginalAsPreviewIfAvailable)
            {
                int index = -1;
                if (this.SubtitleListview1.SelectedItems.Count > 0 && this._subtitle.Paragraphs.Count > 0)
                {
                    int i = this.SubtitleListview1.SelectedItems[0].Index;
                    var p = Utilities.GetOriginalParagraph(i, this._subtitle.Paragraphs[i], this._subtitleAlternate.Paragraphs);
                    index = this._subtitleAlternate.GetIndex(p);
                }

                this.audioVisualizer.SetPosition(startPositionSeconds, this._subtitleAlternate, currentVideoPositionSeconds, index, this.SubtitleListview1.SelectedIndices);
            }
            else
            {
                this.audioVisualizer.SetPosition(startPositionSeconds, this._subtitle, currentVideoPositionSeconds, subtitleIndex, this.SubtitleListview1.SelectedIndices);
            }
        }

        /// <summary>
        /// The video loaded.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void VideoLoaded(object sender, EventArgs e)
        {
            this.mediaPlayer.Volume = Configuration.Settings.General.VideoPlayerDefaultVolume;
            this.timer1.Start();

            this.trackBarWaveformPosition.Maximum = (int)this.mediaPlayer.Duration;

            if (this._videoLoadedGoToSubPosAndPause)
            {
                Application.DoEvents();
                this._videoLoadedGoToSubPosAndPause = false;
                this.GotoSubPositionAndPause();
            }

            this.mediaPlayer.Pause();
        }

        /// <summary>
        /// The video ended.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void VideoEnded(object sender, EventArgs e)
        {
            this.mediaPlayer.Pause();
        }

        /// <summary>
        /// The show video info.
        /// </summary>
        /// <param name="fileName">
        /// The file name.
        /// </param>
        /// <returns>
        /// The <see cref="VideoInfo"/>.
        /// </returns>
        private static VideoInfo ShowVideoInfo(string fileName)
        {
            return Utilities.GetVideoInfo(fileName);
        }

        /// <summary>
        /// The try to find and open video file.
        /// </summary>
        /// <param name="fileNameNoExtension">
        /// The file name no extension.
        /// </param>
        private void TryToFindAndOpenVideoFile(string fileNameNoExtension)
        {
            string movieFileName = null;

            foreach (var extension in Utilities.GetMovieFileExtensions())
            {
                var fileName = fileNameNoExtension + extension;
                if (File.Exists(fileName))
                {
                    bool skipLoad = false;
                    if (extension == ".m2ts" && new FileInfo(fileName).Length < 2000000)
                    {
                        var textSt = new TextST();
                        skipLoad = textSt.IsMine(null, fileName); // don't load TextST files as video/audio file
                    }

                    if (!skipLoad)
                    {
                        movieFileName = fileName;
                        break;
                    }
                }
            }

            if (movieFileName != null)
            {
                this.OpenVideo(movieFileName);
            }
            else
            {
                var index = fileNameNoExtension.LastIndexOf('.');
                if (index > 0)
                {
                    this.TryToFindAndOpenVideoFile(fileNameNoExtension.Remove(index));
                }
            }
        }

        /// <summary>
        /// The go back seconds.
        /// </summary>
        /// <param name="seconds">
        /// The seconds.
        /// </param>
        internal void GoBackSeconds(double seconds)
        {
            if (this.mediaPlayer.CurrentPosition > seconds)
            {
                this.mediaPlayer.CurrentPosition -= seconds;
            }
            else
            {
                this.mediaPlayer.CurrentPosition = 0;
            }

            this.ShowSubtitle();
        }

        /// <summary>
        /// The button start half a second back click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ButtonStartHalfASecondBackClick(object sender, EventArgs e)
        {
            this.GoBackSeconds(0.5);
        }

        /// <summary>
        /// The button start three seconds back click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ButtonStartThreeSecondsBackClick(object sender, EventArgs e)
        {
            this.GoBackSeconds(3.0);
        }

        /// <summary>
        /// The button start one minute back click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ButtonStartOneMinuteBackClick(object sender, EventArgs e)
        {
            this.GoBackSeconds(60);
        }

        /// <summary>
        /// The button start half a second ahead click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ButtonStartHalfASecondAheadClick(object sender, EventArgs e)
        {
            this.GoBackSeconds(-0.5);
        }

        /// <summary>
        /// The button start three seconds ahead click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ButtonStartThreeSecondsAheadClick(object sender, EventArgs e)
        {
            this.GoBackSeconds(-3);
        }

        /// <summary>
        /// The button start one minute ahead click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ButtonStartOneMinuteAheadClick(object sender, EventArgs e)
        {
            this.GoBackSeconds(-60);
        }

        /// <summary>
        /// The show subtitle timer tick.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ShowSubtitleTimerTick(object sender, EventArgs e)
        {
            this.ShowSubtitleTimer.Stop();
            int oldIndex = this.FirstSelectedIndex;
            int index = this.ShowSubtitle();
            if (index != -1 && this.checkBoxSyncListViewWithVideoWhilePlaying.Checked && oldIndex != index)
            {
                if ((DateTime.Now.Ticks - this._lastTextKeyDownTicks) > 10000 * 700)
                {
                    // only if last typed char was entered > 700 milliseconds
                    if (this._endSeconds <= 0 || !this.checkBoxAutoRepeatOn.Checked)
                    {
                        if (!this.timerAutoDuration.Enabled && !this.mediaPlayer.IsPaused)
                        {
                            this.SubtitleListview1.BeginUpdate();
                            this.SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                            this.SubtitleListview1.EndUpdate();
                        }
                    }
                }
            }

            if (string.CompareOrdinal(this._changeSubtitleToString, SerializeSubtitle(this._subtitle)) != 0)
            {
                if (!this.Text.EndsWith('*'))
                {
                    this.Text = this.Text.TrimEnd() + "*";
                }
            }
            else
            {
                if (this.Text.EndsWith('*'))
                {
                    this.Text = this.Text.TrimEnd('*').TrimEnd();
                }
            }

            this.ShowSubtitleTimer.Start();
        }

        /// <summary>
        /// The video mode hidden tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void videoModeHiddenToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.HideVideoPlayer();
        }

        /// <summary>
        /// The createadjust lines tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void createadjustLinesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.ShowVideoPlayer();
        }

        /// <summary>
        /// The hide video player.
        /// </summary>
        private void HideVideoPlayer()
        {
            this.mediaPlayer.Pause();

            int textHeight = this.splitContainerListViewAndText.Height - this.splitContainerListViewAndText.SplitterDistance;

            this.splitContainer1.Panel2Collapsed = true;
            this.splitContainerMain.Panel2Collapsed = true;
            this.Main_Resize(null, null);

            this.splitContainerListViewAndText.SplitterDistance = this.splitContainerListViewAndText.Height - textHeight;
        }

        /// <summary>
        /// The show video player.
        /// </summary>
        private void ShowVideoPlayer()
        {
            if (this._isVideoControlsUndocked)
            {
                this.ShowHideUndockedVideoControls();
            }
            else
            {
                if (this.toolStripButtonToggleVideo.Checked && this.toolStripButtonToggleWaveform.Checked)
                {
                    this.splitContainer1.Panel2Collapsed = false;
                    this.MoveVideoUp();
                }
                else
                {
                    this.splitContainer1.Panel2Collapsed = true;
                    this.MoveVideoDown();
                }

                this.splitContainerMain.Panel2Collapsed = false;
                if (this.toolStripButtonToggleVideo.Checked)
                {
                    if (this.audioVisualizer.Visible)
                    {
                        this.audioVisualizer.Left = this.tabControlButtons.Left + this.tabControlButtons.Width + 5;
                    }
                    else
                    {
                        this.panelVideoPlayer.Left = this.tabControlButtons.Left + this.tabControlButtons.Width + 5;
                    }
                }
                else if (this.audioVisualizer.Visible)
                {
                    this.audioVisualizer.Left = this.tabControlButtons.Left + this.tabControlButtons.Width + 5;
                }

                this.audioVisualizer.Width = this.groupBoxVideo.Width - (this.audioVisualizer.Left + 10);

                this.checkBoxSyncListViewWithVideoWhilePlaying.Left = this.tabControlButtons.Left + this.tabControlButtons.Width + 5;
                this.panelWaveformControls.Left = this.audioVisualizer.Left;
                this.trackBarWaveformPosition.Left = this.panelWaveformControls.Left + this.panelWaveformControls.Width + 5;
                this.trackBarWaveformPosition.Width = this.audioVisualizer.Left + this.audioVisualizer.Width - this.trackBarWaveformPosition.Left + 5;
            }

            if (this.mediaPlayer.VideoPlayer == null && !string.IsNullOrEmpty(this._fileName))
            {
                this.TryToFindAndOpenVideoFile(Path.Combine(Path.GetDirectoryName(this._fileName), Path.GetFileNameWithoutExtension(this._fileName)));
            }

            this.Main_Resize(null, null);
        }

        /// <summary>
        /// The show hide undocked video controls.
        /// </summary>
        private void ShowHideUndockedVideoControls()
        {
            if (this._videoPlayerUndocked == null || this._videoPlayerUndocked.IsDisposed)
            {
                this.UnDockVideoPlayer();
            }

            this._videoPlayerUndocked.Visible = false;
            if (this.toolStripButtonToggleVideo.Checked)
            {
                this._videoPlayerUndocked.Show(this);
                if (this._videoPlayerUndocked.WindowState == FormWindowState.Minimized)
                {
                    this._videoPlayerUndocked.WindowState = FormWindowState.Normal;
                }
            }

            if (this._waveformUndocked == null || this._waveformUndocked.IsDisposed)
            {
                this.UnDockWaveform();
            }

            this._waveformUndocked.Visible = false;
            if (this.toolStripButtonToggleWaveform.Checked)
            {
                this._waveformUndocked.Show(this);
                if (this._waveformUndocked.WindowState == FormWindowState.Minimized)
                {
                    this._waveformUndocked.WindowState = FormWindowState.Normal;
                }
            }

            if (this.toolStripButtonToggleVideo.Checked || this.toolStripButtonToggleWaveform.Checked)
            {
                if (this._videoControlsUndocked == null || this._videoControlsUndocked.IsDisposed)
                {
                    this.UnDockVideoButtons();
                }

                this._videoControlsUndocked.Visible = false;
                this._videoControlsUndocked.Show(this);
            }
            else
            {
                if (this._videoControlsUndocked != null && !this._videoControlsUndocked.IsDisposed)
                {
                    this._videoControlsUndocked.Visible = false;
                }
            }
        }

        /// <summary>
        /// The move video up.
        /// </summary>
        private void MoveVideoUp()
        {
            if (this.splitContainer1.Panel2.Controls.Count == 0)
            {
                var control = this.panelVideoPlayer;
                this.groupBoxVideo.Controls.Remove(control);
                this.splitContainer1.Panel2.Controls.Add(control);
            }

            this.panelVideoPlayer.Top = 0;
            this.panelVideoPlayer.Left = 0;
            this.panelVideoPlayer.Height = this.splitContainer1.Panel2.Height - 2;
            this.panelVideoPlayer.Width = this.splitContainer1.Panel2.Width - 2;
        }

        /// <summary>
        /// The move video down.
        /// </summary>
        private void MoveVideoDown()
        {
            if (this.splitContainer1.Panel2.Controls.Count > 0)
            {
                var control = this.panelVideoPlayer;
                this.splitContainer1.Panel2.Controls.Clear();
                this.groupBoxVideo.Controls.Add(control);
            }

            this.panelVideoPlayer.Top = 32;
            this.panelVideoPlayer.Left = this.tabControlButtons.Left + this.tabControlButtons.Width + 5;
            this.panelVideoPlayer.Height = this.groupBoxVideo.Height - (this.panelVideoPlayer.Top + 5);
            this.panelVideoPlayer.Width = this.groupBoxVideo.Width - (this.panelVideoPlayer.Left + 5);
        }

        /// <summary>
        /// The fix large fonts.
        /// </summary>
        private void FixLargeFonts()
        {
            using (var graphics = this.CreateGraphics())
            {
                var textSize = graphics.MeasureString(this.buttonPlayPrevious.Text, this.Font);
                if (textSize.Height > this.buttonPlayPrevious.Height - 4)
                {
                    int newButtonHeight = 22; // (int)(textSize.Height + 7 + 0.5);
                    Utilities.SetButtonHeight(this, newButtonHeight, 1);

                    // List view
                    this.SubtitleListview1.InitializeTimestampColumnWidths(this);
                    const int adjustUp = 8;
                    this.SubtitleListview1.Height = this.SubtitleListview1.Height - adjustUp;
                    this.groupBoxEdit.Top = this.groupBoxEdit.Top - adjustUp;
                    this.groupBoxEdit.Height = this.groupBoxEdit.Height + adjustUp;
                    this.numericUpDownDuration.Left = this.timeUpDownStartTime.Left + this.timeUpDownStartTime.Width;
                    this.numericUpDownDuration.Width = this.numericUpDownDuration.Width + 5;
                    this.labelDuration.Left = this.numericUpDownDuration.Left - 3;
                    this.labelAutoDuration.Left = this.labelDuration.Left - (this.labelAutoDuration.Width - 5);

                    // Video controls - Create
                    this.timeUpDownVideoPosition.Left = this.labelVideoPosition.Left + this.labelVideoPosition.Width;
                    int buttonWidth = this.labelVideoPosition.Width + this.timeUpDownVideoPosition.Width;
                    this.buttonInsertNewText.Width = buttonWidth;
                    this.buttonBeforeText.Width = buttonWidth;
                    this.buttonGotoSub.Width = buttonWidth;
                    this.buttonSetStartTime.Width = buttonWidth;
                    this.buttonSetEnd.Width = buttonWidth;
                    int FKeyLeft = this.buttonInsertNewText.Left + this.buttonInsertNewText.Width;
                    this.labelCreateF9.Left = FKeyLeft;
                    this.labelCreateF10.Left = FKeyLeft;
                    this.labelCreateF11.Left = FKeyLeft;
                    this.labelCreateF12.Left = FKeyLeft;
                    this.buttonForward1.Left = this.buttonInsertNewText.Left + this.buttonInsertNewText.Width - this.buttonForward1.Width;
                    this.numericUpDownSec1.Width = this.buttonInsertNewText.Width - (this.numericUpDownSec1.Left + this.buttonForward1.Width);
                    this.buttonForward2.Left = this.buttonInsertNewText.Left + this.buttonInsertNewText.Width - this.buttonForward2.Width;
                    this.numericUpDownSec2.Width = this.buttonInsertNewText.Width - (this.numericUpDownSec2.Left + this.buttonForward2.Width);

                    // Video controls - Adjust
                    this.timeUpDownVideoPositionAdjust.Left = this.labelVideoPosition2.Left + this.labelVideoPosition2.Width;
                    this.buttonSetStartAndOffsetRest.Width = buttonWidth;
                    this.buttonSetEndAndGoToNext.Width = buttonWidth;
                    this.buttonAdjustSetStartTime.Width = buttonWidth;
                    this.buttonAdjustSetEndTime.Width = buttonWidth;
                    this.buttonAdjustPlayBefore.Width = buttonWidth;
                    this.buttonAdjustGoToPosAndPause.Width = buttonWidth;
                    this.labelAdjustF9.Left = FKeyLeft;
                    this.labelAdjustF10.Left = FKeyLeft;
                    this.labelAdjustF11.Left = FKeyLeft;
                    this.labelAdjustF12.Left = FKeyLeft;
                    this.buttonAdjustSecForward1.Left = this.buttonInsertNewText.Left + this.buttonInsertNewText.Width - this.buttonAdjustSecForward1.Width;
                    this.numericUpDownSecAdjust1.Width = this.buttonInsertNewText.Width - (this.numericUpDownSecAdjust2.Left + this.buttonAdjustSecForward1.Width);
                    this.buttonAdjustSecForward2.Left = this.buttonInsertNewText.Left + this.buttonInsertNewText.Width - this.buttonAdjustSecForward2.Width;
                    this.numericUpDownSecAdjust2.Width = this.buttonInsertNewText.Width - (this.numericUpDownSecAdjust2.Left + this.buttonAdjustSecForward2.Width);

                    this.tabControl1_SelectedIndexChanged(null, null);
                }
            }
        }

        /// <summary>
        /// The main_ resize.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void Main_Resize(object sender, EventArgs e)
        {
            if (this._loading)
            {
                return;
            }

            this.panelVideoPlayer.Invalidate();

            this.MainResize();

            // Due to strange bug in listview when maximizing
            this.SaveSubtitleListviewIndices();
            this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
            this.RestoreSubtitleListviewIndices();

            this.panelVideoPlayer.Refresh();
        }

        /// <summary>
        /// The main resize.
        /// </summary>
        private void MainResize()
        {
            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && this._subtitleAlternate != null && this._subtitleAlternate.Paragraphs.Count > 0)
            {
                this.textBoxListViewText.Width = (this.groupBoxEdit.Width - (this.textBoxListViewText.Left + 10)) / 2;
                this.textBoxListViewTextAlternate.Left = this.textBoxListViewText.Left + this.textBoxListViewText.Width + 3;
                this.labelAlternateText.Left = this.textBoxListViewTextAlternate.Left;

                this.textBoxListViewTextAlternate.Width = this.textBoxListViewText.Width;

                this.labelAlternateCharactersPerSecond.Left = this.textBoxListViewTextAlternate.Left + (this.textBoxListViewTextAlternate.Width - this.labelAlternateCharactersPerSecond.Width);
                this.labelTextAlternateLineLengths.Left = this.textBoxListViewTextAlternate.Left;
                this.labelAlternateSingleLine.Left = this.labelTextAlternateLineLengths.Left + this.labelTextAlternateLineLengths.Width;
                this.labelTextAlternateLineTotal.Left = this.textBoxListViewTextAlternate.Left + (this.textBoxListViewTextAlternate.Width - this.labelTextAlternateLineTotal.Width);
            }

            this.labelCharactersPerSecond.Left = this.textBoxListViewText.Left + (this.textBoxListViewText.Width - this.labelCharactersPerSecond.Width);
            this.labelTextLineTotal.Left = this.textBoxListViewText.Left + (this.textBoxListViewText.Width - this.labelTextLineTotal.Width);
            this.SubtitleListview1.AutoSizeAllColumns(this);
        }

        /// <summary>
        /// The play current.
        /// </summary>
        private void PlayCurrent()
        {
            if (this._subtitleListViewIndex >= 0)
            {
                this.GotoSubtitleIndex(this._subtitleListViewIndex);
                this.textBoxListViewText.Focus();
                this.ReadyAutoRepeat();
                this.PlayPart(this._subtitle.Paragraphs[this._subtitleListViewIndex]);
            }
        }

        /// <summary>
        /// The ready auto repeat.
        /// </summary>
        private void ReadyAutoRepeat()
        {
            if (this.checkBoxAutoRepeatOn.Checked)
            {
                this._repeatCount = int.Parse(this.comboBoxAutoRepeat.Text);
            }
            else
            {
                this._repeatCount = -1;
            }

            if (this.mediaPlayer.VideoPlayer != null)
            {
                this.labelStatus.Text = this._language.VideoControls.Playing;
            }
        }

        /// <summary>
        /// The next.
        /// </summary>
        private void Next()
        {
            int newIndex = this._subtitleListViewIndex + 1;
            if (newIndex < this._subtitle.Paragraphs.Count)
            {
                foreach (ListViewItem item in this.SubtitleListview1.SelectedItems)
                {
                    item.Selected = false;
                }

                this.SubtitleListview1.Items[newIndex].Selected = true;
                this.SubtitleListview1.Items[newIndex].EnsureVisible();
                this.textBoxListViewText.Focus();
                this.textBoxListViewText.SelectAll();
                this._subtitleListViewIndex = newIndex;
                this.GotoSubtitleIndex(newIndex);
                this.ShowSubtitle();
                this.PlayCurrent();
            }
        }

        /// <summary>
        /// The play previous.
        /// </summary>
        private void PlayPrevious()
        {
            if (this._subtitleListViewIndex > 0)
            {
                int newIndex = this._subtitleListViewIndex - 1;
                foreach (ListViewItem item in this.SubtitleListview1.SelectedItems)
                {
                    item.Selected = false;
                }

                this.SubtitleListview1.Items[newIndex].Selected = true;
                this.SubtitleListview1.Items[newIndex].EnsureVisible();
                this.textBoxListViewText.Focus();
                this.textBoxListViewText.SelectAll();
                this.GotoSubtitleIndex(newIndex);
                this.ShowSubtitle();
                this._subtitleListViewIndex = newIndex;
                this.PlayCurrent();
            }
        }

        /// <summary>
        /// The goto subtitle index.
        /// </summary>
        /// <param name="index">
        /// The index.
        /// </param>
        private void GotoSubtitleIndex(int index)
        {
            if (this.mediaPlayer.VideoPlayer != null && this.mediaPlayer.Duration > 0)
            {
                this.mediaPlayer.CurrentPosition = this._subtitle.Paragraphs[index].StartTime.TotalSeconds;
            }
        }

        /// <summary>
        /// The play part.
        /// </summary>
        /// <param name="paragraph">
        /// The paragraph.
        /// </param>
        private void PlayPart(Paragraph paragraph)
        {
            if (this.mediaPlayer.VideoPlayer != null)
            {
                double startSeconds = paragraph.StartTime.TotalSeconds;
                if (startSeconds > 0.2)
                {
                    startSeconds -= 0.2; // go a little back
                }

                this._endSeconds = paragraph.EndTime.TotalSeconds;
                if (this.mediaPlayer.Duration > this._endSeconds + 0.2)
                {
                    this._endSeconds += 0.2; // go a little forward
                }

                this.mediaPlayer.CurrentPosition = startSeconds;
                this.ShowSubtitle();
                this.mediaPlayer.Play();
            }
        }

        /// <summary>
        /// The button set start time_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void buttonSetStartTime_Click(object sender, EventArgs e)
        {
            this.SetStartTime(false);
        }

        /// <summary>
        /// The set start time.
        /// </summary>
        /// <param name="adjustEndTime">
        /// The adjust end time.
        /// </param>
        private void SetStartTime(bool adjustEndTime)
        {
            if (this.SubtitleListview1.SelectedItems.Count == 1)
            {
                this.timeUpDownStartTime.MaskedTextBox.TextChanged -= this.MaskedTextBoxTextChanged;
                int index = this.SubtitleListview1.SelectedItems[0].Index;
                var p = this._subtitle.Paragraphs[index];
                var oldParagraph = new Paragraph(p);
                if (oldParagraph.StartTime.IsMaxTime || oldParagraph.EndTime.IsMaxTime)
                {
                    adjustEndTime = true;
                }

                double videoPosition = this.mediaPlayer.CurrentPosition;
                if (!this.mediaPlayer.IsPaused)
                {
                    videoPosition -= Configuration.Settings.General.SetStartEndHumanDelay / TimeCode.BaseUnit;
                }

                this.MakeHistoryForUndoOnlyIfNotResent(string.Format(this._language.VideoControls.BeforeChangingTimeInWaveformX, "#" + p.Number + " " + p.Text));

                this.timeUpDownStartTime.TimeCode = TimeCode.FromSeconds(videoPosition);

                var duration = p.Duration.TotalMilliseconds;

                p.StartTime.TotalMilliseconds = videoPosition * TimeCode.BaseUnit;
                if (adjustEndTime)
                {
                    p.EndTime.TotalMilliseconds = p.StartTime.TotalMilliseconds + duration;
                }

                if (oldParagraph.StartTime.IsMaxTime)
                {
                    p.EndTime.TotalMilliseconds = p.StartTime.TotalMilliseconds + Utilities.GetOptimalDisplayMilliseconds(p.Text);
                }

                this.SubtitleListview1.SetStartTimeAndDuration(index, p);
                this.timeUpDownStartTime.TimeCode = p.StartTime;
                this.timeUpDownStartTime.MaskedTextBox.TextChanged += this.MaskedTextBoxTextChanged;

                if (!adjustEndTime)
                {
                    this.SetDurationInSeconds(p.Duration.TotalSeconds);
                }

                this.UpdateOriginalTimeCodes(oldParagraph);
                if (this.IsFramesRelevant && this.CurrentFrameRate > 0)
                {
                    this._subtitle.CalculateFrameNumbersFromTimeCodesNoCheck(this.CurrentFrameRate);
                    if (this.tabControlSubtitle.SelectedIndex == TabControlSourceView)
                    {
                        this.ShowSource();
                    }
                }
            }
        }

        /// <summary>
        /// The button set end click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ButtonSetEndClick(object sender, EventArgs e)
        {
            if (this.SubtitleListview1.SelectedItems.Count == 1)
            {
                double videoPosition = this.mediaPlayer.CurrentPosition;
                if (!this.mediaPlayer.IsPaused)
                {
                    videoPosition -= Configuration.Settings.General.SetStartEndHumanDelay / TimeCode.BaseUnit;
                }

                int index = this.SubtitleListview1.SelectedItems[0].Index;
                this.MakeHistoryForUndoOnlyIfNotResent(string.Format(this._language.VideoControls.BeforeChangingTimeInWaveformX, "#" + this._subtitle.Paragraphs[index].Number + " " + this._subtitle.Paragraphs[index].Text));

                if (this._subtitle.Paragraphs[index].StartTime.IsMaxTime)
                {
                    this.timeUpDownStartTime.MaskedTextBox.TextChanged -= this.MaskedTextBoxTextChanged;
                    this._subtitle.Paragraphs[index].EndTime.TotalSeconds = videoPosition;
                    this._subtitle.Paragraphs[index].StartTime.TotalMilliseconds = this._subtitle.Paragraphs[index].EndTime.TotalMilliseconds - Utilities.GetOptimalDisplayMilliseconds(this._subtitle.Paragraphs[index].Text);
                    if (this._subtitle.Paragraphs[index].StartTime.TotalMilliseconds < 0)
                    {
                        this._subtitle.Paragraphs[index].StartTime.TotalMilliseconds = 0;
                    }

                    this.timeUpDownStartTime.TimeCode = this._subtitle.Paragraphs[index].StartTime;
                    this.SubtitleListview1.SetStartTime(index, this._subtitle.Paragraphs[index]);
                    this.timeUpDownStartTime.MaskedTextBox.TextChanged += this.MaskedTextBoxTextChanged;
                }
                else
                {
                    this._subtitle.Paragraphs[index].EndTime = TimeCode.FromSeconds(videoPosition);
                    if (this._subtitle.Paragraphs[index].Duration.TotalMilliseconds < Configuration.Settings.General.SubtitleMinimumDisplayMilliseconds)
                    {
                        this._subtitle.Paragraphs[index].Duration.TotalMilliseconds = Configuration.Settings.General.SubtitleMinimumDisplayMilliseconds;
                    }
                }

                this.SubtitleListview1.SetStartTimeAndDuration(index, this._subtitle.Paragraphs[index]);
                this.SetDurationInSeconds(this._subtitle.Paragraphs[index].Duration.TotalSeconds);
            }
        }

        /// <summary>
        /// The button insert new text click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ButtonInsertNewTextClick(object sender, EventArgs e)
        {
            this.mediaPlayer.Pause();

            var newParagraph = this.InsertNewTextAtVideoPosition();

            this.textBoxListViewText.Focus();
            this.timerAutoDuration.Start();

            this.ShowStatus(string.Format(this._language.VideoControls.NewTextInsertAtX, newParagraph.StartTime.ToShortString()));
        }

        /// <summary>
        /// The insert new text at video position.
        /// </summary>
        /// <returns>
        /// The <see cref="Paragraph"/>.
        /// </returns>
        private Paragraph InsertNewTextAtVideoPosition()
        {
            // current movie Position
            double videoPositionInMilliseconds = this.mediaPlayer.CurrentPosition * TimeCode.BaseUnit;
            if (!this.mediaPlayer.IsPaused)
            {
                videoPositionInMilliseconds -= Configuration.Settings.General.SetStartEndHumanDelay;
            }

            var tc = new TimeCode(videoPositionInMilliseconds);
            this.MakeHistoryForUndo(this._language.BeforeInsertSubtitleAtVideoPosition + "  " + tc);

            // find index where to insert
            int index = 0;
            foreach (var p in this._subtitle.Paragraphs)
            {
                if (p.StartTime.TotalMilliseconds > videoPositionInMilliseconds)
                {
                    break;
                }

                index++;
            }

            // create and insert
            var newParagraph = new Paragraph(string.Empty, videoPositionInMilliseconds, videoPositionInMilliseconds + Configuration.Settings.General.NewEmptyDefaultMs);
            if (this.GetCurrentSubtitleFormat().IsFrameBased)
            {
                newParagraph.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                newParagraph.CalculateTimeCodesFromFrameNumbers(this.CurrentFrameRate);
            }

            if (this._networkSession != null)
            {
                this._networkSession.TimerStop();
                this.NetworkGetSendUpdates(new List<int>(), index, newParagraph);
            }
            else
            {
                this._subtitle.Paragraphs.Insert(index, newParagraph);

                // check if original is available - and insert new paragraph in the original too
                if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && this._subtitleAlternate != null && this._subtitleAlternate.Paragraphs.Count > 0)
                {
                    this._subtitleAlternate.InsertParagraphInCorrectTimeOrder(new Paragraph(newParagraph));
                    this._subtitleAlternate.Renumber();
                }

                this._subtitleListViewIndex = -1;
                this._subtitle.Renumber();
                this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
            }

            this.SubtitleListview1.SelectIndexAndEnsureVisible(index);
            return newParagraph;
        }

        /// <summary>
        /// The timer auto duration_ tick.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void timerAutoDuration_Tick(object sender, EventArgs e)
        {
            this.labelAutoDuration.Visible = !this.labelAutoDuration.Visible;
            double duration = Utilities.GetOptimalDisplayMilliseconds(this.textBoxListViewText.Text);
            this.SetDurationInSeconds(duration / TimeCode.BaseUnit);

            // update _subtitle + listview
            if (this.SubtitleListview1.SelectedItems.Count > 0)
            {
                try
                {
                    int firstSelectedIndex = this.SubtitleListview1.SelectedItems[0].Index;
                    var currentParagraph = this._subtitle.Paragraphs[firstSelectedIndex];
                    currentParagraph.EndTime.TotalMilliseconds = currentParagraph.StartTime.TotalMilliseconds + duration;
                    this.SubtitleListview1.SetDuration(firstSelectedIndex, currentParagraph);
                }
                catch
                {
                }
            }
        }

        /// <summary>
        /// The button before text_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void buttonBeforeText_Click(object sender, EventArgs e)
        {
            if (this.SubtitleListview1.SelectedItems.Count > 0)
            {
                int index = this.SubtitleListview1.SelectedItems[0].Index;

                this.mediaPlayer.Pause();
                double pos = this._subtitle.Paragraphs[index].StartTime.TotalSeconds;
                if (pos > 1)
                {
                    this.mediaPlayer.CurrentPosition = this._subtitle.Paragraphs[index].StartTime.TotalSeconds - 0.5;
                }
                else
                {
                    this.mediaPlayer.CurrentPosition = this._subtitle.Paragraphs[index].StartTime.TotalSeconds;
                }

                this.mediaPlayer.Play();
            }
        }

        /// <summary>
        /// The goto sub position and pause.
        /// </summary>
        private void GotoSubPositionAndPause()
        {
            this.GotoSubPositionAndPause(0);
        }

        /// <summary>
        /// The goto sub position and pause.
        /// </summary>
        /// <param name="adjustSeconds">
        /// The adjust seconds.
        /// </param>
        private void GotoSubPositionAndPause(double adjustSeconds)
        {
            if (this.SubtitleListview1.SelectedItems.Count > 0)
            {
                int index = this.SubtitleListview1.SelectedItems[0].Index;
                if (index == -1 || index >= this._subtitle.Paragraphs.Count)
                {
                    return;
                }

                var p = this._subtitle.Paragraphs[index];
                this.mediaPlayer.Pause();
                if (p.StartTime.IsMaxTime)
                {
                    return;
                }

                double newPos = p.StartTime.TotalSeconds + adjustSeconds;
                if (newPos < 0)
                {
                    newPos = 0;
                }

                this.mediaPlayer.CurrentPosition = newPos;
                this.ShowSubtitle();

                double startPos = this.mediaPlayer.CurrentPosition - 1;
                if (startPos < 0)
                {
                    startPos = 0;
                }

                this.SetWaveformPosition(startPos, this.mediaPlayer.CurrentPosition, index);
            }
        }

        /// <summary>
        /// The button goto sub_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void buttonGotoSub_Click(object sender, EventArgs e)
        {
            this.GotoSubPositionAndPause();
        }

        /// <summary>
        /// The button open video_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void buttonOpenVideo_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(this.openFileDialog1.InitialDirectory) && !string.IsNullOrEmpty(this._fileName))
            {
                this.openFileDialog1.InitialDirectory = Path.GetDirectoryName(this._fileName);
            }

            this.openFileDialog1.Title = this._languageGeneral.OpenVideoFileTitle;
            this.openFileDialog1.FileName = string.Empty;
            this.openFileDialog1.Filter = Utilities.GetVideoFileFilter(true);

            this.openFileDialog1.FileName = string.Empty;
            if (this.openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                this.mediaPlayer.Offset = 0;
                if (this.audioVisualizer != null)
                {
                    this.audioVisualizer.Offset = 0;
                }

                if (this.audioVisualizer.WavePeaks != null)
                {
                    this.audioVisualizer.WavePeaks = null;
                    this.audioVisualizer.ResetSpectrogram();
                    this.audioVisualizer.Invalidate();
                }

                this.openFileDialog1.InitialDirectory = Path.GetDirectoryName(this.openFileDialog1.FileName);
                if (!this.panelVideoPlayer.Visible)
                {
                    this.toolStripButtonToggleVideo_Click(null, null);
                }

                this.OpenVideo(this.openFileDialog1.FileName);
            }
        }

        /// <summary>
        /// The tool strip button toggle video_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripButtonToggleVideo_Click(object sender, EventArgs e)
        {
            this.toolStripButtonToggleVideo.Checked = !this.toolStripButtonToggleVideo.Checked;
            this.panelVideoPlayer.Visible = this.toolStripButtonToggleVideo.Checked;
            this.mediaPlayer.BringToFront();
            if (!this.toolStripButtonToggleVideo.Checked && !this.toolStripButtonToggleWaveform.Checked)
            {
                if (this._isVideoControlsUndocked)
                {
                    this.ShowHideUndockedVideoControls();
                }
                else
                {
                    this.HideVideoPlayer();
                }
            }
            else
            {
                this.ShowVideoPlayer();
            }

            Configuration.Settings.General.ShowVideoPlayer = this.toolStripButtonToggleVideo.Checked;
            if (!this._loading)
            {
                this.Refresh();
            }
        }

        /// <summary>
        /// The tool strip button toggle waveform_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripButtonToggleWaveform_Click(object sender, EventArgs e)
        {
            this.toolStripButtonToggleWaveform.Checked = !this.toolStripButtonToggleWaveform.Checked;
            this.audioVisualizer.Visible = this.toolStripButtonToggleWaveform.Checked;
            this.trackBarWaveformPosition.Visible = this.toolStripButtonToggleWaveform.Checked;
            this.panelWaveformControls.Visible = this.toolStripButtonToggleWaveform.Checked;
            if (!this.toolStripButtonToggleWaveform.Checked && !this.toolStripButtonToggleVideo.Checked)
            {
                if (this._isVideoControlsUndocked)
                {
                    this.ShowHideUndockedVideoControls();
                }
                else
                {
                    this.HideVideoPlayer();
                }
            }
            else
            {
                this.ShowVideoPlayer();
            }

            Configuration.Settings.General.ShowAudioVisualizer = this.toolStripButtonToggleWaveform.Checked;
            this.Refresh();
        }

        /// <summary>
        /// The show earlier or later.
        /// </summary>
        /// <param name="adjustMilliseconds">
        /// The adjust milliseconds.
        /// </param>
        /// <param name="selection">
        /// The selection.
        /// </param>
        public void ShowEarlierOrLater(double adjustMilliseconds, SelectionChoice selection)
        {
            var tc = new TimeCode(adjustMilliseconds);
            this.MakeHistoryForUndo(this._language.BeforeShowSelectedLinesEarlierLater + ": " + tc);
            if (adjustMilliseconds < 0)
            {
                if (selection == SelectionChoice.AllLines)
                {
                    this.ShowStatus(string.Format(this._language.ShowAllLinesXSecondsLinesEarlier, adjustMilliseconds / -TimeCode.BaseUnit));
                }
                else if (selection == SelectionChoice.SelectionOnly)
                {
                    this.ShowStatus(string.Format(this._language.ShowSelectedLinesXSecondsLinesEarlier, adjustMilliseconds / -TimeCode.BaseUnit));
                }
                else if (selection == SelectionChoice.SelectionAndForward)
                {
                    this.ShowStatus(string.Format(this._language.ShowSelectionAndForwardXSecondsLinesEarlier, adjustMilliseconds / -TimeCode.BaseUnit));
                }
            }
            else
            {
                if (selection == SelectionChoice.AllLines)
                {
                    this.ShowStatus(string.Format(this._language.ShowAllLinesXSecondsLinesLater, adjustMilliseconds / TimeCode.BaseUnit));
                }
                else if (selection == SelectionChoice.SelectionOnly)
                {
                    this.ShowStatus(string.Format(this._language.ShowSelectedLinesXSecondsLinesLater, adjustMilliseconds / TimeCode.BaseUnit));
                }
                else if (selection == SelectionChoice.SelectionAndForward)
                {
                    this.ShowStatus(string.Format(this._language.ShowSelectionAndForwardXSecondsLinesLater, adjustMilliseconds / TimeCode.BaseUnit));
                }
            }

            double frameRate = this.CurrentFrameRate;
            this.SubtitleListview1.BeginUpdate();

            int startFrom = 0;
            if (selection == SelectionChoice.SelectionAndForward)
            {
                if (this.SubtitleListview1.SelectedItems.Count > 0)
                {
                    startFrom = this.SubtitleListview1.SelectedItems[0].Index;
                }
                else
                {
                    startFrom = this._subtitle.Paragraphs.Count;
                }
            }

            for (int i = startFrom; i < this._subtitle.Paragraphs.Count; i++)
            {
                switch (selection)
                {
                    case SelectionChoice.SelectionOnly:
                        if (this.SubtitleListview1.Items[i].Selected)
                        {
                            this.ShowEarlierOrLaterParagraph(adjustMilliseconds, i);
                        }

                        break;
                    case SelectionChoice.AllLines:
                    case SelectionChoice.SelectionAndForward:
                        this.ShowEarlierOrLaterParagraph(adjustMilliseconds, i);
                        break;
                }
            }

            this.SubtitleListview1.EndUpdate();
            if (this._subtitle.WasLoadedWithFrameNumbers)
            {
                this._subtitle.CalculateFrameNumbersFromTimeCodesNoCheck(frameRate);
            }

            this.RefreshSelectedParagraph();
            this.UpdateSourceView();
            this.UpdateListSyntaxColoring();
        }

        /// <summary>
        /// The show earlier or later paragraph.
        /// </summary>
        /// <param name="adjustMilliseconds">
        /// The adjust milliseconds.
        /// </param>
        /// <param name="i">
        /// The i.
        /// </param>
        private void ShowEarlierOrLaterParagraph(double adjustMilliseconds, int i)
        {
            var p = this._subtitle.GetParagraphOrDefault(i);
            if (p != null && !p.StartTime.IsMaxTime)
            {
                if (this._subtitleAlternate != null)
                {
                    var original = Utilities.GetOriginalParagraph(i, p, this._subtitleAlternate.Paragraphs);
                    if (original != null)
                    {
                        original.StartTime.TotalMilliseconds += adjustMilliseconds;
                        original.EndTime.TotalMilliseconds += adjustMilliseconds;
                    }
                }

                p.StartTime.TotalMilliseconds += adjustMilliseconds;
                p.EndTime.TotalMilliseconds += adjustMilliseconds;
                this.SubtitleListview1.SetStartTime(i, p);
            }
        }

        /// <summary>
        /// The update source view.
        /// </summary>
        private void UpdateSourceView()
        {
            if (this.tabControlSubtitle.SelectedIndex == TabControlSourceView)
            {
                this.ShowSource();
            }
        }

        /// <summary>
        /// The tool strip menu item adjust all times_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemAdjustAllTimes_Click(object sender, EventArgs e)
        {
            if (this.SubtitleListview1.SelectedItems.Count > 1)
            {
                this.ShowSelectedLinesEarlierlaterToolStripMenuItemClick(null, null);
                return;
            }

            if (!this.IsSubtitleLoaded)
            {
                this.DisplaySubtitleNotLoadedMessage();
                return;
            }

            this.mediaPlayer.Pause();

            if (this._showEarlierOrLater != null && !this._showEarlierOrLater.IsDisposed)
            {
                this._showEarlierOrLater.WindowState = FormWindowState.Normal;
                this._showEarlierOrLater.Focus();
                return;
            }

            this._showEarlierOrLater = new ShowEarlierLater();
            if (!this._showEarlierOrLater.IsPositionAndSizeSaved)
            {
                this._showEarlierOrLater.Top = this.Top + 100;
                this._showEarlierOrLater.Left = this.Left + this.Width / 2 - this._showEarlierOrLater.Width / 3;
            }

            this.SaveSubtitleListviewIndices();
            this._showEarlierOrLater.Initialize(this.ShowEarlierOrLater, false);
            this._showEarlierOrLater.Show(this);
        }

        /// <summary>
        /// The timer 1_ tick.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void timer1_Tick(object sender, EventArgs e)
        {
            if (this.mediaPlayer.VideoPlayer != null)
            {
                if (!this.mediaPlayer.IsPaused)
                {
                    this.timeUpDownVideoPosition.Enabled = false;
                    this.timeUpDownVideoPositionAdjust.Enabled = false;

                    if (this._endSeconds >= 0 && this.mediaPlayer.CurrentPosition > this._endSeconds && !this.AutoRepeatContinueOn)
                    {
                        this.mediaPlayer.Pause();
                        this.mediaPlayer.CurrentPosition = this._endSeconds + EndDelay;
                        this._endSeconds = -1;
                    }

                    if (this.AutoRepeatContinueOn)
                    {
                        if (this._endSeconds >= 0 && this.mediaPlayer.CurrentPosition > this._endSeconds && this.checkBoxAutoRepeatOn.Checked)
                        {
                            this.mediaPlayer.Pause();
                            this._endSeconds = -1;

                            if (this.checkBoxAutoRepeatOn.Checked && this._repeatCount > 0)
                            {
                                if (this._repeatCount == 1)
                                {
                                    this.labelStatus.Text = this._language.VideoControls.RepeatingLastTime;
                                }
                                else
                                {
                                    this.labelStatus.Text = string.Format(this._language.VideoControls.RepeatingXTimesLeft, this._repeatCount);
                                }

                                this._repeatCount--;
                                if (this._subtitleListViewIndex >= 0 && this._subtitleListViewIndex < this._subtitle.Paragraphs.Count)
                                {
                                    this.PlayPart(this._subtitle.Paragraphs[this._subtitleListViewIndex]);
                                }
                            }
                            else if (this.checkBoxAutoContinue.Checked)
                            {
                                this._autoContinueDelayCount = int.Parse(this.comboBoxAutoContinue.Text);
                                if (this._repeatCount == 1)
                                {
                                    this.labelStatus.Text = this._language.VideoControls.AutoContinueInOneSecond;
                                }
                                else
                                {
                                    this.labelStatus.Text = string.Format(this._language.VideoControls.AutoContinueInXSeconds, this._autoContinueDelayCount);
                                }

                                this.timerAutoContinue.Start();
                            }
                        }
                    }
                }
                else
                {
                    this.timeUpDownVideoPosition.Enabled = true;
                    this.timeUpDownVideoPositionAdjust.Enabled = true;
                }

                int index = this.ShowSubtitle();

                double pos = this.mediaPlayer.CurrentPosition * TimeCode.BaseUnit;
                if (!this.timeUpDownVideoPosition.MaskedTextBox.Focused && this.timeUpDownVideoPosition.TimeCode.TotalMilliseconds != pos)
                {
                    this.timeUpDownVideoPosition.TimeCode = new TimeCode(pos);
                }

                if (!this.timeUpDownVideoPositionAdjust.MaskedTextBox.Focused && this.timeUpDownVideoPositionAdjust.TimeCode.TotalMilliseconds != pos)
                {
                    this.timeUpDownVideoPositionAdjust.TimeCode = new TimeCode(pos);
                }

                this.mediaPlayer.RefreshProgressBar();

                this.trackBarWaveformPosition.ValueChanged -= this.trackBarWaveformPosition_ValueChanged;
                int value = (int)this.mediaPlayer.CurrentPosition;
                if (value > this.trackBarWaveformPosition.Maximum)
                {
                    value = this.trackBarWaveformPosition.Maximum;
                }

                if (value < this.trackBarWaveformPosition.Minimum)
                {
                    value = this.trackBarWaveformPosition.Minimum;
                }

                this.trackBarWaveformPosition.Value = value;
                this.trackBarWaveformPosition.ValueChanged += this.trackBarWaveformPosition_ValueChanged;
            }
        }

        /// <summary>
        /// The stop auto duration.
        /// </summary>
        private void StopAutoDuration()
        {
            this.timerAutoDuration.Stop();
            this.labelAutoDuration.Visible = false;
        }

        /// <summary>
        /// The text box list view text_ leave.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void textBoxListViewText_Leave(object sender, EventArgs e)
        {
            this.StopAutoDuration();
        }

        /// <summary>
        /// The timer auto continue_ tick.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void timerAutoContinue_Tick(object sender, EventArgs e)
        {
            this._autoContinueDelayCount--;

            if (this._autoContinueDelayCount == 0)
            {
                this.timerAutoContinue.Stop();

                if (this.timerStillTyping.Enabled)
                {
                    this.labelStatus.Text = this._language.VideoControls.StillTypingAutoContinueStopped;
                }
                else
                {
                    this.labelStatus.Text = string.Empty;
                    this.Next();
                }
            }
            else
            {
                if (this._repeatCount == 1)
                {
                    this.labelStatus.Text = this._language.VideoControls.AutoContinueInOneSecond;
                }
                else
                {
                    this.labelStatus.Text = string.Format(this._language.VideoControls.AutoContinueInXSeconds, this._autoContinueDelayCount);
                }
            }
        }

        /// <summary>
        /// The timer still typing_ tick.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void timerStillTyping_Tick(object sender, EventArgs e)
        {
            this.timerStillTyping.Stop();
        }

        /// <summary>
        /// The text box list view text_ mouse move.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void textBoxListViewText_MouseMove(object sender, MouseEventArgs e)
        {
            if (this.AutoRepeatContinueOn && !this.textBoxSearchWord.Focused && this.textBoxListViewText.Focused)
            {
                string selectedText = this.textBoxListViewText.SelectedText;
                if (!string.IsNullOrEmpty(selectedText))
                {
                    selectedText = selectedText.Trim();
                    selectedText = selectedText.TrimEnd('.', ',', '!', '?');
                    selectedText = selectedText.Trim();
                    if (!string.IsNullOrEmpty(selectedText) && selectedText != this.textBoxSearchWord.Text)
                    {
                        this.textBoxSearchWord.Text = HtmlUtil.RemoveHtmlTags(selectedText);
                    }
                }
            }
        }

        /// <summary>
        /// The text box list view text_ key up.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void textBoxListViewText_KeyUp(object sender, KeyEventArgs e)
        {
            this.textBoxListViewText_MouseMove(sender, null);
            this.textBoxListViewText.ClearUndo();
            this.UpdatePositionAndTotalLength(this.labelTextLineTotal, this.textBoxListViewText);
        }

        /// <summary>
        /// The button google it_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void buttonGoogleIt_Click(object sender, EventArgs e)
        {
            System.Diagnostics.Process.Start("https://www.google.com/search?q=" + Utilities.UrlEncode(this.textBoxSearchWord.Text));
        }

        /// <summary>
        /// The button google translate it_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void buttonGoogleTranslateIt_Click(object sender, EventArgs e)
        {
            string languageId = Utilities.AutoDetectGoogleLanguage(this._subtitle);
            System.Diagnostics.Process.Start("https://translate.google.com/#auto|" + languageId + "|" + Utilities.UrlEncode(this.textBoxSearchWord.Text));
        }

        /// <summary>
        /// The button play current click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ButtonPlayCurrentClick(object sender, EventArgs e)
        {
            this.PlayCurrent();
        }

        /// <summary>
        /// The button play next_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void buttonPlayNext_Click(object sender, EventArgs e)
        {
            this.Next();
        }

        /// <summary>
        /// The button play previous_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void buttonPlayPrevious_Click(object sender, EventArgs e)
        {
            this.PlayPrevious();
        }

        /// <summary>
        /// The button stop_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void buttonStop_Click(object sender, EventArgs e)
        {
            this._endSeconds = -1;
            this.timerAutoContinue.Stop();
            this.mediaPlayer.Pause();
            this.labelStatus.Text = string.Empty;
        }

        /// <summary>
        /// The file tool strip menu item_ drop down opening.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void fileToolStripMenuItem_DropDownOpening(object sender, EventArgs e)
        {
            this.toolStripMenuItemOpenContainingFolder.Visible = !string.IsNullOrEmpty(this._fileName) && File.Exists(this._fileName);
            bool subtitleLoaded = this.IsSubtitleLoaded;
            this.toolStripMenuItemStatistics.Visible = subtitleLoaded;
            this.toolStripSeparator22.Visible = subtitleLoaded;
            this.toolStripMenuItemExport.Visible = subtitleLoaded;
            this.openOriginalToolStripMenuItem.Visible = subtitleLoaded;
            this.toolStripMenuItemOpenKeepVideo.Visible = this._videoFileName != null;
            if (subtitleLoaded && Configuration.Settings.General.AllowEditOfOriginalSubtitle && this._subtitleAlternate != null && this._subtitleAlternate.Paragraphs.Count > 0)
            {
                this.saveOriginalToolStripMenuItem.Visible = true;
                this.saveOriginalAstoolStripMenuItem.Visible = true;
                this.removeOriginalToolStripMenuItem.Visible = true;
            }
            else
            {
                this.saveOriginalToolStripMenuItem.Visible = false;
                this.saveOriginalAstoolStripMenuItem.Visible = false;
                if (subtitleLoaded && this.SubtitleListview1.IsAlternateTextColumnVisible && this._subtitleAlternate != null && this._subtitleAlternate.Paragraphs.Count > 0)
                {
                    this.removeOriginalToolStripMenuItem.Visible = true;
                }
                else
                {
                    this.removeOriginalToolStripMenuItem.Visible = false;
                }
            }

            var format = this.GetCurrentSubtitleFormat();
            if (format.GetType() == typeof(AdvancedSubStationAlpha))
            {
                this.toolStripMenuItemSubStationAlpha.Visible = true;
                this.toolStripMenuItemSubStationAlpha.Text = this._language.Menu.File.AdvancedSubStationAlphaProperties;
            }
            else if (format.GetType() == typeof(SubStationAlpha))
            {
                this.toolStripMenuItemSubStationAlpha.Visible = true;
                this.toolStripMenuItemSubStationAlpha.Text = this._language.Menu.File.SubStationAlphaProperties;
            }
            else
            {
                this.toolStripMenuItemSubStationAlpha.Visible = false;
            }

            if (format.GetType() == typeof(Ebu))
            {
                this.toolStripMenuItemEbuProperties.Text = this._language.Menu.File.EbuProperties;
                this.toolStripMenuItemEbuProperties.Visible = !string.IsNullOrEmpty(this._language.Menu.File.EbuProperties);
            }
            else
            {
                this.toolStripMenuItemEbuProperties.Visible = false;
            }

            if (format.GetType() == typeof(DCSubtitle) || format.GetType() == typeof(DCinemaSmpte2010) || format.GetType() == typeof(DCinemaSmpte2007))
            {
                this.toolStripMenuItemDCinemaProperties.Visible = true;
            }
            else
            {
                this.toolStripMenuItemDCinemaProperties.Visible = false;
            }

            if (format.GetType() == typeof(TimedText10) || format.GetType() == typeof(ItunesTimedText))
            {
                this.toolStripMenuItemTTProperties.Visible = true;
            }
            else
            {
                this.toolStripMenuItemTTProperties.Visible = false;
            }

            this.toolStripMenuItemNuendoProperties.Visible = format.Name == "Nuendo";
            this.toolStripMenuItemFcpProperties.Visible = format.GetType() == typeof(FinalCutProXml);

            this.toolStripSeparator20.Visible = subtitleLoaded;
        }

        /// <summary>
        /// The tool strip menu item open containing folder_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemOpenContainingFolder_Click(object sender, EventArgs e)
        {
            string folderName = Path.GetDirectoryName(this._fileName);
            if (Utilities.IsRunningOnMono())
            {
                System.Diagnostics.Process.Start(folderName);
            }
            else
            {
                string argument = @"/select, " + this._fileName;
                System.Diagnostics.Process.Start("explorer.exe", argument);
            }
        }

        /// <summary>
        /// The tab control 1_ selected index changed.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void tabControl1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (this.tabControlButtons.SelectedIndex == 0)
            {
                this.tabControlButtons.Width = this.groupBoxTranslateSearch.Left + this.groupBoxTranslateSearch.Width + 10;
                Configuration.Settings.VideoControls.LastActiveTab = "Translate";
            }
            else if (this.tabControlButtons.SelectedIndex == 1)
            {
                this.tabControlButtons.Width = this.buttonInsertNewText.Left + this.buttonInsertNewText.Width + 35;
                Configuration.Settings.VideoControls.LastActiveTab = "Create";
            }
            else if (this.tabControlButtons.SelectedIndex == 2)
            {
                this.tabControlButtons.Width = this.buttonInsertNewText.Left + this.buttonInsertNewText.Width + 35;
                Configuration.Settings.VideoControls.LastActiveTab = "Adjust";
            }

            if (!this._isVideoControlsUndocked)
            {
                if (this.toolStripButtonToggleWaveform.Checked)
                {
                    this.audioVisualizer.Left = this.tabControlButtons.Left + this.tabControlButtons.Width + 5;
                }

                if (!this.toolStripButtonToggleWaveform.Checked && this.toolStripButtonToggleVideo.Checked)
                {
                    this.panelVideoPlayer.Left = this.tabControlButtons.Left + this.tabControlButtons.Width + 5;
                    this.panelVideoPlayer.Width = this.groupBoxVideo.Width - (this.panelVideoPlayer.Left + 10);
                }

                this.audioVisualizer.Width = this.groupBoxVideo.Width - (this.audioVisualizer.Left + 10);
                this.panelWaveformControls.Left = this.audioVisualizer.Left;
                this.trackBarWaveformPosition.Left = this.panelWaveformControls.Left + this.panelWaveformControls.Width + 5;
                this.trackBarWaveformPosition.Width = this.groupBoxVideo.Width - (this.trackBarWaveformPosition.Left + 10);
                this.Main_Resize(null, null);
                this.checkBoxSyncListViewWithVideoWhilePlaying.Left = this.tabControlButtons.Left + this.tabControlButtons.Width + 5;
                if (!this._loading)
                {
                    this.Refresh();
                }
            }
            else if (this._videoControlsUndocked != null && !this._videoControlsUndocked.IsDisposed)
            {
                this._videoControlsUndocked.Width = this.tabControlButtons.Width + 20;
                this._videoControlsUndocked.Height = this.tabControlButtons.Height + 65;
            }
        }

        /// <summary>
        /// The button sec back 1_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void buttonSecBack1_Click(object sender, EventArgs e)
        {
            this.GoBackSeconds((double)this.numericUpDownSec1.Value);
        }

        /// <summary>
        /// The button forward 1_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void buttonForward1_Click(object sender, EventArgs e)
        {
            this.GoBackSeconds(-(double)this.numericUpDownSec1.Value);
        }

        /// <summary>
        /// The button set start and offset rest click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ButtonSetStartAndOffsetRestClick(object sender, EventArgs e)
        {
            if (this.SubtitleListview1.SelectedItems.Count == 1)
            {
                bool oldSync = this.checkBoxSyncListViewWithVideoWhilePlaying.Checked;
                this.checkBoxSyncListViewWithVideoWhilePlaying.Checked = false;

                this.timeUpDownStartTime.MaskedTextBox.TextChanged -= this.MaskedTextBoxTextChanged;
                int index = this.SubtitleListview1.SelectedItems[0].Index;
                double videoPosition = this.mediaPlayer.CurrentPosition;
                if (!this.mediaPlayer.IsPaused)
                {
                    videoPosition -= Configuration.Settings.General.SetStartEndHumanDelay / TimeCode.BaseUnit;
                }

                var tc = TimeCode.FromSeconds(videoPosition);
                this.timeUpDownStartTime.TimeCode = tc;

                this.MakeHistoryForUndo(this._language.BeforeSetStartTimeAndOffsetTheRest + @"  " + this._subtitle.Paragraphs[index].Number + @" - " + tc);

                double offset = this._subtitle.Paragraphs[index].StartTime.TotalMilliseconds - tc.TotalMilliseconds;

                if (this._subtitle.Paragraphs[index].StartTime.IsMaxTime)
                {
                    this._subtitle.Paragraphs[index].StartTime.TotalSeconds = videoPosition;
                    this._subtitle.Paragraphs[index].EndTime.TotalMilliseconds = this._subtitle.Paragraphs[index].StartTime.TotalMilliseconds + Utilities.GetOptimalDisplayMilliseconds(this._subtitle.Paragraphs[index].Text);
                    this.SubtitleListview1.SetStartTime(index, this._subtitle.Paragraphs[index]);
                    this.checkBoxSyncListViewWithVideoWhilePlaying.Checked = oldSync;
                    this.timeUpDownStartTime.MaskedTextBox.TextChanged += this.MaskedTextBoxTextChanged;
                    return;
                }

                this._subtitle.Paragraphs[index].StartTime = new TimeCode(this._subtitle.Paragraphs[index].StartTime.TotalMilliseconds - offset);
                this._subtitle.Paragraphs[index].EndTime = new TimeCode(this._subtitle.Paragraphs[index].EndTime.TotalMilliseconds - offset);
                this.SubtitleListview1.SetStartTime(index, this._subtitle.Paragraphs[index]);

                for (int i = index + 1; i < this.SubtitleListview1.Items.Count; i++)
                {
                    if (!this._subtitle.Paragraphs[i].StartTime.IsMaxTime)
                    {
                        this._subtitle.Paragraphs[i].StartTime = new TimeCode(this._subtitle.Paragraphs[i].StartTime.TotalMilliseconds - offset);
                        this._subtitle.Paragraphs[i].EndTime = new TimeCode(this._subtitle.Paragraphs[i].EndTime.TotalMilliseconds - offset);
                        this.SubtitleListview1.SetStartTime(i, this._subtitle.Paragraphs[i]);
                    }
                }

                if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && this._subtitleAlternate != null && this._subtitleAlternate.Paragraphs.Count > 0)
                {
                    var original = Utilities.GetOriginalParagraph(index, this._subtitle.Paragraphs[index], this._subtitleAlternate.Paragraphs);
                    if (original != null)
                    {
                        index = this._subtitleAlternate.GetIndex(original);
                        for (int i = index; i < this._subtitleAlternate.Paragraphs.Count; i++)
                        {
                            if (!this._subtitleAlternate.Paragraphs[i].StartTime.IsMaxTime)
                            {
                                this._subtitleAlternate.Paragraphs[i].StartTime = new TimeCode(this._subtitleAlternate.Paragraphs[i].StartTime.TotalMilliseconds - offset);
                                this._subtitleAlternate.Paragraphs[i].EndTime = new TimeCode(this._subtitleAlternate.Paragraphs[i].EndTime.TotalMilliseconds - offset);
                            }
                        }
                    }
                }

                if (this.IsFramesRelevant && this.CurrentFrameRate > 0)
                {
                    this._subtitle.CalculateFrameNumbersFromTimeCodesNoCheck(this.CurrentFrameRate);
                    if (this.tabControlSubtitle.SelectedIndex == TabControlSourceView)
                    {
                        this.ShowSource();
                    }
                }

                this.checkBoxSyncListViewWithVideoWhilePlaying.Checked = oldSync;
                this.timeUpDownStartTime.MaskedTextBox.TextChanged += this.MaskedTextBoxTextChanged;
            }
        }

        /// <summary>
        /// The button set end and go to next click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ButtonSetEndAndGoToNextClick(object sender, EventArgs e)
        {
            if (this.SubtitleListview1.SelectedItems.Count == 1)
            {
                int index = this.SubtitleListview1.SelectedItems[0].Index;
                double videoPosition = this.mediaPlayer.CurrentPosition;
                if (!this.mediaPlayer.IsPaused)
                {
                    videoPosition -= Configuration.Settings.General.SetStartEndHumanDelay / TimeCode.BaseUnit;
                }

                string oldDuration = this._subtitle.Paragraphs[index].Duration.ToString();
                var temp = new Paragraph(this._subtitle.Paragraphs[index]);
                temp.EndTime.TotalMilliseconds = TimeCode.FromSeconds(videoPosition).TotalMilliseconds;
                this.MakeHistoryForUndo(string.Format(this._language.DisplayTimeAdjustedX, "#" + this._subtitle.Paragraphs[index].Number + ": " + oldDuration + " -> " + temp.Duration));
                this._makeHistoryPaused = true;

                if (this._subtitle.Paragraphs[index].StartTime.IsMaxTime)
                {
                    this.timeUpDownStartTime.MaskedTextBox.TextChanged -= this.MaskedTextBoxTextChanged;
                    this._subtitle.Paragraphs[index].EndTime.TotalSeconds = videoPosition;
                    this._subtitle.Paragraphs[index].StartTime.TotalMilliseconds = this._subtitle.Paragraphs[index].EndTime.TotalMilliseconds - Utilities.GetOptimalDisplayMilliseconds(this._subtitle.Paragraphs[index].Text);
                    if (this._subtitle.Paragraphs[index].StartTime.TotalMilliseconds < 0)
                    {
                        this._subtitle.Paragraphs[index].StartTime.TotalMilliseconds = 0;
                    }

                    this.timeUpDownStartTime.TimeCode = this._subtitle.Paragraphs[index].StartTime;
                    this.SubtitleListview1.SetStartTime(index, this._subtitle.Paragraphs[index]);
                    this.timeUpDownStartTime.MaskedTextBox.TextChanged += this.MaskedTextBoxTextChanged;
                }
                else
                {
                    this._subtitle.Paragraphs[index].EndTime = TimeCode.FromSeconds(videoPosition);
                }

                this.SubtitleListview1.SetDuration(index, this._subtitle.Paragraphs[index]);
                this.SetDurationInSeconds(this._subtitle.Paragraphs[index].Duration.TotalSeconds);

                if (index + 1 < this._subtitle.Paragraphs.Count)
                {
                    this.SubtitleListview1.Items[index].Selected = false;
                    this.SubtitleListview1.Items[index + 1].Selected = true;
                    if (!this._subtitle.Paragraphs[index + 1].StartTime.IsMaxTime)
                    {
                        this._subtitle.Paragraphs[index + 1].StartTime = TimeCode.FromSeconds(videoPosition + 0.001);
                    }

                    if (this.IsFramesRelevant && this.CurrentFrameRate > 0)
                    {
                        this._subtitle.CalculateFrameNumbersFromTimeCodesNoCheck(this.CurrentFrameRate);
                        if (this.tabControlSubtitle.SelectedIndex == TabControlSourceView)
                        {
                            this.ShowSource();
                        }
                    }

                    if (!this._subtitle.Paragraphs[index + 1].StartTime.IsMaxTime)
                    {
                        this.SubtitleListview1.SetStartTime(index + 1, this._subtitle.Paragraphs[index + 1]);
                    }

                    this.SubtitleListview1.SelectIndexAndEnsureVisible(index + 1, true);
                }

                this._makeHistoryPaused = false;
            }
        }

        /// <summary>
        /// The button adjust sec back click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ButtonAdjustSecBackClick(object sender, EventArgs e)
        {
            this.GoBackSeconds((double)this.numericUpDownSecAdjust1.Value);
        }

        /// <summary>
        /// The button adjust sec forward click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ButtonAdjustSecForwardClick(object sender, EventArgs e)
        {
            this.GoBackSeconds(-(double)this.numericUpDownSecAdjust1.Value);
        }

        /// <summary>
        /// The main_ shown.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void Main_Shown(object sender, EventArgs e)
        {
            this.toolStripButtonToggleVideo.Checked = !Configuration.Settings.General.ShowVideoPlayer;
            this.toolStripButtonToggleVideo_Click(null, null);

            this._timerAutoSave.Tick += this.TimerAutoSaveTick;
            if (Configuration.Settings.General.AutoBackupSeconds > 0)
            {
                this._timerAutoSave.Interval = 1000 * Configuration.Settings.General.AutoBackupSeconds; // take backup every x second if changes were made
                this._timerAutoSave.Start();
            }

            this.ToolStripMenuItemPlayRateNormalClick(null, null);

            SetPositionFromXYString(Configuration.Settings.General.UndockedVideoPosition, "VideoPlayerUndocked");
            SetPositionFromXYString(Configuration.Settings.General.UndockedWaveformPosition, "WaveformUndocked");
            SetPositionFromXYString(Configuration.Settings.General.UndockedVideoControlsPosition, "VideoControlsUndocked");
            if (Configuration.Settings.General.Undocked && Configuration.Settings.General.StartRememberPositionAndSize)
            {
                Configuration.Settings.General.Undocked = false;
                this.UndockVideoControlsToolStripMenuItemClick(null, null);
            }

            this.Main_Resize(null, null);

            this.toolStripButtonLockCenter.Checked = Configuration.Settings.General.WaveformCenter;
            this.audioVisualizer.Locked = this.toolStripButtonLockCenter.Checked;

            this.numericUpDownSec1.Value = (decimal)(Configuration.Settings.General.SmallDelayMilliseconds / TimeCode.BaseUnit);
            this.numericUpDownSec2.Value = (decimal)(Configuration.Settings.General.LargeDelayMilliseconds / TimeCode.BaseUnit);

            this.numericUpDownSecAdjust1.Value = (decimal)(Configuration.Settings.General.SmallDelayMilliseconds / TimeCode.BaseUnit);
            this.numericUpDownSecAdjust2.Value = (decimal)(Configuration.Settings.General.LargeDelayMilliseconds / TimeCode.BaseUnit);

            this.SetShortcuts();

            if (Configuration.Settings.General.StartInSourceView)
            {
                this.textBoxSource.Focus();
            }
            else
            {
                this.SubtitleListview1.Focus();
                int index = this.FirstSelectedIndex;
                if (index > 0 && this.SubtitleListview1.Items.Count > index)
                {
                    this.SubtitleListview1.Focus();
                    this.SubtitleListview1.Items[index].Focused = true;
                }
            }

            this.MainResize();
            this._loading = false;
            this.OpenVideo(this._videoFileName);
            lock (_syncUndo)
            {
                this.timerTextUndo.Start();
                this.timerAlternateTextUndo.Start();
            }

            if (Configuration.IsRunningOnLinux())
            {
                this.numericUpDownDuration.Left = this.timeUpDownStartTime.Left + this.timeUpDownStartTime.Width + 10;
                this.numericUpDownDuration.Width = this.numericUpDownDuration.Width + 10;
                this.numericUpDownSec1.Width = this.numericUpDownSec1.Width + 10;
                this.numericUpDownSec2.Width = this.numericUpDownSec2.Width + 10;
                this.numericUpDownSecAdjust1.Width = this.numericUpDownSecAdjust1.Width + 10;
                this.numericUpDownSecAdjust2.Width = this.numericUpDownSecAdjust2.Width + 10;
                this.labelDuration.Left = this.numericUpDownDuration.Left;
            }

            this._timerDoSyntaxColoring.Interval = 100;
            this._timerDoSyntaxColoring.Tick += this._timerDoSyntaxColoring_Tick;

            var showBeta = Configuration.Settings.General.ShowBetaStuff;
            this.generateDatetimeInfoFromVideoToolStripMenuItem.Visible = showBeta;
            this.toolStripMenuItemExportCaptionInc.Visible = showBeta;
            this.toolStripMenuItemExportUltech130.Visible = showBeta;
            this.toolStripMenuItemInverseSelection.Visible = showBeta;
            this.toolStripMenuItemSpellCheckFromCurrentLine.Visible = showBeta;
            this.toolStripMenuItemImportOcrHardSub.Visible = showBeta;
            this.toolStripMenuItemMeasurementConverter.Visible = showBeta;
            this.toolStripMenuItemOpenDvd.Visible = showBeta;

            // toolStripMenuItemExportBdTextSt.Visible = showBeta;
            if (Configuration.Settings.General.StartRememberPositionAndSize && Configuration.Settings.General.SplitContainerMainSplitterDistance > 0 && Configuration.Settings.General.SplitContainer1SplitterDistance > 0 && Configuration.Settings.General.SplitContainerListViewAndTextSplitterDistance > 0)
            {
                this.splitContainerMain.SplitterDistance = Configuration.Settings.General.SplitContainerMainSplitterDistance;
                this.splitContainer1.SplitterDistance = Configuration.Settings.General.SplitContainer1SplitterDistance;
                this.splitContainerListViewAndText.SplitterDistance = Configuration.Settings.General.SplitContainerListViewAndTextSplitterDistance;
            }

            this.mediaPlayer.InitializeVolume(Configuration.Settings.General.VideoPlayerDefaultVolume);
            this.LoadPlugins();
            this.tabControlSubtitle.Invalidate();

            if (string.IsNullOrEmpty(Configuration.Settings.Language.CheckForUpdates.CheckingForUpdates))
            {
                this.checkForUpdatesToolStripMenuItem.Visible = false;
                this.toolStripMenuItemSplitterCheckForUpdates.Visible = false;
            }
            else if (Configuration.Settings.General.CheckForUpdates && Configuration.Settings.General.LastCheckForUpdates < DateTime.Now.AddDays(-5))
            {
                this._checkForUpdatesHelper = new Logic.Forms.CheckForUpdatesHelper();
                this._checkForUpdatesHelper.CheckForUpdates();
                this._timerCheckForUpdates = new Timer();
                this._timerCheckForUpdates.Interval = 7000;
                this._timerCheckForUpdates.Tick += this.TimerCheckForUpdatesTick;
                this._timerCheckForUpdates.Start();
                Configuration.Settings.General.LastCheckForUpdates = DateTime.Now;
            }

            this._dragAndDropTimer.Interval = 50;
            this._dragAndDropTimer.Tick += this.DoSubtitleListview1Drop;
        }

        /// <summary>
        /// The timer check for updates tick.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void TimerCheckForUpdatesTick(object sender, EventArgs e)
        {
            this._timerCheckForUpdates.Stop();
            if (this._checkForUpdatesHelper.IsUpdateAvailable())
            {
                using (var form = new CheckForUpdates(this, this._checkForUpdatesHelper))
                {
                    form.ShowDialog(this);
                }
            }

            this._checkForUpdatesHelper = null;
            this._timerCheckForUpdates = null;
        }

        /// <summary>
        /// The _timer do syntax coloring_ tick.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void _timerDoSyntaxColoring_Tick(object sender, EventArgs e)
        {
            this.UpdateListSyntaxColoring();
            this._timerDoSyntaxColoring.Stop();
        }

        /// <summary>
        /// The set position from xy string.
        /// </summary>
        /// <param name="positionAndSize">
        /// The position and size.
        /// </param>
        /// <param name="name">
        /// The name.
        /// </param>
        private static void SetPositionFromXYString(string positionAndSize, string name)
        {
            var parts = positionAndSize.Split(';');
            if (parts.Length == 4)
            {
                int left, top, width, height;
                if (int.TryParse(parts[0], out left) && int.TryParse(parts[1], out top) && int.TryParse(parts[2], out width) && int.TryParse(parts[3], out height))
                {
                    PositionAndSizeForm.SetPositionAndSize(name, new Rectangle(left, top, width, height));
                }
                else
                {
                    System.Diagnostics.Debug.WriteLine("Could not set position and size for '{0}'.", name);
                }
            }
        }

        /// <summary>
        /// The set shortcuts.
        /// </summary>
        private void SetShortcuts()
        {
            this._mainGeneralGoToFirstSelectedLine = Utilities.GetKeys(Configuration.Settings.Shortcuts.GeneralGoToFirstSelectedLine);
            this._mainGeneralGoToFirstEmptyLine = Utilities.GetKeys(Configuration.Settings.Shortcuts.GeneralGoToNextEmptyLine);
            this._mainGeneralMergeSelectedLines = Utilities.GetKeys(Configuration.Settings.Shortcuts.GeneralMergeSelectedLines);
            this._mainGeneralMergeSelectedLinesOnlyFirstText = Utilities.GetKeys(Configuration.Settings.Shortcuts.GeneralMergeSelectedLinesOnlyFirstText);
            this._mainGeneralToggleTranslationMode = Utilities.GetKeys(Configuration.Settings.Shortcuts.GeneralToggleTranslationMode);
            this._mainGeneralSwitchTranslationAndOriginal = Utilities.GetKeys(Configuration.Settings.Shortcuts.GeneralSwitchOriginalAndTranslation);
            this._mainGeneralMergeTranslationAndOriginal = Utilities.GetKeys(Configuration.Settings.Shortcuts.GeneralMergeOriginalAndTranslation);
            this._mainGeneralGoToNextSubtitle = Utilities.GetKeys(Configuration.Settings.Shortcuts.GeneralGoToNextSubtitle);
            this._mainGeneralGoToPrevSubtitle = Utilities.GetKeys(Configuration.Settings.Shortcuts.GeneralGoToPrevSubtitle);
            this._mainGeneralGoToStartOfCurrentSubtitle = Utilities.GetKeys(Configuration.Settings.Shortcuts.GeneralGoToStartOfCurrentSubtitle);
            this._mainGeneralGoToEndOfCurrentSubtitle = Utilities.GetKeys(Configuration.Settings.Shortcuts.GeneralGoToEndOfCurrentSubtitle);

            this.newToolStripMenuItem.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainFileNew);
            this.openToolStripMenuItem.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainFileOpen);
            this.toolStripMenuItemOpenKeepVideo.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainFileOpenKeepVideo);
            this.saveToolStripMenuItem.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainFileSave);
            this.saveOriginalToolStripMenuItem.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainFileSaveOriginal);
            this.saveOriginalAstoolStripMenuItem.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainFileSaveOriginalAs);
            this.saveAsToolStripMenuItem.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainFileSaveAs);
            this._mainGeneralFileSaveAll = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainFileSaveAll);
            this.eBUSTLToolStripMenuItem.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainFileExportEbu);

            this.toolStripMenuItemUndo.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainEditUndo);
            this.toolStripMenuItemRedo.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainEditRedo);
            this.findToolStripMenuItem.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainEditFind);
            this.findNextToolStripMenuItem.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainEditFindNext);
            this.replaceToolStripMenuItem.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainEditReplace);
            this.multipleReplaceToolStripMenuItem.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainEditMultipleReplace);
            this.gotoLineNumberToolStripMenuItem.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainEditGoToLineNumber);
            this.toolStripMenuItemRightToLeftMode.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainEditRightToLeft);
            this.toolStripMenuItemShowOriginalInPreview.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainEditToggleTranslationOriginalInPreviews);
            this.toolStripMenuItemInverseSelection.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainEditInverseSelection);
            this.toolStripMenuItemModifySelection.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainEditModifySelection);

            this.fixToolStripMenuItem.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainToolsFixCommonErrors);
            this.toolStripMenuItemAutoMergeShortLines.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainToolsMergeShortLines);
            this.toolStripMenuItemAutoSplitLongLines.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainToolsSplitLongLines);
            this.startNumberingFromToolStripMenuItem.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainToolsRenumber);
            this.removeTextForHearImparedToolStripMenuItem.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainToolsRemoveTextForHI);
            this.ChangeCasingToolStripMenuItem.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainToolsChangeCasing);
            this.toolStripMenuItemShowOriginalInPreview.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainEditToggleTranslationOriginalInPreviews);
            this.toolStripMenuItemBatchConvert.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainToolsBatchConvert);

            this.showhideVideoToolStripMenuItem.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainVideoShowHideVideo);
            this._toggleVideoDockUndock = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainVideoToggleVideoControls);
            this._videoPause = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainVideoPause);
            this._videoPlayPauseToggle = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainVideoPlayPauseToggle);
            this._video1FrameLeft = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainVideo1FrameLeft);
            this._video1FrameRight = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainVideo1FrameRight);
            this._video100MsLeft = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainVideo100MsLeft);
            this._video100MsRight = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainVideo100MsRight);
            this._video500MsLeft = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainVideo500MsLeft);
            this._video500MsRight = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainVideo500MsRight);
            this._video1000MsLeft = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainVideo1000MsLeft);
            this._video1000MsRight = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainVideo1000MsRight);
            this._videoPlayFirstSelected = Utilities.GetKeys(Configuration.Settings.Shortcuts.GeneralPlayFirstSelected);
            this._mainVideoFullscreen = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainVideoFullscreen);

            this.spellCheckToolStripMenuItem.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainSpellCheck);
            this.findDoubleWordsToolStripMenuItem.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainSpellCheckFindDoubleWords);
            this.addWordToNamesetcListToolStripMenuItem.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainSpellCheckAddWordToNames);

            this.toolStripMenuItemAdjustAllTimes.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainSynchronizationAdjustTimes);
            this.visualSyncToolStripMenuItem.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainSynchronizationVisualSync);
            this.toolStripMenuItemPointSync.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainSynchronizationPointSync);
            this.toolStripMenuItemChangeFrameRate2.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainSynchronizationChangeFrameRate);
            this.italicToolStripMenuItem.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainListViewItalic);
            this._mainToolsAutoDuration = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainToolsAutoDuration);
            this._mainToolsBeamer = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainToolsBeamer);
            this._mainListViewToggleDashes = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainListViewToggleDashes);
            this.toolStripMenuItemAlignment.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainListViewAlignment);
            this._mainListViewAutoDuration = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainListViewAutoDuration);
            this._mainListViewFocusWaveform = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainListViewFocusWaveform);
            this._mainListViewGoToNextError = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainListViewGoToNextError);
            this._mainEditReverseStartAndEndingForRTL = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainEditReverseStartAndEndingForRTL);
            this._mainListViewCopyText = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainListViewCopyText);
            this.copyOriginalTextToCurrentToolStripMenuItem.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainListViewCopyTextFromOriginalToCurrent);
            this.toolStripMenuItemColumnDeleteText.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainListViewColumnDeleteText);
            this.ShiftTextCellsDownToolStripMenuItem.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainListViewColumnInsertText);
            this.toolStripMenuItemPasteSpecial.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainListViewColumnPaste);
            this.toolStripMenuItemReverseRightToLeftStartEnd.ShortcutKeys = this._mainEditReverseStartAndEndingForRTL;
            this.italicToolStripMenuItem1.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainTextBoxItalic);
            this._mainTextBoxSplitAtCursor = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainTextBoxSplitAtCursor);
            this._mainTextBoxMoveLastWordDown = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainTextBoxMoveLastWordDown);
            this._mainTextBoxMoveFirstWordFromNextUp = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainTextBoxMoveFirstWordFromNextUp);
            this._mainTextBoxSelectionToLower = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainTextBoxSelectionToLower);
            this._mainTextBoxSelectionToUpper = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainTextBoxSelectionToUpper);
            this._mainTextBoxToggleAutoDuration = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainTextBoxToggleAutoDuration);
            this._mainCreateInsertSubAtVideoPos = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainCreateInsertSubAtVideoPos);
            this._mainCreatePlayFromJustBefore = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainCreatePlayFromJustBefore);
            this._mainCreateSetStart = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainCreateSetStart);
            this._mainCreateSetEnd = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainCreateSetEnd);
            this._mainCreateStartDownEndUp = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainCreateStartDownEndUp);
            this._mainCreateSetEndAddNewAndGoToNew = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainCreateSetEndAddNewAndGoToNew);
            this._mainAdjustSetStartAndOffsetTheRest = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainAdjustSetStartAndOffsetTheRest);
            this._mainAdjustSetEndAndOffsetTheRest = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainAdjustSetEndAndOffsetTheRest);
            this._mainAdjustSetEndAndOffsetTheRestAndGoToNext = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainAdjustSetEndAndOffsetTheRestAndGoToNext);
            this._mainAdjustSetEndAndGotoNext = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainAdjustSetEndAndGotoNext);
            this._mainAdjustInsertViaEndAutoStartAndGoToNext = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainAdjustViaEndAutoStartAndGoToNext);
            this._mainAdjustSetStartAutoDurationAndGoToNext = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainAdjustSetStartAutoDurationAndGoToNext);
            this._mainAdjustSetEndNextStartAndGoToNext = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainAdjustSetEndNextStartAndGoToNext);
            this._mainAdjustStartDownEndUpAndGoToNext = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainAdjustStartDownEndUpAndGoToNext);
            this._mainAdjustSetStart = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainAdjustSetStart);
            this._mainAdjustSetStartKeepDuration = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainAdjustSetStartKeepDuration);
            this._mainAdjustSetEnd = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainAdjustSetEnd);
            this._mainAdjustSelected100MsForward = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainAdjustSelected100MsForward);
            this._mainAdjustSelected100MsBack = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainAdjustSelected100MsBack);
            this._mainInsertAfter = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainInsertAfter);
            this._mainInsertBefore = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainInsertBefore);
            this._mainTextBoxInsertAfter = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainTextBoxInsertAfter);
            this._mainTextBoxAutoBreak = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainTextBoxAutoBreak);
            this._mainTextBoxUnbreak = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainTextBoxUnbreak);
            this._mainMergeDialog = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainMergeDialog);
            this._mainToggleFocus = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainToggleFocus);
            this._waveformVerticalZoom = Utilities.GetKeys(Configuration.Settings.Shortcuts.WaveformVerticalZoom);
            this._waveformVerticalZoomOut = Utilities.GetKeys(Configuration.Settings.Shortcuts.WaveformVerticalZoomOut);
            this._waveformZoomIn = Utilities.GetKeys(Configuration.Settings.Shortcuts.WaveformZoomIn);
            this._waveformZoomOut = Utilities.GetKeys(Configuration.Settings.Shortcuts.WaveformZoomOut);
            this._waveformPlaySelection = Utilities.GetKeys(Configuration.Settings.Shortcuts.WaveformPlaySelection);
            this._waveformSearchSilenceForward = Utilities.GetKeys(Configuration.Settings.Shortcuts.WaveformSearchSilenceForward);
            this._waveformSearchSilenceBack = Utilities.GetKeys(Configuration.Settings.Shortcuts.WaveformSearchSilenceBack);
            this._waveformAddTextAtHere = Utilities.GetKeys(Configuration.Settings.Shortcuts.WaveformAddTextHere);
            this._waveformFocusListView = Utilities.GetKeys(Configuration.Settings.Shortcuts.WaveformFocusListView);
            this._mainTranslateCustomSearch1 = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainTranslateCustomSearch1);
            this._mainTranslateCustomSearch2 = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainTranslateCustomSearch2);
            this._mainTranslateCustomSearch3 = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainTranslateCustomSearch3);
            this._mainTranslateCustomSearch4 = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainTranslateCustomSearch4);
            this._mainTranslateCustomSearch5 = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainTranslateCustomSearch5);
            this._mainTranslateCustomSearch6 = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainTranslateCustomSearch6);

            if (this.audioVisualizer != null)
            {
                this.audioVisualizer.InsertAtVideoPositionShortcut = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainWaveformInsertAtCurrentPosition);
            }
        }

        /// <summary>
        /// The get properties and do action.
        /// </summary>
        /// <param name="pluginFileName">
        /// The plugin file name.
        /// </param>
        /// <param name="name">
        /// The name.
        /// </param>
        /// <param name="text">
        /// The text.
        /// </param>
        /// <param name="version">
        /// The version.
        /// </param>
        /// <param name="description">
        /// The description.
        /// </param>
        /// <param name="actionType">
        /// The action type.
        /// </param>
        /// <param name="shortcut">
        /// The shortcut.
        /// </param>
        /// <param name="mi">
        /// The mi.
        /// </param>
        /// <returns>
        /// The <see cref="object"/>.
        /// </returns>
        public static object GetPropertiesAndDoAction(string pluginFileName, out string name, out string text, out decimal version, out string description, out string actionType, out string shortcut, out MethodInfo mi)
        {
            name = null;
            text = null;
            version = 0;
            description = null;
            actionType = null;
            shortcut = null;
            mi = null;
            Assembly assembly;
            try
            {
                assembly = System.Reflection.Assembly.Load(File.ReadAllBytes(pluginFileName));
            }
            catch
            {
                return null;
            }

            string objectName = Path.GetFileNameWithoutExtension(pluginFileName);
            if (assembly != null)
            {
                Type pluginType = assembly.GetType("Nikse.SubtitleEdit.PluginLogic." + objectName);
                if (pluginType == null)
                {
                    return null;
                }

                object pluginObject = Activator.CreateInstance(pluginType);

                // IPlugin
                var t = pluginType.GetInterface("IPlugin");
                if (t == null)
                {
                    return null;
                }

                PropertyInfo pi = t.GetProperty("Name");
                if (pi != null)
                {
                    name = (string)pi.GetValue(pluginObject, null);
                }

                pi = t.GetProperty("Text");
                if (pi != null)
                {
                    text = (string)pi.GetValue(pluginObject, null);
                }

                pi = t.GetProperty("Description");
                if (pi != null)
                {
                    description = (string)pi.GetValue(pluginObject, null);
                }

                pi = t.GetProperty("Version");
                if (pi != null)
                {
                    version = Convert.ToDecimal(pi.GetValue(pluginObject, null));
                }

                pi = t.GetProperty("ActionType");
                if (pi != null)
                {
                    actionType = (string)pi.GetValue(pluginObject, null);
                }

                mi = t.GetMethod("DoAction");

                pi = t.GetProperty("Shortcut");
                if (pi != null)
                {
                    shortcut = (string)pi.GetValue(pluginObject, null);
                }

                return pluginObject;
            }

            return null;
        }

        /// <summary>
        /// The load plugins.
        /// </summary>
        private void LoadPlugins()
        {
            var path = Configuration.PluginsDirectory;
            if (!Directory.Exists(path))
            {
                return;
            }

            var pluginFiles = Directory.GetFiles(path, "*.DLL");

            int filePluginCount = 0;
            int toolsPluginCount = 0;
            int syncPluginCount = 0;

            for (int k = this.fileToolStripMenuItem.DropDownItems.Count - 1; k > 0; k--)
            {
                ToolStripItem x = this.fileToolStripMenuItem.DropDownItems[k];
                if (x.Name.StartsWith("Plugin"))
                {
                    this.fileToolStripMenuItem.DropDownItems.Remove(x);
                }
            }

            for (int k = this.toolsToolStripMenuItem.DropDownItems.Count - 1; k > 0; k--)
            {
                ToolStripItem x = this.toolsToolStripMenuItem.DropDownItems[k];
                if (x.Name.StartsWith("Plugin"))
                {
                    this.toolsToolStripMenuItem.DropDownItems.Remove(x);
                }
            }

            for (int k = this.toolStripMenuItemSpellCheckMain.DropDownItems.Count - 1; k > 0; k--)
            {
                ToolStripItem x = this.toolStripMenuItemSpellCheckMain.DropDownItems[k];
                if (x.Name.StartsWith("Plugin"))
                {
                    this.toolStripMenuItemSpellCheckMain.DropDownItems.Remove(x);
                }
            }

            for (int k = this.toolStripMenuItemSynchronization.DropDownItems.Count - 1; k > 0; k--)
            {
                ToolStripItem x = this.toolStripMenuItemSynchronization.DropDownItems[k];
                if (x.Name.StartsWith("Plugin"))
                {
                    this.toolStripMenuItemSynchronization.DropDownItems.Remove(x);
                }
            }

            for (int k = this.toolStripMenuItemAutoTranslate.DropDownItems.Count - 1; k > 0; k--)
            {
                ToolStripItem x = this.toolStripMenuItemAutoTranslate.DropDownItems[k];
                if (x.Name.StartsWith("Plugin"))
                {
                    this.toolStripMenuItemAutoTranslate.DropDownItems.Remove(x);
                }
            }

            foreach (var pluginFileName in pluginFiles)
            {
                try
                {
                    string name, description, text, shortcut, actionType;
                    decimal version;
                    MethodInfo mi;
                    GetPropertiesAndDoAction(pluginFileName, out name, out text, out version, out description, out actionType, out shortcut, out mi);
                    if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(actionType) && mi != null)
                    {
                        var item = new ToolStripMenuItem();
                        item.Name = "Plugin" + toolsPluginCount;
                        item.Text = text;
                        item.Tag = pluginFileName;

                        if (!string.IsNullOrEmpty(shortcut))
                        {
                            item.ShortcutKeys = Utilities.GetKeys(shortcut);
                        }

                        if (actionType.Equals("File", StringComparison.OrdinalIgnoreCase))
                        {
                            if (filePluginCount == 0)
                            {
                                var tss = new ToolStripSeparator();
                                tss.Name = "PluginSepFile";
                                this.fileToolStripMenuItem.DropDownItems.Insert(this.fileToolStripMenuItem.DropDownItems.Count - 2, tss);
                            }

                            item.Click += this.PluginToolClick;
                            this.fileToolStripMenuItem.DropDownItems.Insert(this.fileToolStripMenuItem.DropDownItems.Count - 2, item);
                            filePluginCount++;
                        }
                        else if (actionType.Equals("Tool", StringComparison.OrdinalIgnoreCase))
                        {
                            if (toolsPluginCount == 0)
                            {
                                var tss = new ToolStripSeparator();
                                tss.Name = "PluginSepTool";
                                this.toolsToolStripMenuItem.DropDownItems.Add(tss);
                            }

                            item.Click += this.PluginToolClick;
                            this.toolsToolStripMenuItem.DropDownItems.Add(item);
                            toolsPluginCount++;
                        }
                        else if (actionType.Equals("Sync", StringComparison.OrdinalIgnoreCase))
                        {
                            if (syncPluginCount == 0)
                            {
                                var tss = new ToolStripSeparator();
                                tss.Name = "PluginSepSync";
                                this.toolStripMenuItemSynchronization.DropDownItems.Add(tss);
                            }

                            item.Click += this.PluginToolClick;
                            this.toolStripMenuItemSynchronization.DropDownItems.Add(item);
                            syncPluginCount++;
                        }
                        else if (actionType.Equals("Translate", StringComparison.OrdinalIgnoreCase))
                        {
                            if (syncPluginCount == 0)
                            {
                                var tss = new ToolStripSeparator();
                                tss.Name = "PluginSepTranslate";
                                this.toolStripMenuItemAutoTranslate.DropDownItems.Add(tss);
                            }

                            item.Click += this.PluginToolClick;
                            this.toolStripMenuItemAutoTranslate.DropDownItems.Add(item);
                            syncPluginCount++;
                        }
                        else if (actionType.Equals("SpellCheck", StringComparison.OrdinalIgnoreCase))
                        {
                            if (syncPluginCount == 0)
                            {
                                var tss = new ToolStripSeparator();
                                tss.Name = "PluginSepSpellCheck";
                                this.toolStripMenuItemSpellCheckMain.DropDownItems.Add(tss);
                            }

                            item.Click += this.PluginToolClick;
                            this.toolStripMenuItemSpellCheckMain.DropDownItems.Add(item);
                            syncPluginCount++;
                        }
                    }
                }
                catch (Exception exception)
                {
                    MessageBox.Show(string.Format(this._language.ErrorLoadingPluginXErrorY, pluginFileName, exception.Message));
                }
            }
        }

        /// <summary>
        /// The plugin tool click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void PluginToolClick(object sender, EventArgs e)
        {
            try
            {
                var item = (ToolStripItem)sender;
                string name, description, text, shortcut, actionType;
                decimal version;
                MethodInfo mi;
                object pluginObject = GetPropertiesAndDoAction(item.Tag.ToString(), out name, out text, out version, out description, out actionType, out shortcut, out mi);
                if (mi == null)
                {
                    return;
                }

                string rawText = null;
                SubtitleFormat format = this.GetCurrentSubtitleFormat();
                if (format != null)
                {
                    if (this.GetCurrentSubtitleFormat().IsFrameBased)
                    {
                        this._subtitle.CalculateTimeCodesFromFrameNumbers(this.CurrentFrameRate);
                    }
                    else
                    {
                        this._subtitle.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                    }

                    rawText = this._subtitle.ToText(format);
                }

                string pluginResult = (string)mi.Invoke(pluginObject, new object[] { this, this._subtitle.ToText(new SubRip()), Configuration.Settings.General.CurrentFrameRate, Configuration.Settings.General.ListViewLineSeparatorString, this._fileName, this._videoFileName, rawText });

                if (!string.IsNullOrEmpty(pluginResult) && pluginResult.Length > 10 && text != pluginResult)
                {
                    var lines = new List<string>(pluginResult.SplitToLines());

                    this.MakeHistoryForUndo(string.Format(this._language.BeforeRunningPluginXVersionY, name, version));

                    var s = new Subtitle();
                    SubtitleFormat newFormat = null;
                    foreach (SubtitleFormat subtitleFormat in SubtitleFormat.AllSubtitleFormats)
                    {
                        if (subtitleFormat.IsMine(lines, null))
                        {
                            subtitleFormat.LoadSubtitle(s, lines, null);
                            newFormat = subtitleFormat;
                            break;
                        }
                    }

                    if (newFormat != null)
                    {
                        this._subtitle.Paragraphs.Clear();
                        this._subtitle.Header = s.Header;
                        this._subtitle.Footer = s.Footer;
                        foreach (var p in s.Paragraphs)
                        {
                            this._subtitle.Paragraphs.Add(p);
                        }

                        this.SaveSubtitleListviewIndices();
                        this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                        this.RestoreSubtitleListviewIndices();
                        this.ShowSource();

                        this.ShowStatus(string.Format(this._language.PluginXExecuted, name));
                    }
                    else
                    {
                        MessageBox.Show(this._language.UnableToReadPluginResult);
                    }
                }
            }
            catch (Exception exception)
            {
                MessageBox.Show(exception.Message);
            }
        }

        /// <summary>
        /// The timer auto save tick.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void TimerAutoSaveTick(object sender, EventArgs e)
        {
            string currentText = string.Empty;
            if (this._subtitle != null && this._subtitle.Paragraphs.Count > 0)
            {
                currentText = this._subtitle.ToText(this.GetCurrentSubtitleFormat());
                if (this._textAutoSave == null)
                {
                    this._textAutoSave = this._changeSubtitleToString;
                }

                if (!string.IsNullOrEmpty(this._textAutoSave) && currentText.Trim() != this._textAutoSave.Trim() && !string.IsNullOrWhiteSpace(currentText))
                {
                    if (!Directory.Exists(Configuration.AutoBackupFolder))
                    {
                        try
                        {
                            Directory.CreateDirectory(Configuration.AutoBackupFolder);
                        }
                        catch (Exception exception)
                        {
                            MessageBox.Show(string.Format(this._language.UnableToCreateBackupDirectory, Configuration.AutoBackupFolder, exception.Message));
                        }
                    }

                    string title = string.Empty;
                    if (!string.IsNullOrEmpty(this._fileName))
                    {
                        title = "_" + Path.GetFileNameWithoutExtension(this._fileName);
                    }

                    string fileName = string.Format("{0}{1:0000}-{2:00}-{3:00}_{4:00}-{5:00}-{6:00}{7}{8}", Configuration.AutoBackupFolder, DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second, title, this.GetCurrentSubtitleFormat().Extension);
                    File.WriteAllText(fileName, currentText);
                }
            }

            this._textAutoSave = currentText;

            if (this._subtitleAlternateFileName != null && this._subtitleAlternate != null && this._subtitleAlternate.Paragraphs.Count > 0)
            {
                string currentTextAlternate = this._subtitleAlternate.ToText(this.GetCurrentSubtitleFormat());
                if (this._subtitleAlternate != null && this._subtitleAlternate.Paragraphs.Count > 0)
                {
                    if (this._textAutoSaveOriginal == null)
                    {
                        this._textAutoSaveOriginal = this._changeSubtitleToString;
                    }

                    if (!string.IsNullOrEmpty(this._textAutoSaveOriginal) && currentTextAlternate.Trim() != this._textAutoSaveOriginal.Trim() && !string.IsNullOrWhiteSpace(currentTextAlternate))
                    {
                        if (!Directory.Exists(Configuration.AutoBackupFolder))
                        {
                            try
                            {
                                Directory.CreateDirectory(Configuration.AutoBackupFolder);
                            }
                            catch
                            {
                            }
                        }

                        string title = string.Empty;
                        if (!string.IsNullOrEmpty(this._subtitleAlternateFileName))
                        {
                            title = "_" + Path.GetFileNameWithoutExtension(this._subtitleAlternateFileName);
                        }

                        string fileName = string.Format("{0}{1:0000}-{2:00}-{3:00}_{4:00}-{5:00}-{6:00}{7}{8}", Configuration.AutoBackupFolder, DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second, "_Original" + title, this.GetCurrentSubtitleFormat().Extension);
                        File.WriteAllText(fileName, currentTextAlternate);
                    }
                }

                this._textAutoSaveOriginal = currentTextAlternate;
            }
        }

        /// <summary>
        /// The media player_ drag drop.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void mediaPlayer_DragDrop(object sender, DragEventArgs e)
        {
            var files = (string[])e.Data.GetData(DataFormats.FileDrop);
            if (files.Length == 1)
            {
                string fileName = files[0];
                string ext = Path.GetExtension(fileName).ToLowerInvariant();
                if (Utilities.GetVideoFileFilter(true).Contains(ext))
                {
                    if (string.IsNullOrEmpty(this._fileName))
                    {
                        var dirName = Path.GetDirectoryName(fileName);
                        this.saveFileDialog1.InitialDirectory = dirName;
                        this.openFileDialog1.InitialDirectory = dirName;
                    }

                    this.OpenVideo(fileName);
                }
                else
                {
                    try
                    {
                        var fi = new FileInfo(fileName);
                        if (fi.Length < 1024 * 500)
                        {
                            var lines = new List<string>(File.ReadAllLines(fileName));
                            foreach (SubtitleFormat format in SubtitleFormat.AllSubtitleFormats)
                            {
                                if (format.IsMine(lines, fileName))
                                {
                                    this.OpenSubtitle(fileName, null);
                                    return;
                                }
                            }
                        }
                    }
                    catch
                    {
                    }

                    MessageBox.Show(string.Format(this._language.DropFileXNotAccepted, fileName));
                }
            }
            else
            {
                MessageBox.Show(this._language.DropOnlyOneFile);
            }
        }

        /// <summary>
        /// The media player_ drag enter.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void mediaPlayer_DragEnter(object sender, DragEventArgs e)
        {
            // make sure they're actually dropping files (not text or anything else)
            if (e.Data.GetDataPresent(DataFormats.FileDrop, false))
            {
                e.Effect = DragDropEffects.All;
            }
        }

        /// <summary>
        /// The button sec back 2_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void buttonSecBack2_Click(object sender, EventArgs e)
        {
            this.GoBackSeconds((double)this.numericUpDownSec2.Value);
        }

        /// <summary>
        /// The button forward 2_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void buttonForward2_Click(object sender, EventArgs e)
        {
            this.GoBackSeconds(-(double)this.numericUpDownSec2.Value);
        }

        /// <summary>
        /// The button adjust sec back 2_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void buttonAdjustSecBack2_Click(object sender, EventArgs e)
        {
            this.GoBackSeconds((double)this.numericUpDownSecAdjust2.Value);
        }

        /// <summary>
        /// The button adjust sec forward 2_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void buttonAdjustSecForward2_Click(object sender, EventArgs e)
        {
            this.GoBackSeconds(-(double)this.numericUpDownSecAdjust2.Value);
        }

        /// <summary>
        /// The translatepowered by microsoft tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void translatepoweredByMicrosoftToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.TranslateViaGoogle(false, false);
        }

        /// <summary>
        /// The sha 256 hash.
        /// </summary>
        /// <param name="value">
        /// The value.
        /// </param>
        /// <returns>
        /// The <see cref="string"/>.
        /// </returns>
        public static string Sha256Hash(string value)
        {
            using (var hasher = new System.Security.Cryptography.SHA256Managed())
            {
                var bytes = Encoding.UTF8.GetBytes(value);
                var hash = hasher.ComputeHash(bytes);
                return Convert.ToBase64String(hash, 0, hash.Length);
            }
        }

        /// <summary>
        /// The get peak wave file name.
        /// </summary>
        /// <param name="videoFileName">
        /// The video file name.
        /// </param>
        /// <returns>
        /// The <see cref="string"/>.
        /// </returns>
        public static string GetPeakWaveFileName(string videoFileName)
        {
            var dir = Configuration.WaveformsFolder.TrimEnd(Path.DirectorySeparatorChar);
            if (!Directory.Exists(dir))
            {
                Directory.CreateDirectory(dir);
            }

            var file = new FileInfo(videoFileName);
            var wavePeakName = Sha256Hash(file.Name + file.Length + file.CreationTimeUtc.ToShortDateString()) + ".wav";
            wavePeakName = wavePeakName.Replace("=", string.Empty).Replace("/", string.Empty).Replace(",", string.Empty).Replace("?", string.Empty).Replace("*", string.Empty).Replace("+", string.Empty).Replace("\\", string.Empty);
            wavePeakName = Path.Combine(dir, wavePeakName);
            return wavePeakName;
        }

        /// <summary>
        /// The get spectrogram folder.
        /// </summary>
        /// <param name="videoFileName">
        /// The video file name.
        /// </param>
        /// <returns>
        /// The <see cref="string"/>.
        /// </returns>
        private static string GetSpectrogramFolder(string videoFileName)
        {
            var dir = Configuration.SpectrogramsFolder.TrimEnd(Path.DirectorySeparatorChar);
            if (!Directory.Exists(dir))
            {
                Directory.CreateDirectory(dir);
            }

            var file = new FileInfo(videoFileName);
            var name = Sha256Hash(file.Name + file.Length + file.CreationTimeUtc.ToShortDateString());
            name = name.Replace("=", string.Empty).Replace("/", string.Empty).Replace(",", string.Empty).Replace("?", string.Empty).Replace("*", string.Empty).Replace("+", string.Empty).Replace("\\", string.Empty);
            name = Path.Combine(dir, name);
            return name;
        }

        /// <summary>
        /// The audio waveform_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void AudioWaveform_Click(object sender, EventArgs e)
        {
            if (this.audioVisualizer.WavePeaks == null)
            {
                if (string.IsNullOrEmpty(this._videoFileName))
                {
                    this.buttonOpenVideo_Click(sender, e);
                    if (string.IsNullOrEmpty(this._videoFileName))
                    {
                        return;
                    }
                }

                this.mediaPlayer.Pause();
                using (var addWaveform = new AddWaveform())
                {
                    var peakWaveFileName = GetPeakWaveFileName(this._videoFileName);
                    var spectrogramFolder = GetSpectrogramFolder(this._videoFileName);
                    addWaveform.Initialize(this._videoFileName, spectrogramFolder, this._videoAudioTrackNumber);
                    if (addWaveform.ShowDialog() == DialogResult.OK)
                    {
                        addWaveform.WavePeak.WritePeakSamples(peakWaveFileName);
                        var audioPeakWave = new WavePeakGenerator(peakWaveFileName);
                        audioPeakWave.GenerateAllSamples();
                        audioPeakWave.Close();
                        this.audioVisualizer.WavePeaks = audioPeakWave;
                        if (addWaveform.SpectrogramBitmaps != null)
                        {
                            this.audioVisualizer.InitializeSpectrogram(addWaveform.SpectrogramBitmaps, spectrogramFolder);
                        }

                        this.timerWaveform.Start();
                    }
                }
            }
        }

        /// <summary>
        /// The timer waveform_ tick.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void timerWaveform_Tick(object sender, EventArgs e)
        {
            if (this.audioVisualizer.Visible && this.mediaPlayer.VideoPlayer != null && this.audioVisualizer.WavePeaks != null)
            {
                int index = -1;
                if (this.SubtitleListview1.SelectedItems.Count > 0)
                {
                    index = this.SubtitleListview1.SelectedItems[0].Index;
                }

                if (this.audioVisualizer.Locked)
                {
                    double startPos = this.mediaPlayer.CurrentPosition - ((this.audioVisualizer.EndPositionSeconds - this.audioVisualizer.StartPositionSeconds) / 2.0);
                    if (startPos < 0)
                    {
                        startPos = 0;
                    }

                    this.SetWaveformPosition(startPos, this.mediaPlayer.CurrentPosition, index);
                }
                else if (this.mediaPlayer.CurrentPosition > this.audioVisualizer.EndPositionSeconds || this.mediaPlayer.CurrentPosition < this.audioVisualizer.StartPositionSeconds)
                {
                    double startPos = this.mediaPlayer.CurrentPosition - 0.01;
                    if (startPos < 0)
                    {
                        startPos = 0;
                    }

                    this.audioVisualizer.ClearSelection();
                    this.SetWaveformPosition(startPos, this.mediaPlayer.CurrentPosition, index);
                }
                else
                {
                    this.SetWaveformPosition(this.audioVisualizer.StartPositionSeconds, this.mediaPlayer.CurrentPosition, index);
                }

                bool paused = this.mediaPlayer.IsPaused;
                this.toolStripButtonWaveformPause.Visible = !paused;
                this.toolStripButtonWaveformPlay.Visible = paused;
            }
            else
            {
                this.toolStripButtonWaveformPlay.Visible = true;
                this.toolStripButtonWaveformPause.Visible = false;
            }
        }

        /// <summary>
        /// The add paragraph here tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void addParagraphHereToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.audioVisualizer.ClearSelection();
            var newParagraph = new Paragraph(this.audioVisualizer.NewSelectionParagraph);
            var format = this.GetCurrentSubtitleFormat();
            bool useExtraForStyle = format.HasStyleSupport;
            var styles = new List<string>();
            if (format.GetType() == typeof(AdvancedSubStationAlpha) || format.GetType() == typeof(SubStationAlpha))
            {
                styles = AdvancedSubStationAlpha.GetStylesFromHeader(this._subtitle.Header);
            }
            else if (format.GetType() == typeof(TimedText10) || format.GetType() == typeof(ItunesTimedText))
            {
                styles = TimedText10.GetStylesFromHeader(this._subtitle.Header);
            }
            else if (format.GetType() == typeof(Sami) || format.GetType() == typeof(SamiModern))
            {
                styles = Sami.GetStylesFromHeader(this._subtitle.Header);
            }

            string style = "Default";
            if (styles.Count > 0)
            {
                style = styles[0];
            }

            if (useExtraForStyle)
            {
                newParagraph.Extra = style;
            }

            this.mediaPlayer.Pause();

            // find index where to insert
            int index = 0;
            for (int i = 0; i < this._subtitle.Paragraphs.Count; i++)
            {
                var p = this._subtitle.Paragraphs[i];
                if (p.StartTime.TotalMilliseconds > newParagraph.StartTime.TotalMilliseconds && (!p.StartTime.IsMaxTime || !HasSmallerStartTimes(this._subtitle, i + 1, newParagraph.StartTime.TotalMilliseconds)))
                {
                    break;
                }

                index++;
            }

            this.MakeHistoryForUndo(this._language.BeforeInsertLine);

            // create and insert
            if (format.IsFrameBased)
            {
                newParagraph.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                newParagraph.CalculateTimeCodesFromFrameNumbers(this.CurrentFrameRate);
            }

            if (this._networkSession != null)
            {
                this._networkSession.TimerStop();
                this.NetworkGetSendUpdates(new List<int>(), index, newParagraph);
            }
            else
            {
                this._subtitle.Paragraphs.Insert(index, newParagraph);

                if (this._subtitleAlternate != null && this.SubtitleListview1.IsAlternateTextColumnVisible && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                {
                    this._subtitleAlternate.InsertParagraphInCorrectTimeOrder(new Paragraph(newParagraph));
                    this._subtitleAlternate.Renumber();
                }

                this._subtitleListViewIndex = -1;
                this._subtitle.Renumber();
                this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
            }

            this.SubtitleListview1.SelectIndexAndEnsureVisible(index);

            this.textBoxListViewText.Focus();
            this.audioVisualizer.NewSelectionParagraph = null;

            this.ShowStatus(string.Format(this._language.VideoControls.NewTextInsertAtX, newParagraph.StartTime.ToShortString()));
            this.audioVisualizer.Invalidate();
        }

        /// <summary>
        /// The has smaller start times.
        /// </summary>
        /// <param name="subtitle">
        /// The subtitle.
        /// </param>
        /// <param name="startIndex">
        /// The start index.
        /// </param>
        /// <param name="startMs">
        /// The start ms.
        /// </param>
        /// <returns>
        /// The <see cref="bool"/>.
        /// </returns>
        private static bool HasSmallerStartTimes(Subtitle subtitle, int startIndex, double startMs)
        {
            for (int i = startIndex; i < subtitle.Paragraphs.Count; i++)
            {
                var p = subtitle.Paragraphs[i];
                if (startMs > p.StartTime.TotalMilliseconds && !p.StartTime.IsMaxTime)
                {
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// The add paragraph and paste tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void addParagraphAndPasteToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.addParagraphHereToolStripMenuItem_Click(sender, e);
            this.textBoxListViewText.Text = Clipboard.GetText();
        }

        /// <summary>
        /// The merge with previous tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void mergeWithPreviousToolStripMenuItem_Click(object sender, EventArgs e)
        {
            int index = this._subtitle.GetIndex(this.audioVisualizer.RightClickedParagraph);
            if (index >= 0)
            {
                this.SubtitleListview1.SelectIndexAndEnsureVisible(index);
                this.MergeBeforeToolStripMenuItemClick(null, null);
            }

            this.audioVisualizer.Invalidate();
        }

        /// <summary>
        /// The delete paragraph tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void deleteParagraphToolStripMenuItem_Click(object sender, EventArgs e)
        {
            int index = this._subtitle.GetIndex(this.audioVisualizer.RightClickedParagraph);
            if (index >= 0)
            {
                this.SubtitleListview1.SelectIndexAndEnsureVisible(index);
                this.ToolStripMenuItemDeleteClick(null, null);
            }

            this.audioVisualizer.Invalidate();
        }

        /// <summary>
        /// The split tool strip menu item 1_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void splitToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < this._subtitle.Paragraphs.Count; i++)
            {
                if (this.audioVisualizer.RightClickedParagraph.StartTime.TotalMilliseconds == this._subtitle.Paragraphs[i].StartTime.TotalMilliseconds && this.audioVisualizer.RightClickedParagraph.EndTime.TotalMilliseconds == this._subtitle.Paragraphs[i].EndTime.TotalMilliseconds)
                {
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(i);
                    this.SplitSelectedParagraph(this._audioWaveformRightClickSeconds, null);
                    break;
                }
            }

            this.audioVisualizer.Invalidate();
        }

        /// <summary>
        /// The merge with next tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void mergeWithNextToolStripMenuItem_Click(object sender, EventArgs e)
        {
            int index = this._subtitle.GetIndex(this.audioVisualizer.RightClickedParagraph);
            if (index >= 0)
            {
                this.SubtitleListview1.SelectIndexAndEnsureVisible(index);
                this.MergeAfterToolStripMenuItemClick(null, null);
            }

            this.audioVisualizer.Invalidate();
        }

        /// <summary>
        /// The button waveform zoom in_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void buttonWaveformZoomIn_Click(object sender, EventArgs e)
        {
            if (this.audioVisualizer.WavePeaks != null && this.audioVisualizer.Visible)
            {
                this.audioVisualizer.ZoomFactor += 0.1;
            }
        }

        /// <summary>
        /// The button waveform zoom out_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void buttonWaveformZoomOut_Click(object sender, EventArgs e)
        {
            if (this.audioVisualizer.WavePeaks != null && this.audioVisualizer.Visible)
            {
                this.audioVisualizer.ZoomFactor -= 0.1;
            }
        }

        /// <summary>
        /// The button waveform zoom reset_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void buttonWaveformZoomReset_Click(object sender, EventArgs e)
        {
            if (this.audioVisualizer.WavePeaks != null && this.audioVisualizer.Visible)
            {
                this.audioVisualizer.ZoomFactor = 1.0;
            }
        }

        /// <summary>
        /// The tool strip menu item waveform play selection_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemWaveformPlaySelection_Click(object sender, EventArgs e)
        {
            if (this.mediaPlayer.VideoPlayer != null)
            {
                var p = this.audioVisualizer.NewSelectionParagraph;
                if (p == null)
                {
                    p = this.audioVisualizer.RightClickedParagraph;
                }

                if (p != null)
                {
                    this.mediaPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                    Utilities.ShowSubtitle(this._subtitle.Paragraphs, this.mediaPlayer);
                    this.mediaPlayer.Play();
                    this._endSeconds = p.EndTime.TotalSeconds;
                }
            }
        }

        /// <summary>
        /// The tool strip button waveform zoom in_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripButtonWaveformZoomIn_Click(object sender, EventArgs e)
        {
            if (this.audioVisualizer.WavePeaks != null && this.audioVisualizer.Visible)
            {
                this.audioVisualizer.ZoomFactor += 0.1;
                this.SelectZoomTextInComboBox();
            }
        }

        /// <summary>
        /// The tool strip button waveform zoom out_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripButtonWaveformZoomOut_Click(object sender, EventArgs e)
        {
            if (this.audioVisualizer.WavePeaks != null && this.audioVisualizer.Visible)
            {
                this.audioVisualizer.ZoomFactor -= 0.1;
                this.SelectZoomTextInComboBox();
            }
        }

        /// <summary>
        /// The tool strip combo box waveform_ selected index changed.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripComboBoxWaveform_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                ComboBoxZoomItem item = this.toolStripComboBoxWaveform.SelectedItem as ComboBoxZoomItem;
                if (item != null)
                {
                    this.audioVisualizer.ZoomFactor = item.ZoomFactor;
                }
            }
            catch
            {
            }
        }

        /// <summary>
        /// The select zoom text in combo box.
        /// </summary>
        private void SelectZoomTextInComboBox()
        {
            int i = 0;
            foreach (ComboBoxZoomItem item in this.toolStripComboBoxWaveform.Items)
            {
                if (Math.Abs(this.audioVisualizer.ZoomFactor - item.ZoomFactor) < 0.001)
                {
                    this.toolStripComboBoxWaveform.SelectedIndex = i;
                    return;
                }

                i++;
            }
        }

        /// <summary>
        /// The tool strip button waveform pause_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripButtonWaveformPause_Click(object sender, EventArgs e)
        {
            this.mediaPlayer.Pause();
        }

        /// <summary>
        /// The tool strip button waveform play_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripButtonWaveformPlay_Click(object sender, EventArgs e)
        {
            this.mediaPlayer.Play();
        }

        /// <summary>
        /// The tool strip button lock center_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripButtonLockCenter_Click(object sender, EventArgs e)
        {
            this.toolStripButtonLockCenter.Checked = !this.toolStripButtonLockCenter.Checked;
            this.audioVisualizer.Locked = this.toolStripButtonLockCenter.Checked;
            Configuration.Settings.General.WaveformCenter = this.audioVisualizer.Locked;
        }

        /// <summary>
        /// The track bar waveform position_ value changed.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void trackBarWaveformPosition_ValueChanged(object sender, EventArgs e)
        {
            this.mediaPlayer.CurrentPosition = this.trackBarWaveformPosition.Value;
        }

        /// <summary>
        /// The button custom url_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void buttonCustomUrl_Click(object sender, EventArgs e)
        {
            this.RunCustomSearch(Configuration.Settings.VideoControls.CustomSearchUrl1);
        }

        /// <summary>
        /// The button custom url 2_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void buttonCustomUrl2_Click(object sender, EventArgs e)
        {
            this.RunCustomSearch(Configuration.Settings.VideoControls.CustomSearchUrl2);
        }

        /// <summary>
        /// The showhide waveform tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ShowhideWaveformToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.toolStripButtonToggleWaveform_Click(null, null);
        }

        /// <summary>
        /// The audio waveform drag enter.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void AudioWaveformDragEnter(object sender, DragEventArgs e)
        {
            // make sure they're actually dropping files (not text or anything else)
            if (e.Data.GetDataPresent(DataFormats.FileDrop, false))
            {
                e.Effect = DragDropEffects.All;
            }
        }

        /// <summary>
        /// The audio waveform drag drop.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void AudioWaveformDragDrop(object sender, DragEventArgs e)
        {
            var files = (string[])e.Data.GetData(DataFormats.FileDrop);
            if (files.Length != 1)
            {
                MessageBox.Show(this._language.DropOnlyOneFile);
                return;
            }

            string fileName = files[0];
            string ext = Path.GetExtension(fileName).ToLowerInvariant();
            if (ext != ".wav")
            {
                if (this.audioVisualizer.WavePeaks == null && (Utilities.GetMovieFileExtensions().Contains(ext) || ext == ".mp3"))
                {
                    this._videoFileName = fileName;
                    this.AudioWaveform_Click(null, null);
                    this.OpenVideo(this._videoFileName);
                    return;
                }

                try
                {
                    var fi = new FileInfo(fileName);
                    if (fi.Length < 1024 * 500)
                    {
                        var lines = new List<string>(File.ReadAllLines(fileName));
                        foreach (SubtitleFormat format in SubtitleFormat.AllSubtitleFormats)
                        {
                            if (format.IsMine(lines, fileName))
                            {
                                this.OpenSubtitle(fileName, null);
                                return;
                            }
                        }
                    }
                }
                catch
                {
                }
            }

            if (string.IsNullOrEmpty(this._videoFileName))
            {
                this.buttonOpenVideo_Click(null, null);
            }

            if (this._videoFileName == null)
            {
                return;
            }

            if (ext != ".wav")
            {
                MessageBox.Show(".wav only!");
                return;
            }

            using (var addWaveform = new AddWaveform())
            {
                string spectrogramFolder = GetSpectrogramFolder(this._videoFileName);
                addWaveform.InitializeViaWaveFile(fileName, spectrogramFolder);
                if (addWaveform.ShowDialog() == DialogResult.OK)
                {
                    string peakWaveFileName = GetPeakWaveFileName(this._videoFileName);
                    addWaveform.WavePeak.WritePeakSamples(peakWaveFileName);
                    var audioPeakWave = new WavePeakGenerator(peakWaveFileName);
                    audioPeakWave.GenerateAllSamples();
                    this.audioVisualizer.WavePeaks = audioPeakWave;
                    this.timerWaveform.Start();
                }
            }
        }

        /// <summary>
        /// The tool strip menu item import blu ray sup_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemImportBluRaySup_Click(object sender, EventArgs e)
        {
            if (this.ContinueNewOrExit())
            {
                this.openFileDialog1.Title = this._language.OpenBluRaySupFile;
                this.openFileDialog1.FileName = string.Empty;
                this.openFileDialog1.Filter = this._language.BluRaySupFiles + "|*.sup";
                if (this.openFileDialog1.ShowDialog(this) == DialogResult.OK)
                {
                    this.ImportAndOcrBluRaySup(this.openFileDialog1.FileName, false);
                }
            }
        }

        /// <summary>
        /// The import and ocr blu ray sup.
        /// </summary>
        /// <param name="fileName">
        /// The file name.
        /// </param>
        /// <param name="showInTaskbar">
        /// The show in taskbar.
        /// </param>
        private void ImportAndOcrBluRaySup(string fileName, bool showInTaskbar)
        {
            var log = new StringBuilder();
            var subtitles = BluRaySupParser.ParseBluRaySup(fileName, log);
            if (subtitles.Count == 0)
            {
                string msg = this._language.BlurayNotSubtitlesFound + Environment.NewLine + Environment.NewLine + log.ToString();
                if (msg.Length > 800)
                {
                    msg = msg.Substring(0, 800);
                }

                MessageBox.Show(msg.Trim() + "...");
                return;
            }

            using (var vobSubOcr = new VobSubOcr())
            {
                if (showInTaskbar)
                {
                    vobSubOcr.Icon = (Icon)this.Icon.Clone();
                    vobSubOcr.ShowInTaskbar = true;
                    vobSubOcr.ShowIcon = true;
                }

                vobSubOcr.Initialize(subtitles, Configuration.Settings.VobSubOcr, fileName);
                vobSubOcr.FileName = Path.GetFileName(fileName);
                if (vobSubOcr.ShowDialog(this) == DialogResult.OK)
                {
                    this.MakeHistoryForUndo(this._language.BeforeImportingBluRaySupFile);
                    this.FileNew();
                    this._subtitle.Paragraphs.Clear();
                    this.SetCurrentFormat(Configuration.Settings.General.DefaultSubtitleFormat);
                    this._subtitle.WasLoadedWithFrameNumbers = false;
                    this._subtitle.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                    foreach (var p in vobSubOcr.SubtitleFromOcr.Paragraphs)
                    {
                        this._subtitle.Paragraphs.Add(p);
                    }

                    this.ShowSource();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this._subtitleListViewIndex = -1;
                    this.SubtitleListview1.FirstVisibleIndex = -1;
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(0);

                    this._fileName = Path.ChangeExtension(vobSubOcr.FileName, ".srt");
                    this.SetTitle();
                    this._converted = true;

                    Configuration.Settings.Save();
                }
            }
        }

        /// <summary>
        /// The select all tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void selectAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (this.textBoxListViewTextAlternate.Focused)
            {
                this.textBoxListViewTextAlternate.SelectAll();
            }
            else
            {
                this.textBoxListViewText.SelectAll();
            }
        }

        /// <summary>
        /// The cut tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void cutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (this.textBoxListViewTextAlternate.Focused)
            {
                this.textBoxListViewTextAlternate.Cut();
            }
            else
            {
                this.textBoxListViewText.Cut();
            }
        }

        /// <summary>
        /// The copy tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void copyToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (this.textBoxListViewTextAlternate.Focused)
            {
                this.textBoxListViewTextAlternate.Copy();
            }
            else
            {
                this.textBoxListViewText.Copy();
            }
        }

        /// <summary>
        /// The paste tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void PasteToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (this.textBoxListViewTextAlternate.Focused)
            {
                this.textBoxListViewTextAlternate.Paste();
            }
            else
            {
                this.textBoxListViewText.Paste();
            }
        }

        /// <summary>
        /// The delete tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void DeleteToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (this.textBoxListViewTextAlternate.Focused)
            {
                this.textBoxListViewTextAlternate.SelectedText = string.Empty;
            }
            else
            {
                this.textBoxListViewText.SelectedText = string.Empty;
            }
        }

        /// <summary>
        /// The normal tool strip menu item 1 click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void NormalToolStripMenuItem1Click(object sender, EventArgs e)
        {
            TextBox tb;
            if (this.textBoxListViewTextAlternate.Focused)
            {
                tb = this.textBoxListViewTextAlternate;
            }
            else
            {
                tb = this.textBoxListViewText;
            }

            string text = tb.SelectedText;
            int selectionStart = tb.SelectionStart;
            text = HtmlUtil.RemoveHtmlTags(text);
            tb.SelectedText = text;
            tb.SelectionStart = selectionStart;
            tb.SelectionLength = text.Length;
        }

        /// <summary>
        /// The text box list view toggle tag.
        /// </summary>
        /// <param name="tag">
        /// The tag.
        /// </param>
        private void TextBoxListViewToggleTag(string tag)
        {
            TextBox tb;
            if (this.textBoxListViewTextAlternate.Focused)
            {
                tb = this.textBoxListViewTextAlternate;
            }
            else
            {
                tb = this.textBoxListViewText;
            }

            string text = string.Empty;
            int selectionStart = tb.SelectionStart;

            // No text selected.
            if (tb.SelectedText.Length == 0)
            {
                text = tb.Text;

                // Split lines (split a subtitle into its lines).
                var lines = text.SplitToLines();

                // Get current line index (the line where the cursor is).
                int selectedLineNumber = tb.GetLineFromCharIndex(tb.SelectionStart);

                bool isDialog = false;
                int lineNumber = 0;
                string templine = string.Empty;
                var lineSb = new StringBuilder();
                int tagLength = 0;

                // See if lines start with "-".
                foreach (var line in lines)
                {
                    // Append line break in every line except the first one
                    if (lineNumber > 0)
                    {
                        lineSb.Append(Environment.NewLine);
                    }

                    templine = line;

                    string positionTag = string.Empty;
                    int indexOfEndBracket = templine.IndexOf('}');
                    if (templine.StartsWith("{\\") && indexOfEndBracket > 1 && indexOfEndBracket < 6)
                    {
                        // Find position tag and remove it from string.
                        positionTag = templine.Substring(0, indexOfEndBracket + 1);
                        templine = templine.Remove(0, indexOfEndBracket + 1);
                    }

                    if (templine.StartsWith('-') || templine.StartsWith("<" + tag + ">-"))
                    {
                        isDialog = true;

                        // Apply tags to current line (it is the selected line). Or remove them.
                        if (selectedLineNumber == lineNumber)
                        {
                            // Remove tags if present.
                            if (templine.Contains("<" + tag + ">"))
                            {
                                templine = templine.Replace("<" + tag + ">", string.Empty);
                                templine = templine.Replace("</" + tag + ">", string.Empty);
                                tagLength = -3;
                            }
                            else
                            {
                                // Add tags.
                                templine = string.Format("<{0}>{1}</{0}>", tag, templine);
                                tagLength = 3;
                            }
                        }
                    }

                    lineSb.Append(positionTag + templine);
                    lineNumber++;
                }

                if (isDialog)
                {
                    text = lineSb.ToString();
                    tb.Text = text;
                    tb.SelectionStart = selectionStart + tagLength;
                    tb.SelectionLength = 0;
                }

                // There are no dialog lines present.
                else
                {
                    // Remove tags if present.
                    if (text.Contains("<" + tag + ">"))
                    {
                        text = text.Replace("<" + tag + ">", string.Empty);
                        text = text.Replace("</" + tag + ">", string.Empty);
                        tb.Text = text;
                        tb.SelectionStart = selectionStart - 3;
                        tb.SelectionLength = 0;
                    }
                    else
                    {
                        // Add tags.
                        int indexOfEndBracket = text.IndexOf('}');
                        if (text.StartsWith("{\\") && indexOfEndBracket > 1 && indexOfEndBracket < 6)
                        {
                            text = string.Format("{2}<{0}>{1}</{0}>", tag, text.Remove(0, indexOfEndBracket + 1), text.Substring(0, indexOfEndBracket + 1));
                        }
                        else
                        {
                            text = string.Format("<{0}>{1}</{0}>", tag, text);
                        }

                        tb.Text = text;
                        tb.SelectionStart = selectionStart + 3;
                        tb.SelectionLength = 0;
                    }
                }
            }
            else
            {
                string post = string.Empty;
                string pre = string.Empty;

                // There is text selected
                text = tb.SelectedText;
                while (text.EndsWith(' ') || text.EndsWith(Environment.NewLine) || text.StartsWith(' ') || text.StartsWith(Environment.NewLine))
                {
                    if (text.EndsWith(' '))
                    {
                        post += " ";
                        text = text.Remove(text.Length - 1);
                    }

                    if (text.EndsWith(Environment.NewLine))
                    {
                        post += Environment.NewLine;
                        text = text.Remove(text.Length - 2);
                    }

                    if (text.StartsWith(' '))
                    {
                        pre += " ";
                        text = text.Remove(0, 1);
                    }

                    if (text.StartsWith(Environment.NewLine))
                    {
                        pre += Environment.NewLine;
                        text = text.Remove(0, 2);
                    }
                }

                // Remove tags if present.
                if (text.Contains("<" + tag + ">"))
                {
                    text = text.Replace("<" + tag + ">", string.Empty);
                    text = text.Replace("</" + tag + ">", string.Empty);
                }
                else
                {
                    // Add tags.
                    int indexOfEndBracket = text.IndexOf('}');
                    if (text.StartsWith("{\\") && indexOfEndBracket > 1 && indexOfEndBracket < 6)
                    {
                        text = string.Format("{2}<{0}>{1}</{0}>", tag, text.Remove(0, indexOfEndBracket + 1), text.Substring(0, indexOfEndBracket + 1));
                    }
                    else
                    {
                        text = string.Format("<{0}>{1}</{0}>", tag, text);
                    }
                }

                // Update text and maintain selection.
                if (pre.Length > 0)
                {
                    text = pre + text;
                    selectionStart += pre.Length;
                }

                if (post.Length > 0)
                {
                    text = text + post;
                }

                tb.SelectedText = text;
                tb.SelectionStart = selectionStart;
                tb.SelectionLength = text.Length;
            }
        }

        /// <summary>
        /// The bold tool strip menu item 1 click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void BoldToolStripMenuItem1Click(object sender, EventArgs e)
        {
            this.TextBoxListViewToggleTag("b");
        }

        /// <summary>
        /// The italic tool strip menu item 1 click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ItalicToolStripMenuItem1Click(object sender, EventArgs e)
        {
            this.TextBoxListViewToggleTag("i");
        }

        /// <summary>
        /// The underline tool strip menu item 1 click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void UnderlineToolStripMenuItem1Click(object sender, EventArgs e)
        {
            this.TextBoxListViewToggleTag("u");
        }

        /// <summary>
        /// The color tool strip menu item 1 click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ColorToolStripMenuItem1Click(object sender, EventArgs e)
        {
            TextBox tb;
            if (this.textBoxListViewTextAlternate.Focused)
            {
                tb = this.textBoxListViewTextAlternate;
            }
            else
            {
                tb = this.textBoxListViewText;
            }

            // color
            string text = tb.SelectedText;
            int selectionStart = tb.SelectionStart;

            if (this.colorDialog1.ShowDialog(this) == DialogResult.OK)
            {
                string color = Utilities.ColorToHex(this.colorDialog1.Color);
                bool done = false;
                string s = text;
                if (s.StartsWith("<font "))
                {
                    int end = s.IndexOf('>');
                    if (end > 0)
                    {
                        string f = s.Substring(0, end);
                        if (f.Contains(" face=") && !f.Contains(" color="))
                        {
                            var start = s.IndexOf(" face=", StringComparison.Ordinal);
                            s = s.Insert(start, string.Format(" color=\"{0}\"", color));
                            text = s;
                            done = true;
                        }
                        else if (f.Contains(" color="))
                        {
                            int colorStart = f.IndexOf(" color=", StringComparison.Ordinal);
                            if (s.IndexOf('"', colorStart + " color=".Length + 1) > 0)
                            {
                                end = s.IndexOf('"', colorStart + " color=".Length + 1);
                            }

                            s = s.Substring(0, colorStart) + string.Format(" color=\"{0}", color) + s.Substring(end);
                            text = s;
                            done = true;
                        }
                    }
                }

                if (!done)
                {
                    text = string.Format("<font color=\"{0}\">{1}</font>", color, text);
                }

                tb.SelectedText = text;
                tb.SelectionStart = selectionStart;
                tb.SelectionLength = text.Length;
            }
        }

        /// <summary>
        /// The font name tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void FontNameToolStripMenuItemClick(object sender, EventArgs e)
        {
            TextBox tb;
            if (this.textBoxListViewTextAlternate.Focused)
            {
                tb = this.textBoxListViewTextAlternate;
            }
            else
            {
                tb = this.textBoxListViewText;
            }

            // font name
            string text = tb.SelectedText;
            int selectionStart = tb.SelectionStart;

            if (this.fontDialog1.ShowDialog(this) == DialogResult.OK)
            {
                bool done = false;

                if (text.StartsWith("<font "))
                {
                    int end = text.IndexOf('>');
                    if (end > 0)
                    {
                        string f = text.Substring(0, end);
                        if (f.Contains(" color=") && !f.Contains(" face="))
                        {
                            var start = text.IndexOf(" color=", StringComparison.Ordinal);
                            text = text.Insert(start, string.Format(" face=\"{0}\"", this.fontDialog1.Font.Name));
                            done = true;
                        }
                        else if (f.Contains(" face="))
                        {
                            int faceStart = f.IndexOf(" face=", StringComparison.Ordinal);
                            if (text.IndexOf('"', faceStart + " face=".Length + 1) > 0)
                            {
                                end = text.IndexOf('"', faceStart + " face=".Length + 1);
                            }

                            text = text.Substring(0, faceStart) + string.Format(" face=\"{0}", this.fontDialog1.Font.Name) + text.Substring(end);
                            done = true;
                        }
                    }
                }

                if (!done)
                {
                    text = string.Format("<font face=\"{0}\">{1}</font>", this.fontDialog1.Font.Name, text);
                }

                tb.SelectedText = text;
                tb.SelectionStart = selectionStart;
                tb.SelectionLength = text.Length;
            }
        }

        /// <summary>
        /// The set subtitle.
        /// </summary>
        /// <param name="subtitle">
        /// The subtitle.
        /// </param>
        /// <param name="message">
        /// The message.
        /// </param>
        public void SetSubtitle(Subtitle subtitle, string message)
        {
            this._subtitle = subtitle;
            this.SubtitleListview1.Fill(subtitle, this._subtitleAlternate);
            this.ShowStatus(message);
        }

        /// <summary>
        /// The un dock video player.
        /// </summary>
        private void UnDockVideoPlayer()
        {
            bool firstUndock = this._videoPlayerUndocked != null && !this._videoPlayerUndocked.IsDisposed;

            this._videoPlayerUndocked = new VideoPlayerUndocked(this, this.mediaPlayer);

            if (firstUndock)
            {
                Configuration.Settings.General.UndockedVideoPosition = this._videoPlayerUndocked.Left + @";" + this._videoPlayerUndocked.Top + @";" + this._videoPlayerUndocked.Width + @";" + this._videoPlayerUndocked.Height;
            }

            Control control = null;
            if (this.splitContainer1.Panel2.Controls.Count == 0)
            {
                control = this.panelVideoPlayer;
                this.groupBoxVideo.Controls.Remove(control);
            }
            else if (this.splitContainer1.Panel2.Controls.Count > 0)
            {
                control = this.panelVideoPlayer;
                this.splitContainer1.Panel2.Controls.Clear();
            }

            if (control != null)
            {
                control.Top = 0;
                control.Left = 0;
                control.Width = this._videoPlayerUndocked.PanelContainer.Width;
                control.Height = this._videoPlayerUndocked.PanelContainer.Height;
                this._videoPlayerUndocked.PanelContainer.Controls.Add(control);
            }
        }

        /// <summary>
        /// The re dock video player.
        /// </summary>
        /// <param name="control">
        /// The control.
        /// </param>
        public void ReDockVideoPlayer(Control control)
        {
            this.groupBoxVideo.Controls.Add(control);
            this.mediaPlayer.FontSizeFactor = 1.0F;
            this.mediaPlayer.SetSubtitleFont();
            this.mediaPlayer.SubtitleText = string.Empty;
        }

        /// <summary>
        /// The un dock waveform.
        /// </summary>
        private void UnDockWaveform()
        {
            this._waveformUndocked = new WaveformUndocked(this);

            var control = this.audioVisualizer;
            this.groupBoxVideo.Controls.Remove(control);
            control.Top = 0;
            control.Left = 0;
            control.Width = this._waveformUndocked.PanelContainer.Width;
            control.Height = this._waveformUndocked.PanelContainer.Height - this.panelWaveformControls.Height;
            this._waveformUndocked.PanelContainer.Controls.Add(control);

            var control2 = (Control)this.panelWaveformControls;
            this.groupBoxVideo.Controls.Remove(control2);
            control2.Top = control.Height;
            control2.Left = 0;
            this._waveformUndocked.PanelContainer.Controls.Add(control2);

            var control3 = (Control)this.trackBarWaveformPosition;
            this.groupBoxVideo.Controls.Remove(control3);
            control3.Top = control.Height;
            control3.Left = control2.Width + 2;
            control3.Width = this._waveformUndocked.PanelContainer.Width - control3.Left;
            this._waveformUndocked.PanelContainer.Controls.Add(control3);
        }

        /// <summary>
        /// The re dock waveform.
        /// </summary>
        /// <param name="waveform">
        /// The waveform.
        /// </param>
        /// <param name="buttons">
        /// The buttons.
        /// </param>
        /// <param name="trackBar">
        /// The track bar.
        /// </param>
        public void ReDockWaveform(Control waveform, Control buttons, Control trackBar)
        {
            this.groupBoxVideo.Controls.Add(waveform);
            waveform.Top = 30;
            waveform.Height = this.groupBoxVideo.Height - (waveform.Top + buttons.Height + 10);

            this.groupBoxVideo.Controls.Add(buttons);
            buttons.Top = waveform.Top + waveform.Height + 5;

            this.groupBoxVideo.Controls.Add(trackBar);
            trackBar.Top = buttons.Top;
        }

        /// <summary>
        /// The un dock video buttons.
        /// </summary>
        private void UnDockVideoButtons()
        {
            this._videoControlsUndocked = new VideoControlsUndocked(this);
            var control = this.tabControlButtons;
            this.groupBoxVideo.Controls.Remove(control);
            control.Top = 25;
            control.Left = 0;
            this._videoControlsUndocked.PanelContainer.Controls.Add(control);

            this.groupBoxVideo.Controls.Remove(this.checkBoxSyncListViewWithVideoWhilePlaying);
            this._videoControlsUndocked.PanelContainer.Controls.Add(this.checkBoxSyncListViewWithVideoWhilePlaying);
            this.checkBoxSyncListViewWithVideoWhilePlaying.Top = 5;
            this.checkBoxSyncListViewWithVideoWhilePlaying.Left = 5;

            this.splitContainerMain.Panel2Collapsed = true;
            this.splitContainer1.Panel2Collapsed = true;
        }

        /// <summary>
        /// The re dock video buttons.
        /// </summary>
        /// <param name="videoButtons">
        /// The video buttons.
        /// </param>
        /// <param name="checkBoxSyncSubWithVideo">
        /// The check box sync sub with video.
        /// </param>
        public void ReDockVideoButtons(Control videoButtons, Control checkBoxSyncSubWithVideo)
        {
            this.groupBoxVideo.Controls.Add(videoButtons);
            videoButtons.Top = 12;
            videoButtons.Left = 5;

            this.groupBoxVideo.Controls.Add(checkBoxSyncSubWithVideo);
            checkBoxSyncSubWithVideo.Top = 11;
            checkBoxSyncSubWithVideo.Left = videoButtons.Left + videoButtons.Width + 5;
        }

        /// <summary>
        /// The undock video controls tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void UndockVideoControlsToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (Configuration.Settings.General.Undocked)
            {
                return;
            }

            Configuration.Settings.General.Undocked = true;

            this.UnDockVideoPlayer();
            this.splitContainerListViewAndText.SplitterDistance = this.splitContainerListViewAndText.Height - 109;
            if (this.toolStripButtonToggleVideo.Checked)
            {
                this._videoPlayerUndocked.Show(this);
                if (this._videoPlayerUndocked.Top < -999 || this._videoPlayerUndocked.Left < -999)
                {
                    this._videoPlayerUndocked.WindowState = FormWindowState.Minimized;
                    this._videoPlayerUndocked.Top = this.Top + 40;
                    this._videoPlayerUndocked.Left = Math.Abs(this.Left - 20);
                    this._videoPlayerUndocked.Width = 600;
                    this._videoPlayerUndocked.Height = 400;
                }
            }

            this.UnDockWaveform();
            if (this.toolStripButtonToggleWaveform.Checked)
            {
                this._waveformUndocked.Show(this);
                if (this._waveformUndocked.Top < -999 || this._waveformUndocked.Left < -999)
                {
                    this._waveformUndocked.WindowState = FormWindowState.Minimized;
                    this._waveformUndocked.Top = this.Top + 60;
                    this._waveformUndocked.Left = Math.Abs(this.Left - 15);
                    this._waveformUndocked.Width = 600;
                    this._waveformUndocked.Height = 200;
                }
            }

            this.UnDockVideoButtons();
            this._videoControlsUndocked.Show(this);
            if (this._videoControlsUndocked.Top < -999 || this._videoControlsUndocked.Left < -999)
            {
                this._videoControlsUndocked.WindowState = FormWindowState.Minimized;
                this._videoControlsUndocked.Top = this.Top + 40;
                this._videoControlsUndocked.Left = Math.Abs(this.Left - 10);
                this._videoControlsUndocked.Width = this.tabControlButtons.Width + 20;
                this._videoControlsUndocked.Height = this.tabControlButtons.Height + 65;
            }

            this._isVideoControlsUndocked = true;
            this.SetUndockedWindowsTitle();

            this.undockVideoControlsToolStripMenuItem.Visible = false;
            this.redockVideoControlsToolStripMenuItem.Visible = true;

            this.tabControl1_SelectedIndexChanged(null, null);
        }

        /// <summary>
        /// The redock video controls tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        public void RedockVideoControlsToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (!Configuration.Settings.General.Undocked)
            {
                return;
            }

            this.mediaPlayer.ShowNonFullScreenControls();

            this.SaveUndockedPositions();

            Configuration.Settings.General.Undocked = false;

            if (this._videoControlsUndocked != null && !this._videoControlsUndocked.IsDisposed)
            {
                var control = this._videoControlsUndocked.PanelContainer.Controls[0];
                var controlCheckBox = this._videoControlsUndocked.PanelContainer.Controls[1];
                this._videoControlsUndocked.PanelContainer.Controls.Clear();
                this.ReDockVideoButtons(control, controlCheckBox);
                this._videoControlsUndocked.Close();
                this._videoControlsUndocked = null;
            }

            if (this._waveformUndocked != null && !this._waveformUndocked.IsDisposed)
            {
                var controlWaveform = this._waveformUndocked.PanelContainer.Controls[0];
                var controlButtons = this._waveformUndocked.PanelContainer.Controls[1];
                var controlTrackBar = this._waveformUndocked.PanelContainer.Controls[2];
                this._waveformUndocked.PanelContainer.Controls.Clear();
                this.ReDockWaveform(controlWaveform, controlButtons, controlTrackBar);
                this._waveformUndocked.Close();
                this._waveformUndocked = null;
            }

            if (this._videoPlayerUndocked != null && !this._videoPlayerUndocked.IsDisposed)
            {
                var control = this._videoPlayerUndocked.PanelContainer.Controls[0];
                this._videoPlayerUndocked.PanelContainer.Controls.Remove(control);
                this.ReDockVideoPlayer(control);
                this._videoPlayerUndocked.Close();
                this._videoPlayerUndocked = null;
                this.mediaPlayer.ShowFullscreenButton = Configuration.Settings.General.VideoPlayerShowFullscreenButton;
            }

            this._isVideoControlsUndocked = false;
            this._videoPlayerUndocked = null;
            this._waveformUndocked = null;
            this._videoControlsUndocked = null;
            this.ShowVideoPlayer();

            this.audioVisualizer.Visible = this.toolStripButtonToggleWaveform.Checked;
            this.trackBarWaveformPosition.Visible = this.toolStripButtonToggleWaveform.Checked;
            this.panelWaveformControls.Visible = this.toolStripButtonToggleWaveform.Checked;
            if (!this.toolStripButtonToggleVideo.Checked)
            {
                this.HideVideoPlayer();
            }

            this.mediaPlayer.Invalidate();
            this.Refresh();

            this.undockVideoControlsToolStripMenuItem.Visible = true;
            this.redockVideoControlsToolStripMenuItem.Visible = false;
        }

        /// <summary>
        /// The set waveform toggle off.
        /// </summary>
        internal void SetWaveformToggleOff()
        {
            this.toolStripButtonToggleWaveform.Checked = false;
        }

        /// <summary>
        /// The set video player toggle off.
        /// </summary>
        internal void SetVideoPlayerToggleOff()
        {
            this.toolStripButtonToggleVideo.Checked = false;
        }

        /// <summary>
        /// The tool strip menu item insert subtitle click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemInsertSubtitleClick(object sender, EventArgs e)
        {
            this.openFileDialog1.Title = this._languageGeneral.OpenSubtitle;
            this.openFileDialog1.FileName = string.Empty;
            this.openFileDialog1.Filter = Utilities.GetOpenDialogFilter();
            if (this.openFileDialog1.ShowDialog(this) == DialogResult.OK)
            {
                if (!File.Exists(this.openFileDialog1.FileName))
                {
                    return;
                }

                var fi = new FileInfo(this.openFileDialog1.FileName);
                if (fi.Length > 1024 * 1024 * 10)
                {
                    // max 10 mb
                    var text = string.Format(this._language.FileXIsLargerThan10MB + Environment.NewLine + Environment.NewLine + this._language.ContinueAnyway, this.openFileDialog1.FileName);
                    if (MessageBox.Show(this, text, this.Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                    {
                        return;
                    }
                }

                this.MakeHistoryForUndo(string.Format(this._language.BeforeInsertLine, this.openFileDialog1.FileName));

                Encoding encoding;
                var subtitle = new Subtitle();
                SubtitleFormat format = subtitle.LoadSubtitle(this.openFileDialog1.FileName, out encoding, null);

                if (format != null)
                {
                    this.SaveSubtitleListviewIndices();
                    if (format.IsFrameBased)
                    {
                        subtitle.CalculateTimeCodesFromFrameNumbers(this.CurrentFrameRate);
                    }
                    else
                    {
                        subtitle.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                    }

                    if (Configuration.Settings.General.RemoveBlankLinesWhenOpening)
                    {
                        subtitle.RemoveEmptyLines();
                    }

                    int index = this.FirstSelectedIndex + 1;
                    if (index < 0)
                    {
                        index = 0;
                    }

                    foreach (var p in subtitle.Paragraphs)
                    {
                        this._subtitle.Paragraphs.Insert(index, new Paragraph(p));
                        index++;
                    }

                    if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && this._subtitleAlternate != null && this._subtitleAlternate.Paragraphs.Count > 0)
                    {
                        index = this.FirstSelectedIndex;
                        if (index < 0)
                        {
                            index = 0;
                        }

                        var current = this._subtitle.GetParagraphOrDefault(index);
                        if (current != null)
                        {
                            var original = Utilities.GetOriginalParagraph(index, current, this._subtitleAlternate.Paragraphs);
                            if (original != null)
                            {
                                index = this._subtitleAlternate.GetIndex(original);
                                foreach (var p in subtitle.Paragraphs)
                                {
                                    this._subtitleAlternate.Paragraphs.Insert(index, new Paragraph(p));
                                    index++;
                                }

                                if (subtitle.Paragraphs.Count > 0)
                                {
                                    this._subtitleAlternate.Renumber();
                                }
                            }
                        }
                    }

                    this._subtitle.Renumber();
                    this.ShowSource();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this.RestoreSubtitleListviewIndices();
                }
            }
        }

        /// <summary>
        /// The insert line tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void InsertLineToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (this._subtitle == null || this._subtitle.Paragraphs.Count == 0)
            {
                this.InsertBefore();
            }
            else
            {
                this.SubtitleListview1.SelectIndexAndEnsureVisible(this._subtitle.Paragraphs.Count - 1);
                this.InsertAfter();
                this.SubtitleListview1.SelectIndexAndEnsureVisible(this._subtitle.Paragraphs.Count - 1);
            }
        }

        /// <summary>
        /// The close video tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void CloseVideoToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.timer1.Stop();
            if (this.mediaPlayer.VideoPlayer != null)
            {
                this.mediaPlayer.SubtitleText = string.Empty;
                this.mediaPlayer.VideoPlayer.DisposeVideoPlayer();
            }

            this.mediaPlayer.SetPlayerName(string.Empty);
            this.mediaPlayer.ResetTimeLabel();
            this.mediaPlayer.VideoPlayer = null;
            this._videoFileName = null;
            this._videoInfo = null;
            this._videoAudioTrackNumber = -1;
            this.labelVideoInfo.Text = this._languageGeneral.NoVideoLoaded;
            this.audioVisualizer.WavePeaks = null;
            this.audioVisualizer.ResetSpectrogram();
            this.audioVisualizer.Invalidate();
        }

        /// <summary>
        /// The tool strip menu item video drop down opening.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemVideoDropDownOpening(object sender, EventArgs e)
        {
            if (this._isVideoControlsUndocked)
            {
                this.redockVideoControlsToolStripMenuItem.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainVideoToggleVideoControls);
                this.undockVideoControlsToolStripMenuItem.ShortcutKeys = Keys.None;
            }
            else
            {
                this.undockVideoControlsToolStripMenuItem.ShortcutKeys = Utilities.GetKeys(Configuration.Settings.Shortcuts.MainVideoToggleVideoControls);
                this.redockVideoControlsToolStripMenuItem.ShortcutKeys = Keys.None;
            }

            this.closeVideoToolStripMenuItem.Visible = !string.IsNullOrEmpty(this._videoFileName);
            this.setVideoOffsetToolStripMenuItem.Visible = !string.IsNullOrEmpty(this._videoFileName) && Configuration.Settings.General.ShowBetaStuff;

            this.toolStripMenuItemSetAudioTrack.Visible = false;
            var libVlc = this.mediaPlayer.VideoPlayer as LibVlcDynamic;
            if (libVlc != null)
            {
                int numberOfTracks = libVlc.AudioTrackCount;
                this._videoAudioTrackNumber = libVlc.AudioTrackNumber;
                if (numberOfTracks > 1)
                {
                    this.toolStripMenuItemSetAudioTrack.DropDownItems.Clear();
                    for (int i = 0; i < numberOfTracks; i++)
                    {
                        this.toolStripMenuItemSetAudioTrack.DropDownItems.Add((i + 1).ToString(CultureInfo.InvariantCulture), null, this.ChooseAudioTrack);
                        if (i == this._videoAudioTrackNumber)
                        {
                            this.toolStripMenuItemSetAudioTrack.DropDownItems[this.toolStripMenuItemSetAudioTrack.DropDownItems.Count - 1].Select();
                        }
                    }

                    this.toolStripMenuItemSetAudioTrack.Visible = true;
                }
            }

            if (this.mediaPlayer.VideoPlayer != null && this.audioVisualizer != null && this.audioVisualizer.WavePeaks != null && this.audioVisualizer.WavePeaks.AllSamples.Count > 0)
            {
                this.toolStripMenuItemImportSceneChanges.Visible = true;
                this.toolStripMenuItemRemoveSceneChanges.Visible = this.audioVisualizer.SceneChanges.Count > 0;
            }
            else
            {
                this.toolStripMenuItemImportSceneChanges.Visible = false;
                this.toolStripMenuItemRemoveSceneChanges.Visible = false;
            }
        }

        /// <summary>
        /// The choose audio track.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ChooseAudioTrack(object sender, EventArgs e)
        {
            var libVlc = this.mediaPlayer.VideoPlayer as LibVlcDynamic;
            if (libVlc != null)
            {
                var item = sender as ToolStripItem;

                int number = int.Parse(item.Text);
                number--;
                libVlc.AudioTrackNumber = number;
                this._videoAudioTrackNumber = number;
            }
        }

        /// <summary>
        /// The text box list view text alternate_ text changed.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void textBoxListViewTextAlternate_TextChanged(object sender, EventArgs e)
        {
            if (this._subtitleAlternate == null || this._subtitleAlternate.Paragraphs.Count < 1)
            {
                return;
            }

            if (this._subtitleListViewIndex >= 0)
            {
                var original = Utilities.GetOriginalParagraph(this._subtitleListViewIndex, this._subtitle.Paragraphs[this._subtitleListViewIndex], this._subtitleAlternate.Paragraphs);
                if (original != null)
                {
                    string text = this.textBoxListViewTextAlternate.Text.TrimEnd();

                    // update _subtitle + listview
                    original.Text = text;
                    this.UpdateListViewTextInfo(this.labelTextAlternateLineLengths, this.labelAlternateSingleLine, this.labelTextAlternateLineTotal, this.labelAlternateCharactersPerSecond, original, this.textBoxListViewTextAlternate);
                    this.SubtitleListview1.SetAlternateText(this._subtitleListViewIndex, text);
                }
            }
        }

        /// <summary>
        /// The text box list view text alternate key down.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void TextBoxListViewTextAlternateKeyDown(object sender, KeyEventArgs e)
        {
            this._listViewAlternateTextTicks = DateTime.Now.Ticks;
            if (this._subtitleAlternate == null || this._subtitleAlternate.Paragraphs.Count < 1)
            {
                return;
            }

            int numberOfLines = Utilities.GetNumberOfLines(this.textBoxListViewTextAlternate.Text);

            // Utilities.CheckAutoWrap(textBoxListViewTextAlternate, e, numberOfNewLines);
            if (e.KeyCode == Keys.Enter && e.Modifiers == Keys.None && numberOfLines > Configuration.Settings.Tools.ListViewSyntaxMoreThanXLinesX)
            {
                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == this._mainTextBoxAutoBreak)
            {
                if (this.textBoxListViewTextAlternate.Text.Length > 0)
                {
                    this.textBoxListViewTextAlternate.Text = Utilities.AutoBreakLine(this.textBoxListViewTextAlternate.Text);
                }

                e.SuppressKeyPress = true;
            }
            else if (e.KeyData == this._mainTextBoxUnbreak)
            {
                this.textBoxListViewTextAlternate.Text = Utilities.UnbreakLine(this.textBoxListViewTextAlternate.Text);
                e.SuppressKeyPress = true;
            }
            else if (e.Modifiers == Keys.Alt && e.KeyCode == Keys.I)
            {
                if (this.textBoxListViewTextAlternate.SelectionLength == 0)
                {
                    if (this.textBoxListViewTextAlternate.Text.Contains("<i>"))
                    {
                        this.textBoxListViewTextAlternate.Text = HtmlUtil.RemoveOpenCloseTags(this.textBoxListViewTextAlternate.Text, HtmlUtil.TagItalic);
                    }
                    else
                    {
                        this.textBoxListViewTextAlternate.Text = string.Format("<i>{0}</i>", this.textBoxListViewTextAlternate.Text);
                    }
                }
                else
                {
                    this.TextBoxListViewToggleTag("i");
                }
            }

            if (e.Modifiers == Keys.Control && e.KeyCode == Keys.D)
            {
                this.textBoxListViewTextAlternate.SelectionLength = 0;
                e.SuppressKeyPress = true;
            }
            else if (this._mainTextBoxSelectionToLower == e.KeyData)
            {
                // selection to lowercase
                if (this.textBoxListViewTextAlternate.SelectionLength > 0)
                {
                    int start = this.textBoxListViewTextAlternate.SelectionStart;
                    int length = this.textBoxListViewTextAlternate.SelectionLength;
                    this.textBoxListViewTextAlternate.SelectedText = this.textBoxListViewTextAlternate.SelectedText.ToLower();
                    this.textBoxListViewTextAlternate.SelectionStart = start;
                    this.textBoxListViewTextAlternate.SelectionLength = length;
                    e.SuppressKeyPress = true;
                }
            }
            else if (this._mainTextBoxSelectionToUpper == e.KeyData)
            {
                // selection to uppercase
                if (this.textBoxListViewTextAlternate.SelectionLength > 0)
                {
                    int start = this.textBoxListViewTextAlternate.SelectionStart;
                    int length = this.textBoxListViewTextAlternate.SelectionLength;
                    this.textBoxListViewTextAlternate.SelectedText = this.textBoxListViewTextAlternate.SelectedText.ToUpper();
                    this.textBoxListViewTextAlternate.SelectionStart = start;
                    this.textBoxListViewTextAlternate.SelectionLength = length;
                    e.SuppressKeyPress = true;
                }
            }

            // last key down in text
            this._lastTextKeyDownTicks = DateTime.Now.Ticks;

            this.UpdatePositionAndTotalLength(this.labelTextAlternateLineTotal, this.textBoxListViewTextAlternate);
        }

        /// <summary>
        /// The open original tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void OpenOriginalToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.OpenAlternateSubtitle();
        }

        /// <summary>
        /// The save original astool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void SaveOriginalAstoolStripMenuItemClick(object sender, EventArgs e)
        {
            SubtitleFormat currentFormat = this.GetCurrentSubtitleFormat();
            Utilities.SetSaveDialogFilter(this.saveFileDialog1, currentFormat);

            this.saveFileDialog1.Title = this._language.SaveOriginalSubtitleAs;
            this.saveFileDialog1.DefaultExt = "*" + currentFormat.Extension;
            this.saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(this._videoFileName))
            {
                this.saveFileDialog1.FileName = Path.GetFileNameWithoutExtension(this._videoFileName);
            }
            else
            {
                this.saveFileDialog1.FileName = Path.GetFileNameWithoutExtension(this._subtitleAlternateFileName);
            }

            if (!string.IsNullOrEmpty(this.openFileDialog1.InitialDirectory))
            {
                this.saveFileDialog1.InitialDirectory = this.openFileDialog1.InitialDirectory;
            }

            DialogResult result = this.saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                this._subtitleAlternateFileName = this.saveFileDialog1.FileName;
                this.SaveOriginalSubtitle(this.GetCurrentSubtitleFormat());
                Configuration.Settings.RecentFiles.Add(this._fileName, this.FirstVisibleIndex, this.FirstSelectedIndex, this._videoFileName, this._subtitleAlternateFileName);
            }
        }

        /// <summary>
        /// The save original tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void SaveOriginalToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(this._subtitleAlternateFileName))
            {
                this.SaveOriginalAstoolStripMenuItemClick(null, null);
                return;
            }

            try
            {
                this.SaveOriginalSubtitle(this.GetCurrentSubtitleFormat());
            }
            catch
            {
                MessageBox.Show(string.Format(this._language.UnableToSaveSubtitleX, this._subtitleAlternateFileName));
            }
        }

        /// <summary>
        /// The remove original tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void RemoveOriginalToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (this.ContinueNewOrExitAlternate())
            {
                this.RemoveAlternate(true);
            }
        }

        /// <summary>
        /// The remove alternate.
        /// </summary>
        /// <param name="removeFromListView">
        /// The remove from list view.
        /// </param>
        private void RemoveAlternate(bool removeFromListView)
        {
            if (removeFromListView)
            {
                this.SubtitleListview1.HideAlternateTextColumn();
                this.SubtitleListview1.AutoSizeAllColumns(this);
                this._subtitleAlternate = new Subtitle();
                this._subtitleAlternateFileName = null;

                if (this._fileName != null)
                {
                    Configuration.Settings.RecentFiles.Add(this._fileName, this.FirstVisibleIndex, this.FirstSelectedIndex, this._videoFileName, this._subtitleAlternateFileName);
                    Configuration.Settings.Save();
                    this.UpdateRecentFilesUI();
                }
            }

            this.buttonUnBreak.Visible = true;
            this.buttonAutoBreak.Visible = true;
            this.textBoxListViewTextAlternate.Visible = false;
            this.labelAlternateText.Visible = false;
            this.labelAlternateCharactersPerSecond.Visible = false;
            this.labelTextAlternateLineLengths.Visible = false;
            this.labelAlternateSingleLine.Visible = false;
            this.labelTextAlternateLineTotal.Visible = false;
            this.textBoxListViewText.Width = this.groupBoxEdit.Width - (this.textBoxListViewText.Left + 8 + this.buttonUnBreak.Width);
            this.textBoxListViewText.Anchor = AnchorStyles.Left | AnchorStyles.Top | AnchorStyles.Right | AnchorStyles.Bottom;

            this.labelCharactersPerSecond.Left = this.textBoxListViewText.Left + (this.textBoxListViewText.Width - this.labelCharactersPerSecond.Width);
            this.labelTextLineTotal.Left = this.textBoxListViewText.Left + (this.textBoxListViewText.Width - this.labelTextLineTotal.Width);

            this.SetTitle();
        }

        /// <summary>
        /// The tool strip menu item spell check main drop down opening.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemSpellCheckMainDropDownOpening(object sender, EventArgs e)
        {
            // toolStripSeparator9.Visible = true;
            // GetDictionariesToolStripMenuItem.Visible = true;
            this.addWordToNamesetcListToolStripMenuItem.Visible = true;
        }

        /// <summary>
        /// The tool strip menu item play rate slow click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemPlayRateSlowClick(object sender, EventArgs e)
        {
            if (this.mediaPlayer.VideoPlayer != null)
            {
                this.toolStripMenuItemPlayRateSlow.Checked = true;
                this.toolStripMenuItemPlayRateNormal.Checked = false;
                this.toolStripMenuItemPlayRateFast.Checked = false;
                this.toolStripMenuItemPlayRateVeryFast.Checked = false;
                this.mediaPlayer.VideoPlayer.PlayRate = 0.8;
                this.toolStripSplitButtonPlayRate.Image = this.imageListPlayRate.Images[1];
            }
        }

        /// <summary>
        /// The tool strip menu item play rate normal click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemPlayRateNormalClick(object sender, EventArgs e)
        {
            if (this.mediaPlayer.VideoPlayer != null)
            {
                this.toolStripMenuItemPlayRateSlow.Checked = false;
                this.toolStripMenuItemPlayRateNormal.Checked = true;
                this.toolStripMenuItemPlayRateFast.Checked = false;
                this.toolStripMenuItemPlayRateVeryFast.Checked = false;
                this.mediaPlayer.VideoPlayer.PlayRate = 1.0;
                this.toolStripSplitButtonPlayRate.Image = this.imageListPlayRate.Images[0];
            }
        }

        /// <summary>
        /// The tool strip menu item play rate fast click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemPlayRateFastClick(object sender, EventArgs e)
        {
            if (this.mediaPlayer.VideoPlayer != null)
            {
                this.toolStripMenuItemPlayRateSlow.Checked = false;
                this.toolStripMenuItemPlayRateNormal.Checked = false;
                this.toolStripMenuItemPlayRateFast.Checked = true;
                this.toolStripMenuItemPlayRateVeryFast.Checked = false;
                this.mediaPlayer.VideoPlayer.PlayRate = 1.2;
                this.toolStripSplitButtonPlayRate.Image = this.imageListPlayRate.Images[1];
            }
        }

        /// <summary>
        /// The very fast tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void VeryFastToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (this.mediaPlayer.VideoPlayer != null)
            {
                this.toolStripMenuItemPlayRateSlow.Checked = false;
                this.toolStripMenuItemPlayRateNormal.Checked = false;
                this.toolStripMenuItemPlayRateFast.Checked = false;
                this.toolStripMenuItemPlayRateVeryFast.Checked = true;
                this.mediaPlayer.VideoPlayer.PlayRate = 1.6;
                this.toolStripSplitButtonPlayRate.Image = this.imageListPlayRate.Images[1];
            }
        }

        /// <summary>
        /// The split container 1 splitter moved.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void SplitContainer1SplitterMoved(object sender, SplitterEventArgs e)
        {
            this.Main_Resize(null, null);
        }

        /// <summary>
        /// The button split line click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ButtonSplitLineClick(object sender, EventArgs e)
        {
            this.SplitSelectedParagraph(null, null);
        }

        /// <summary>
        /// The tool strip menu item copy source text click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemCopySourceTextClick(object sender, EventArgs e)
        {
            var selectedLines = new Subtitle(this._subtitle);
            selectedLines.Paragraphs.Clear();
            foreach (int index in this.SubtitleListview1.SelectedIndices)
            {
                selectedLines.Paragraphs.Add(this._subtitle.Paragraphs[index]);
            }

            Clipboard.SetText(selectedLines.ToText(this.GetCurrentSubtitleFormat()));
        }

        /// <summary>
        /// The play pause.
        /// </summary>
        public void PlayPause()
        {
            this.mediaPlayer.TogglePlayPause();
        }

        /// <summary>
        /// The set current via end position and goto next.
        /// </summary>
        /// <param name="index">
        /// The index.
        /// </param>
        public void SetCurrentViaEndPositionAndGotoNext(int index)
        {
            var p = this._subtitle.GetParagraphOrDefault(index);
            if (p == null)
            {
                return;
            }

            if (this.mediaPlayer.VideoPlayer == null || string.IsNullOrEmpty(this._videoFileName))
            {
                MessageBox.Show(this._languageGeneral.NoVideoLoaded);
                return;
            }

            // if (autoDuration)
            // {
            // // TODO: auto duration
            // // TODO: Search for start via wave file (must only be minor adjustment)
            // }

            // current movie Position
            double durationTotalMilliseconds = p.Duration.TotalMilliseconds;
            double totalMillisecondsEnd = this.mediaPlayer.CurrentPosition * TimeCode.BaseUnit;

            var tc = new TimeCode(totalMillisecondsEnd - durationTotalMilliseconds);
            this.MakeHistoryForUndo(this._language.BeforeSetEndAndVideoPosition + "  " + tc);
            this._makeHistoryPaused = true;

            if (p.StartTime.IsMaxTime)
            {
                p.EndTime.TotalSeconds = this.mediaPlayer.CurrentPosition;
                p.StartTime.TotalMilliseconds = p.EndTime.TotalMilliseconds - Utilities.GetOptimalDisplayMilliseconds(p.Text);
            }
            else
            {
                p.StartTime.TotalMilliseconds = totalMillisecondsEnd - durationTotalMilliseconds;
                p.EndTime.TotalMilliseconds = totalMillisecondsEnd;
            }

            this.timeUpDownStartTime.TimeCode = p.StartTime;
            var durationInSeconds = (decimal)p.Duration.TotalSeconds;
            if (durationInSeconds >= this.numericUpDownDuration.Minimum && durationInSeconds <= this.numericUpDownDuration.Maximum)
            {
                this.SetDurationInSeconds((double)durationInSeconds);
            }

            this.SubtitleListview1.SelectIndexAndEnsureVisible(index + 1);
            this.ShowStatus(string.Format(this._language.VideoControls.AdjustedViaEndTime, p.StartTime.ToShortString()));
            this.audioVisualizer.Invalidate();
            this._makeHistoryPaused = false;
        }

        /// <summary>
        /// The set current start auto duration and goto next.
        /// </summary>
        /// <param name="index">
        /// The index.
        /// </param>
        public void SetCurrentStartAutoDurationAndGotoNext(int index)
        {
            var prev = this._subtitle.GetParagraphOrDefault(index - 1);
            var p = this._subtitle.GetParagraphOrDefault(index);
            if (p == null)
            {
                return;
            }

            if (this.mediaPlayer.VideoPlayer == null || string.IsNullOrEmpty(this._videoFileName))
            {
                MessageBox.Show(this._languageGeneral.NoVideoLoaded);
                return;
            }

            this.MakeHistoryForUndoOnlyIfNotResent(string.Format(this._language.VideoControls.BeforeChangingTimeInWaveformX, "#" + p.Number + " " + p.Text));

            this.timeUpDownStartTime.MaskedTextBox.TextChanged -= this.MaskedTextBoxTextChanged;
            var oldParagraph = new Paragraph(this._subtitle.Paragraphs[index]);
            double videoPosition = this.mediaPlayer.CurrentPosition;
            if (!this.mediaPlayer.IsPaused)
            {
                videoPosition -= Configuration.Settings.General.SetStartEndHumanDelay / TimeCode.BaseUnit;
            }

            this.timeUpDownStartTime.TimeCode = TimeCode.FromSeconds(videoPosition);

            double duration = Utilities.GetOptimalDisplayMilliseconds(this.textBoxListViewText.Text);

            this._subtitle.Paragraphs[index].StartTime.TotalMilliseconds = TimeSpan.FromSeconds(videoPosition).TotalMilliseconds;
            if (prev != null && prev.EndTime.TotalMilliseconds > this._subtitle.Paragraphs[index].StartTime.TotalMilliseconds)
            {
                int minDiff = Configuration.Settings.General.MinimumMillisecondsBetweenLines + 1;
                if (minDiff < 1)
                {
                    minDiff = 1;
                }

                prev.EndTime.TotalMilliseconds = this._subtitle.Paragraphs[index].StartTime.TotalMilliseconds - minDiff;
            }

            this._subtitle.Paragraphs[index].EndTime.TotalMilliseconds = this._subtitle.Paragraphs[index].StartTime.TotalMilliseconds + duration;
            this.SubtitleListview1.SetStartTimeAndDuration(index, this._subtitle.Paragraphs[index]);
            this.timeUpDownStartTime.TimeCode = this._subtitle.Paragraphs[index].StartTime;
            this.timeUpDownStartTime.MaskedTextBox.TextChanged += this.MaskedTextBoxTextChanged;
            this.UpdateOriginalTimeCodes(oldParagraph);
            this._subtitleListViewIndex = -1;
            this.SubtitleListview1.SelectIndexAndEnsureVisible(index + 1);
            this.audioVisualizer.Invalidate();
        }

        /// <summary>
        /// The set current end next start and go to next.
        /// </summary>
        /// <param name="index">
        /// The index.
        /// </param>
        public void SetCurrentEndNextStartAndGoToNext(int index)
        {
            var p = this._subtitle.GetParagraphOrDefault(index);
            var next = this._subtitle.GetParagraphOrDefault(index + 1);
            if (p == null)
            {
                return;
            }

            if (this.mediaPlayer.VideoPlayer == null || string.IsNullOrEmpty(this._videoFileName))
            {
                MessageBox.Show(this._languageGeneral.NoVideoLoaded);
                return;
            }

            this.MakeHistoryForUndoOnlyIfNotResent(string.Format(this._language.VideoControls.BeforeChangingTimeInWaveformX, "#" + p.Number + " " + p.Text));

            double videoPosition = this.mediaPlayer.CurrentPosition;
            if (!this.mediaPlayer.IsPaused)
            {
                videoPosition -= Configuration.Settings.General.SetStartEndHumanDelay / TimeCode.BaseUnit;
            }

            p.EndTime = TimeCode.FromSeconds(videoPosition);
            if (p.StartTime.IsMaxTime)
            {
                this.timeUpDownStartTime.MaskedTextBox.TextChanged -= this.MaskedTextBoxTextChanged;
                p.StartTime.TotalMilliseconds = p.EndTime.TotalMilliseconds - Utilities.GetOptimalDisplayMilliseconds(p.Text);
                if (p.StartTime.TotalMilliseconds < 0)
                {
                    p.StartTime.TotalMilliseconds = 0;
                }

                this.timeUpDownStartTime.TimeCode = p.StartTime;
                this.SubtitleListview1.SetStartTime(index, p);
                this.timeUpDownStartTime.MaskedTextBox.TextChanged += this.MaskedTextBoxTextChanged;
            }

            if (p.Duration.TotalSeconds < 0 || p.Duration.TotalSeconds > 10)
            {
                p.EndTime.TotalMilliseconds = p.StartTime.TotalMilliseconds + Utilities.GetOptimalDisplayMilliseconds(p.Text);
            }

            this.SubtitleListview1.SetStartTimeAndDuration(index, p);

            this.SetDurationInSeconds(this._subtitle.Paragraphs[index].Duration.TotalSeconds + 0.001);
            if (next != null)
            {
                int addMilliseconds = Configuration.Settings.General.MinimumMillisecondsBetweenLines;
                if (addMilliseconds < 1 || addMilliseconds > 500)
                {
                    addMilliseconds = 1;
                }

                var oldDuration = next.Duration.TotalMilliseconds;
                if (next.StartTime.IsMaxTime || next.EndTime.IsMaxTime)
                {
                    oldDuration = Utilities.GetOptimalDisplayMilliseconds(p.Text);
                }

                next.StartTime.TotalMilliseconds = p.EndTime.TotalMilliseconds + addMilliseconds;
                next.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds + oldDuration;
                this.SubtitleListview1.SelectIndexAndEnsureVisible(index + 1);
            }

            this.audioVisualizer.Invalidate();
        }

        /// <summary>
        /// The edit select all tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void EditSelectAllToolStripMenuItemClick(object sender, EventArgs e)
        {
            for (int i = 0; i < this.SubtitleListview1.Items.Count; i++)
            {
                this.SubtitleListview1.Items[i].Selected = true;
            }
        }

        /// <summary>
        /// The tool strip menu item split text at cursor click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemSplitTextAtCursorClick(object sender, EventArgs e)
        {
            TextBox tb = this.textBoxListViewText;
            if (this.textBoxListViewTextAlternate.Focused)
            {
                tb = this.textBoxListViewTextAlternate;
            }

            int? pos = null;
            if (tb.SelectionStart > 2 && tb.SelectionStart < tb.Text.Length - 2)
            {
                pos = tb.SelectionStart;
            }

            this.SplitSelectedParagraph(null, pos);
            tb.Focus();
            tb.SelectionStart = tb.Text.Length;
        }

        /// <summary>
        /// The context menu strip text box list view opening.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ContextMenuStripTextBoxListViewOpening(object sender, CancelEventArgs e)
        {
            TextBox tb = this.textBoxListViewText;
            if (this.textBoxListViewTextAlternate.Focused)
            {
                tb = this.textBoxListViewTextAlternate;
            }

            this.toolStripMenuItemSplitTextAtCursor.Visible = tb.Text.Length > 5 && tb.SelectionStart > 2 && tb.SelectionStart < tb.Text.Length - 2;

            if (this.IsUnicode)
            {
                if (this.toolStripMenuItemInsertUnicodeSymbol.DropDownItems.Count == 0)
                {
                    foreach (var s in Configuration.Settings.Tools.UnicodeSymbolsToInsert.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries))
                    {
                        this.toolStripMenuItemInsertUnicodeSymbol.DropDownItems.Add(s, null, this.InsertUnicodeGlyph);
                        if (Environment.OSVersion.Version.Major < 6 && Configuration.Settings.General.SubtitleFontName == Utilities.WinXP2KUnicodeFontName)
                        {
                            // 6 == Vista/Win2008Server/Win7
                            this.toolStripMenuItemInsertUnicodeSymbol.DropDownItems[this.toolStripMenuItemInsertUnicodeSymbol.DropDownItems.Count - 1].Font = new Font(Utilities.WinXP2KUnicodeFontName, this.toolStripMenuItemInsertUnicodeSymbol.Font.Size);
                        }
                    }
                }

                this.toolStripMenuItemInsertUnicodeSymbol.Visible = this.toolStripMenuItemInsertUnicodeSymbol.DropDownItems.Count > 0;
                this.toolStripSeparator26.Visible = this.toolStripMenuItemInsertUnicodeSymbol.DropDownItems.Count > 0;

                this.superscriptToolStripMenuItem.Visible = tb.SelectionLength > 0;
                this.subscriptToolStripMenuItem.Visible = tb.SelectionLength > 0;
                this.toolStripMenuItemInsertUnicodeControlCharacters.Visible = true;
            }
            else
            {
                this.toolStripMenuItemInsertUnicodeSymbol.Visible = false;
                this.toolStripSeparator26.Visible = false;
                this.superscriptToolStripMenuItem.Visible = false;
                this.subscriptToolStripMenuItem.Visible = false;
                this.toolStripMenuItemInsertUnicodeControlCharacters.Visible = false;
            }

            var formatType = this.GetCurrentSubtitleFormat().GetType();
            if (formatType == typeof(WebVTT) && tb.SelectionLength > 0)
            {
                this.toolStripSeparatorWebVTT.Visible = true;
                this.toolStripMenuItemWebVttVoice.Visible = true;
                var voices = WebVTT.GetVoices(this._subtitle);
                this.toolStripMenuItemWebVttVoice.DropDownItems.Clear();
                foreach (var style in voices)
                {
                    this.toolStripMenuItemWebVttVoice.DropDownItems.Add(style, null, this.WebVTTSetVoiceTextBox);
                }

                this.toolStripMenuItemWebVttVoice.DropDownItems.Add(this._language.Menu.ContextMenu.WebVTTSetNewVoice, null, this.WebVTTSetNewVoiceTextBox);
            }
            else
            {
                this.toolStripSeparatorWebVTT.Visible = false;
                this.toolStripMenuItemWebVttVoice.Visible = false;
            }
        }

        /// <summary>
        /// The tool strip menu item export png xml click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemExportPngXmlClick(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(this._subtitle, this.GetCurrentSubtitleFormat(), "BDNXML", this._fileName, this._videoInfo, this._videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        /// <summary>
        /// The tab control subtitle selecting.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void TabControlSubtitleSelecting(object sender, TabControlCancelEventArgs e)
        {
            if (this.tabControlSubtitle.SelectedIndex != TabControlSourceView && this.textBoxSource.Text.Trim().Length > 1)
            {
                var currentFormat = this.GetCurrentSubtitleFormat();
                if (currentFormat != null && !currentFormat.IsTextBased)
                {
                    return;
                }

                var temp = new Subtitle(this._subtitle);
                SubtitleFormat format = temp.ReloadLoadSubtitle(new List<string>(this.textBoxSource.Lines), null);
                if (format == null)
                {
                    e.Cancel = true;
                }
            }
        }

        /// <summary>
        /// The tool strip combo box frame rate text changed.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripComboBoxFrameRateTextChanged(object sender, EventArgs e)
        {
            Configuration.Settings.General.CurrentFrameRate = this.CurrentFrameRate;
            if (this._loading)
            {
                return;
            }

            this.SubtitleListview1.UpdateFrames(this._subtitle);
        }

        /// <summary>
        /// The tool strip menu item google microsoft translate sel line click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemGoogleMicrosoftTranslateSelLineClick(object sender, EventArgs e)
        {
            int firstSelectedIndex = this.FirstSelectedIndex;
            if (firstSelectedIndex >= 0)
            {
                var p = this._subtitle.GetParagraphOrDefault(firstSelectedIndex);
                if (p != null)
                {
                    string defaultFromLanguage = Utilities.AutoDetectGoogleLanguage(this._subtitle);
                    string defaultToLanguage = defaultFromLanguage;
                    if (this._subtitleAlternate != null)
                    {
                        var o = Utilities.GetOriginalParagraph(firstSelectedIndex, p, this._subtitleAlternate.Paragraphs);
                        if (o != null)
                        {
                            p = o;
                            defaultFromLanguage = Utilities.AutoDetectGoogleLanguage(this._subtitleAlternate);
                        }
                    }

                    this.Cursor = Cursors.WaitCursor;
                    if (this._googleOrMicrosoftTranslate == null || this._googleOrMicrosoftTranslate.IsDisposed)
                    {
                        this._googleOrMicrosoftTranslate = new GoogleOrMicrosoftTranslate();
                        this._googleOrMicrosoftTranslate.InitializeFromLanguage(defaultFromLanguage, defaultToLanguage);
                    }

                    this._googleOrMicrosoftTranslate.Initialize(p);
                    this.Cursor = Cursors.Default;
                    if (this._googleOrMicrosoftTranslate.ShowDialog() == DialogResult.OK)
                    {
                        this.textBoxListViewText.Text = this._googleOrMicrosoftTranslate.TranslatedText;
                    }
                }
            }
        }

        /// <summary>
        /// The numeric up down sec 1 value changed.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void NumericUpDownSec1ValueChanged(object sender, EventArgs e)
        {
            Configuration.Settings.General.SmallDelayMilliseconds = (int)(this.numericUpDownSec1.Value * 1000);
        }

        /// <summary>
        /// The numeric up down sec 2 value changed.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void NumericUpDownSec2ValueChanged(object sender, EventArgs e)
        {
            Configuration.Settings.General.LargeDelayMilliseconds = (int)(this.numericUpDownSec2.Value * 1000);
        }

        /// <summary>
        /// The numeric up down sec adjust 1 value changed.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void NumericUpDownSecAdjust1ValueChanged(object sender, EventArgs e)
        {
            Configuration.Settings.General.SmallDelayMilliseconds = (int)(this.numericUpDownSecAdjust1.Value * 1000);
        }

        /// <summary>
        /// The numeric up down sec adjust 2 value changed.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void NumericUpDownSecAdjust2ValueChanged(object sender, EventArgs e)
        {
            Configuration.Settings.General.LargeDelayMilliseconds = (int)(this.numericUpDownSecAdjust2.Value * 1000);
        }

        /// <summary>
        /// The tool strip menu item make empty from current click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemMakeEmptyFromCurrentClick(object sender, EventArgs e)
        {
            if (this.ContinueNewOrExit())
            {
                bool isAlternateVisible = this.SubtitleListview1.IsAlternateTextColumnVisible;
                this._subtitleAlternate = new Subtitle(this._subtitle);
                this._subtitleAlternateFileName = null;
                int oldIndex = this.FirstSelectedIndex;
                if (oldIndex < 0)
                {
                    oldIndex = 0;
                }

                foreach (var p in this._subtitle.Paragraphs)
                {
                    if (Configuration.Settings.General.RemoveBlankLinesWhenOpening && string.IsNullOrEmpty(Configuration.Settings.Tools.NewEmptyTranslationText))
                    {
                        p.Text = "-";
                    }
                    else if (Configuration.Settings.Tools.NewEmptyTranslationText != null)
                    {
                        p.Text = Configuration.Settings.Tools.NewEmptyTranslationText;
                    }
                    else
                    {
                        p.Text = string.Empty;
                    }
                }

                this.SubtitleListview1.ShowAlternateTextColumn(this._languageGeneral.OriginalText);
                this._subtitleListViewIndex = -1;
                this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                this.SubtitleListview1.SelectIndexAndEnsureVisible(oldIndex);
                this.textBoxListViewText.Focus();
                Configuration.Settings.General.ShowOriginalAsPreviewIfAvailable = true;

                this._subtitleAlternateFileName = this._fileName;
                this._fileName = null;
                this.SetupAlternateEdit();
                this.ResetHistory();

                if (!isAlternateVisible)
                {
                    this.toolStripMenuItemShowOriginalInPreview.Checked = false;
                    Configuration.Settings.General.ShowOriginalAsPreviewIfAvailable = false;
                    this.audioVisualizer.Invalidate();
                }
                else if (this.toolStripMenuItemShowOriginalInPreview.Checked)
                {
                    this.toolStripMenuItemShowOriginalInPreview.Checked = false;
                    Configuration.Settings.General.ShowOriginalAsPreviewIfAvailable = false;
                    this.audioVisualizer.Invalidate();
                }
            }
        }

        /// <summary>
        /// The tool strip menu item show original in preview click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemShowOriginalInPreviewClick(object sender, EventArgs e)
        {
            this.toolStripMenuItemShowOriginalInPreview.Checked = !this.toolStripMenuItemShowOriginalInPreview.Checked;
            Configuration.Settings.General.ShowOriginalAsPreviewIfAvailable = this.toolStripMenuItemShowOriginalInPreview.Checked;
        }

        /// <summary>
        /// The tool strip menu item video drop down closed.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemVideoDropDownClosed(object sender, EventArgs e)
        {
            this.redockVideoControlsToolStripMenuItem.ShortcutKeys = Keys.None;
            this.undockVideoControlsToolStripMenuItem.ShortcutKeys = Keys.None;
        }

        /// <summary>
        /// The tools tool strip menu item drop down opening.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolsToolStripMenuItemDropDownOpening(object sender, EventArgs e)
        {
            if (this._subtitle != null && this._subtitle.Paragraphs.Count > 0 && this._networkSession == null)
            {
                this.toolStripSeparator23.Visible = true;
                this.toolStripMenuItemMakeEmptyFromCurrent.Visible = this._subtitle != null && this._subtitle.Paragraphs.Count > 0 && !this.SubtitleListview1.IsAlternateTextColumnVisible;
                this.toolStripMenuItemShowOriginalInPreview.Checked = Configuration.Settings.General.ShowOriginalAsPreviewIfAvailable;
            }
            else
            {
                this.toolStripSeparator23.Visible = false;
                this.toolStripMenuItemMakeEmptyFromCurrent.Visible = false;
                this.toolStripMenuItemShowOriginalInPreview.Checked = false;
            }

            this.styleToolStripMenuItem.Visible = this.GetCurrentSubtitleFormat().HasStyleSupport;
        }

        /// <summary>
        /// The context menu strip waveform opening.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ContextMenuStripWaveformOpening(object sender, CancelEventArgs e)
        {
            if (this.audioVisualizer.IsSpectrogramAvailable)
            {
                if (this.audioVisualizer.ShowSpectrogram && this.audioVisualizer.ShowWaveform)
                {
                    this.showWaveformAndSpectrogramToolStripMenuItem.Visible = false;
                    this.showOnlyWaveformToolStripMenuItem.Visible = true;
                    this.showOnlySpectrogramToolStripMenuItem.Visible = true;
                    this.toolStripSeparatorGuessTimeCodes.Visible = true;
                }
                else if (this.audioVisualizer.ShowSpectrogram)
                {
                    this.showWaveformAndSpectrogramToolStripMenuItem.Visible = true;
                    this.showOnlyWaveformToolStripMenuItem.Visible = true;
                    this.showOnlySpectrogramToolStripMenuItem.Visible = false;
                    this.toolStripSeparatorGuessTimeCodes.Visible = true;
                }
                else
                {
                    this.showWaveformAndSpectrogramToolStripMenuItem.Visible = true;
                    this.showOnlyWaveformToolStripMenuItem.Visible = false;
                    this.showOnlySpectrogramToolStripMenuItem.Visible = true;
                    this.toolStripSeparatorGuessTimeCodes.Visible = true;
                }
            }
            else
            {
                this.toolStripSeparator24.Visible = false;
                this.showWaveformAndSpectrogramToolStripMenuItem.Visible = false;
                this.showOnlyWaveformToolStripMenuItem.Visible = false;
                this.showOnlySpectrogramToolStripMenuItem.Visible = false;
                this.toolStripSeparatorGuessTimeCodes.Visible = false;
            }
        }

        /// <summary>
        /// The show waveform and spectrogram tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ShowWaveformAndSpectrogramToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.audioVisualizer.ShowSpectrogram = true;
            this.audioVisualizer.ShowWaveform = true;
        }

        /// <summary>
        /// The show only waveform tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ShowOnlyWaveformToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.audioVisualizer.ShowSpectrogram = false;
            this.audioVisualizer.ShowWaveform = true;
        }

        /// <summary>
        /// The show only spectrogram tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ShowOnlySpectrogramToolStripMenuItemClick(object sender, EventArgs e)
        {
            this.audioVisualizer.ShowSpectrogram = true;
            this.audioVisualizer.ShowWaveform = false;
        }

        /// <summary>
        /// The split container main splitter moved.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void SplitContainerMainSplitterMoved(object sender, SplitterEventArgs e)
        {
            this.mediaPlayer.Refresh();
        }

        /// <summary>
        /// The find double lines tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void FindDoubleLinesToolStripMenuItemClick(object sender, EventArgs e)
        {
            for (int i = this.FirstSelectedIndex + 1; i < this._subtitle.Paragraphs.Count; i++)
            {
                var current = this._subtitle.GetParagraphOrDefault(i);
                var next = this._subtitle.GetParagraphOrDefault(i + 1);
                if (current != null && next != null)
                {
                    if (current.Text.Trim().Equals(next.Text.Trim(), StringComparison.OrdinalIgnoreCase))
                    {
                        this.SubtitleListview1.SelectIndexAndEnsureVisible(i);
                        this.SubtitleListview1.Items[i + 1].Selected = true;
                        break;
                    }
                }
            }
        }

        /// <summary>
        /// The text box list view text alternate mouse move.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void TextBoxListViewTextAlternateMouseMove(object sender, MouseEventArgs e)
        {
            if (ModifierKeys == Keys.Control && MouseButtons == MouseButtons.Left)
            {
                if (!string.IsNullOrEmpty(this.textBoxListViewTextAlternate.SelectedText))
                {
                    this.textBoxListViewTextAlternate.DoDragDrop(this.textBoxListViewTextAlternate.SelectedText, DragDropEffects.Copy);
                }
                else
                {
                    this.textBoxListViewTextAlternate.DoDragDrop(this.textBoxListViewTextAlternate.Text, DragDropEffects.Copy);
                }
            }
            else if (this.AutoRepeatContinueOn && !this.textBoxSearchWord.Focused && this.textBoxListViewTextAlternate.Focused)
            {
                string selectedText = this.textBoxListViewTextAlternate.SelectedText;
                if (!string.IsNullOrEmpty(selectedText))
                {
                    selectedText = selectedText.Trim();
                    selectedText = selectedText.TrimEnd('.');
                    selectedText = selectedText.TrimEnd(',');
                    selectedText = selectedText.TrimEnd('!');
                    selectedText = selectedText.TrimEnd('?');
                    selectedText = selectedText.Trim();
                    if (!string.IsNullOrEmpty(selectedText) && selectedText != this.textBoxSearchWord.Text)
                    {
                        this.textBoxSearchWord.Text = HtmlUtil.RemoveHtmlTags(selectedText);
                    }
                }
            }
        }

        /// <summary>
        /// The e bustl tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void EBustlToolStripMenuItemClick(object sender, EventArgs e)
        {
            var ebu = new Ebu();
            this.saveFileDialog1.Filter = ebu.Name + "|*" + ebu.Extension;
            this.saveFileDialog1.Title = this._language.SaveSubtitleAs;
            this.saveFileDialog1.DefaultExt = "*" + ebu.Extension;
            this.saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(this._videoFileName))
            {
                this.saveFileDialog1.FileName = Path.GetFileNameWithoutExtension(this._videoFileName);
            }
            else
            {
                this.saveFileDialog1.FileName = Path.GetFileNameWithoutExtension(this._fileName);
            }

            if (!string.IsNullOrEmpty(this.openFileDialog1.InitialDirectory))
            {
                this.saveFileDialog1.InitialDirectory = this.openFileDialog1.InitialDirectory;
            }

            DialogResult result = this.saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                this.openFileDialog1.InitialDirectory = this.saveFileDialog1.InitialDirectory;
                string fileName = this.saveFileDialog1.FileName;
                string ext = Path.GetExtension(fileName);
                bool extOk = ext.Equals(ebu.Extension, StringComparison.OrdinalIgnoreCase);
                if (!extOk)
                {
                    if (fileName.EndsWith('.'))
                    {
                        fileName = fileName.Substring(0, fileName.Length - 1);
                    }

                    fileName += ebu.Extension;
                }

                Ebu.Save(fileName, this._subtitle);
            }
        }

        /// <summary>
        /// The tool strip menu item cavena 890 click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemCavena890Click(object sender, EventArgs e)
        {
            var cavena890 = new Cavena890();
            this.saveFileDialog1.Filter = cavena890.Name + "|*" + cavena890.Extension;
            this.saveFileDialog1.Title = this._language.SaveSubtitleAs;
            this.saveFileDialog1.DefaultExt = "*" + cavena890.Extension;
            this.saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(this._videoFileName))
            {
                this.saveFileDialog1.FileName = Path.GetFileNameWithoutExtension(this._videoFileName);
            }
            else
            {
                this.saveFileDialog1.FileName = Path.GetFileNameWithoutExtension(this._fileName);
            }

            if (!string.IsNullOrEmpty(this.openFileDialog1.InitialDirectory))
            {
                this.saveFileDialog1.InitialDirectory = this.openFileDialog1.InitialDirectory;
            }

            DialogResult result = this.saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                this.openFileDialog1.InitialDirectory = this.saveFileDialog1.InitialDirectory;
                string fileName = this.saveFileDialog1.FileName;
                string ext = Path.GetExtension(fileName);
                bool extOk = ext.Equals(cavena890.Extension, StringComparison.OrdinalIgnoreCase);
                if (!extOk)
                {
                    if (fileName.EndsWith('.'))
                    {
                        fileName = fileName.Substring(0, fileName.Length - 1);
                    }

                    fileName += cavena890.Extension;
                }

                cavena890.Save(fileName, this._subtitle);
            }
        }

        /// <summary>
        /// The p ac screen electronics tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void PAcScreenElectronicsToolStripMenuItemClick(object sender, EventArgs e)
        {
            var pac = new Pac();
            this.saveFileDialog1.Filter = pac.Name + "|*" + pac.Extension;
            this.saveFileDialog1.Title = this._language.SaveSubtitleAs;
            this.saveFileDialog1.DefaultExt = "*" + pac.Extension;
            this.saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(this._videoFileName))
            {
                this.saveFileDialog1.FileName = Path.GetFileNameWithoutExtension(this._videoFileName);
            }
            else
            {
                this.saveFileDialog1.FileName = Path.GetFileNameWithoutExtension(this._fileName);
            }

            if (!string.IsNullOrEmpty(this.openFileDialog1.InitialDirectory))
            {
                this.saveFileDialog1.InitialDirectory = this.openFileDialog1.InitialDirectory;
            }

            DialogResult result = this.saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                this.openFileDialog1.InitialDirectory = this.saveFileDialog1.InitialDirectory;
                string fileName = this.saveFileDialog1.FileName;
                string ext = Path.GetExtension(fileName);
                bool extOk = ext.Equals(pac.Extension, StringComparison.OrdinalIgnoreCase);
                if (!extOk)
                {
                    if (fileName.EndsWith('.'))
                    {
                        fileName = fileName.Substring(0, fileName.Length - 1);
                    }

                    fileName += pac.Extension;
                }

                pac.Save(fileName, this._subtitle);
            }
        }

        /// <summary>
        /// The text box list view text enter.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void TextBoxListViewTextEnter(object sender, EventArgs e)
        {
            if (this._findHelper != null)
            {
                this._findHelper.MatchInOriginal = false;
            }
        }

        /// <summary>
        /// The text box list view text alternate enter.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void TextBoxListViewTextAlternateEnter(object sender, EventArgs e)
        {
            if (this._findHelper != null)
            {
                this._findHelper.MatchInOriginal = true;
            }
        }

        /// <summary>
        /// The plain text tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void PlainTextToolStripMenuItemClick(object sender, EventArgs e)
        {
            using (var exportText = new ExportText())
            {
                exportText.Initialize(this._subtitle, this._fileName);
                if (exportText.ShowDialog() == DialogResult.OK)
                {
                    this.ShowStatus(this._language.SubtitleExported);
                }
            }
        }

        /// <summary>
        /// The bluray sup tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void BluraySupToolStripMenuItemClick(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(this._subtitle, this.GetCurrentSubtitleFormat(), "BLURAYSUP", this._fileName, this._videoInfo, this._videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        /// <summary>
        /// The vob subsubidx tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void VobSubsubidxToolStripMenuItemClick(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(this._subtitle, this.GetCurrentSubtitleFormat(), "VOBSUB", this._fileName, this._videoInfo, this._videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        /// <summary>
        /// The text box list view text alternate key up.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void TextBoxListViewTextAlternateKeyUp(object sender, KeyEventArgs e)
        {
            this.textBoxListViewTextAlternate.ClearUndo();
            this.UpdatePositionAndTotalLength(this.labelTextAlternateLineTotal, this.textBoxListViewTextAlternate);
        }

        /// <summary>
        /// The timer text undo tick.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void TimerTextUndoTick(object sender, EventArgs e)
        {
            int index = this._listViewTextUndoIndex;
            if (this._listViewTextTicks == -1 || !this.CanFocus || this._subtitle == null || this._subtitle.Paragraphs.Count == 0 || index < 0 || index >= this._subtitle.Paragraphs.Count)
            {
                return;
            }

            if ((DateTime.Now.Ticks - this._listViewTextTicks) > 10000 * 700)
            {
                // only if last typed char was entered > 700 milliseconds
                if (index < 0 || index >= this._subtitle.Paragraphs.Count)
                {
                    return;
                }

                string newText = this._subtitle.Paragraphs[index].Text.TrimEnd();
                string oldText = this._listViewTextUndoLast;
                if (oldText == null)
                {
                    return;
                }

                if (this._listViewTextUndoLast != newText)
                {
                    this.MakeHistoryForUndo(this._languageGeneral.Text + ": " + this._listViewTextUndoLast.TrimEnd() + " -> " + newText, false);
                    int hidx = this._subtitle.HistoryItems.Count - 1;
                    if (hidx >= 0 && hidx < this._subtitle.HistoryItems.Count)
                    {
                        this._subtitle.HistoryItems[hidx].Subtitle.Paragraphs[index].Text = this._listViewTextUndoLast;
                    }

                    this._listViewTextUndoLast = newText;
                    this._listViewTextUndoIndex = -1;
                }
            }
        }

        /// <summary>
        /// The timer alternate text undo tick.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void TimerAlternateTextUndoTick(object sender, EventArgs e)
        {
            if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && this._subtitleAlternate != null && this._subtitleAlternate.Paragraphs.Count > 0)
            {
                int index = this._listViewTextUndoIndex;
                if (this._listViewAlternateTextTicks == -1 || !this.CanFocus || this._subtitleAlternate == null || this._subtitleAlternate.Paragraphs.Count == 0 || index < 0 || index >= this._subtitleAlternate.Paragraphs.Count)
                {
                    return;
                }

                if ((DateTime.Now.Ticks - this._listViewAlternateTextTicks) > 10000 * 700)
                {
                    // only if last typed char was entered > 700 milliseconds
                    var original = Utilities.GetOriginalParagraph(index, this._subtitle.Paragraphs[index], this._subtitleAlternate.Paragraphs);
                    if (original != null)
                    {
                        index = this._subtitleAlternate.Paragraphs.IndexOf(original);
                    }
                    else
                    {
                        return;
                    }

                    string newText = this._subtitleAlternate.Paragraphs[index].Text.TrimEnd();
                    string oldText = this._listViewAlternateTextUndoLast;
                    if (oldText == null)
                    {
                        return;
                    }

                    if (this._listViewAlternateTextUndoLast != newText)
                    {
                        this.MakeHistoryForUndo(this._languageGeneral.Text + ": " + this._listViewAlternateTextUndoLast.TrimEnd() + " -> " + newText, false);
                        this._subtitle.HistoryItems[this._subtitle.HistoryItems.Count - 1].OriginalSubtitle.Paragraphs[index].Text = this._listViewAlternateTextUndoLast;

                        this._listViewAlternateTextUndoLast = newText;
                        this._listViewTextUndoIndex = -1;
                    }
                }
            }
        }

        /// <summary>
        /// The update position and total length.
        /// </summary>
        /// <param name="lineTotal">
        /// The line total.
        /// </param>
        /// <param name="textBox">
        /// The text box.
        /// </param>
        private void UpdatePositionAndTotalLength(Label lineTotal, TextBox textBox)
        {
            if (string.IsNullOrEmpty(textBox.Text))
            {
                lineTotal.Text = string.Empty;
                return;
            }

            int extraNewLineLength = Environment.NewLine.Length - 1;
            int lineBreakPos = textBox.Text.IndexOf(Environment.NewLine, StringComparison.Ordinal);
            int pos = textBox.SelectionStart;
            var s = HtmlUtil.RemoveHtmlTags(textBox.Text, true).Replace(Environment.NewLine, string.Empty); // we don't count new line in total length... correct?
            int totalLength = s.Length;
            string totalL = "     " + string.Format(this._languageGeneral.TotalLengthX, totalLength);
            if (lineBreakPos < 0 || pos <= lineBreakPos)
            {
                lineTotal.Text = "1," + (pos + 1) + totalL;
                lineTotal.Left = textBox.Left + (textBox.Width - lineTotal.Width);
                return;
            }

            int secondLineBreakPos = textBox.Text.IndexOf(Environment.NewLine, lineBreakPos + 1, StringComparison.Ordinal);
            if (secondLineBreakPos < 0 || pos <= secondLineBreakPos + extraNewLineLength)
            {
                lineTotal.Text = "2," + (pos - (lineBreakPos + extraNewLineLength)) + totalL;
                lineTotal.Left = textBox.Left + (textBox.Width - lineTotal.Width);
                return;
            }

            int thirdLineBreakPos = textBox.Text.IndexOf(Environment.NewLine, secondLineBreakPos + 1, StringComparison.Ordinal);
            if (thirdLineBreakPos < 0 || pos < thirdLineBreakPos + (extraNewLineLength * 2))
            {
                lineTotal.Text = "3," + (pos - (secondLineBreakPos + extraNewLineLength)) + totalL;
                lineTotal.Left = textBox.Left + (textBox.Width - lineTotal.Width);
                return;
            }

            int forthLineBreakPos = textBox.Text.IndexOf(Environment.NewLine, thirdLineBreakPos + 1, StringComparison.Ordinal);
            if (forthLineBreakPos < 0 || pos < forthLineBreakPos + (extraNewLineLength * 3))
            {
                lineTotal.Text = "4," + (pos - (thirdLineBreakPos + extraNewLineLength)) + totalL;
                lineTotal.Left = textBox.Left + (textBox.Width - lineTotal.Width);
                return;
            }

            lineTotal.Text = string.Empty;
        }

        /// <summary>
        /// The text box list view text mouse click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void TextBoxListViewTextMouseClick(object sender, MouseEventArgs e)
        {
            this.UpdatePositionAndTotalLength(this.labelTextLineTotal, this.textBoxListViewText);
        }

        /// <summary>
        /// The text box list view text alternate mouse click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void TextBoxListViewTextAlternateMouseClick(object sender, MouseEventArgs e)
        {
            this.UpdatePositionAndTotalLength(this.labelTextAlternateLineTotal, this.textBoxListViewTextAlternate);
        }

        /// <summary>
        /// The tab control buttons draw item.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void TabControlButtonsDrawItem(object sender, DrawItemEventArgs e)
        {
            var tc = (TabControl)sender;
            var textBrush = new SolidBrush(this.ForeColor);
            var tabFont = new Font(tc.Font, FontStyle.Regular);
            if (e.State == DrawItemState.Selected)
            {
                tabFont = new Font(tc.Font, FontStyle.Bold);
                e.Graphics.FillRectangle(new SolidBrush(SystemColors.Window), e.Bounds);
            }

            Rectangle tabBounds = tc.GetTabRect(e.Index);
            var stringFlags = new StringFormat { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center };
            e.Graphics.DrawString(tc.TabPages[e.Index].Text.Trim(), tabFont, textBrush, tabBounds, new StringFormat(stringFlags));

            // tc.DrawMode = TabDrawMode.Normal;
        }

        /// <summary>
        /// The goto next sub pos from video pos.
        /// </summary>
        public void GotoNextSubPosFromVideoPos()
        {
            if (this.mediaPlayer.VideoPlayer != null && this._subtitle != null)
            {
                double ms = this.mediaPlayer.VideoPlayer.CurrentPosition * TimeCode.BaseUnit;
                foreach (var p in this._subtitle.Paragraphs)
                {
                    if (p.EndTime.TotalMilliseconds > ms && p.StartTime.TotalMilliseconds < ms)
                    {
                        // current sub
                    }
                    else if (p.Duration.TotalSeconds < 10 && p.StartTime.TotalMilliseconds > ms)
                    {
                        this.mediaPlayer.VideoPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                        this.SubtitleListview1.SelectIndexAndEnsureVisible(this._subtitle.GetIndex(p));
                        return;
                    }
                }
            }
        }

        /// <summary>
        /// The goto prev sub pos fromvideo pos.
        /// </summary>
        public void GotoPrevSubPosFromvideoPos()
        {
            if (this.mediaPlayer.VideoPlayer != null && this._subtitle != null)
            {
                double ms = this.mediaPlayer.VideoPlayer.CurrentPosition * TimeCode.BaseUnit;
                int i = this._subtitle.Paragraphs.Count - 1;
                while (i > 0)
                {
                    var p = this._subtitle.Paragraphs[i];
                    if (p.EndTime.TotalMilliseconds > ms && p.StartTime.TotalMilliseconds < ms)
                    {
                        // current sub
                    }
                    else if (p.Duration.TotalSeconds < 10 && p.StartTime.TotalMilliseconds < ms)
                    {
                        this.mediaPlayer.VideoPlayer.CurrentPosition = p.StartTime.TotalSeconds;
                        this.SubtitleListview1.SelectIndexAndEnsureVisible(this._subtitle.GetIndex(p));
                        return;
                    }

                    i--;
                }
            }
        }

        /// <summary>
        /// The adobe encore fab image script tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void AdobeEncoreFabImageScriptToolStripMenuItemClick(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(this._subtitle, this.GetCurrentSubtitleFormat(), "FAB", this._fileName, this._videoInfo, this._videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        /// <summary>
        /// The tool strip menu item merge dialog click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemMergeDialogClick(object sender, EventArgs e)
        {
            this.MergeDialogs();
        }

        /// <summary>
        /// The main key up.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void MainKeyUp(object sender, KeyEventArgs e)
        {
            if (this._mainCreateStartDownEndUpParagraph != null)
            {
                var p = this._subtitle.Paragraphs[this._subtitleListViewIndex];
                if (p.ToString() == this._mainCreateStartDownEndUpParagraph.ToString())
                {
                    this.ButtonSetEndClick(null, null);
                }

                this._mainCreateStartDownEndUpParagraph = null;
            }
            else if (this._mainAdjustStartDownEndUpAndGoToNextParagraph != null)
            {
                var p = this._subtitle.Paragraphs[this._subtitleListViewIndex];
                if (p.ToString() == this._mainAdjustStartDownEndUpAndGoToNextParagraph.ToString())
                {
                    double videoPositionInSeconds = this.mediaPlayer.CurrentPosition;
                    if (p.StartTime.TotalSeconds + 0.1 < videoPositionInSeconds)
                    {
                        this.ButtonSetEndClick(null, null);
                    }

                    this.SubtitleListview1.SelectIndexAndEnsureVisible(this._subtitleListViewIndex + 1);
                }

                this._mainAdjustStartDownEndUpAndGoToNextParagraph = null;
            }
        }

        /// <summary>
        /// The tool strip menu item surround with music symbols click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemSurroundWithMusicSymbolsClick(object sender, EventArgs e)
        {
            const string tag = "♪";
            if (this._subtitle.Paragraphs.Count > 0 && this.SubtitleListview1.SelectedItems.Count > 0)
            {
                this.SubtitleListview1.SelectedIndexChanged -= this.SubtitleListview1_SelectedIndexChanged;
                this.MakeHistoryForUndo(string.Format(this._language.BeforeAddingTagX, tag));

                var indices = new List<int>();
                foreach (ListViewItem item in this.SubtitleListview1.SelectedItems)
                {
                    indices.Add(item.Index);
                }

                this.SubtitleListview1.BeginUpdate();
                foreach (int i in indices)
                {
                    if (this._subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                    {
                        var original = Utilities.GetOriginalParagraph(i, this._subtitle.Paragraphs[i], this._subtitleAlternate.Paragraphs);
                        if (original != null)
                        {
                            if (original.Text.Contains(tag))
                            {
                                original.Text = original.Text.Replace(tag, string.Empty);
                                original.Text = original.Text.Replace(Environment.NewLine + " ", Environment.NewLine).Replace(" " + Environment.NewLine, Environment.NewLine).Trim();
                            }
                            else
                            {
                                if (Configuration.Settings.Tools.MusicSymbolStyle.Equals("single", StringComparison.OrdinalIgnoreCase))
                                {
                                    original.Text = string.Format("{0} {1}", tag, original.Text.Replace(Environment.NewLine, Environment.NewLine + tag + " "));
                                }
                                else
                                {
                                    original.Text = string.Format("{0} {1} {0}", tag, original.Text.Replace(Environment.NewLine, " " + tag + Environment.NewLine + tag + " "));
                                }
                            }

                            this.SubtitleListview1.SetAlternateText(i, original.Text);
                        }
                    }

                    if (this._subtitle.Paragraphs[i].Text.Contains(tag))
                    {
                        this._subtitle.Paragraphs[i].Text = this._subtitle.Paragraphs[i].Text.Replace("♪", string.Empty).Replace(Environment.NewLine + " ", Environment.NewLine).Replace(" " + Environment.NewLine, Environment.NewLine).Trim();
                    }
                    else
                    {
                        if (Configuration.Settings.Tools.MusicSymbolStyle.Equals("single", StringComparison.OrdinalIgnoreCase))
                        {
                            this._subtitle.Paragraphs[i].Text = string.Format("{0} {1}", tag, this._subtitle.Paragraphs[i].Text.Replace(Environment.NewLine, Environment.NewLine + tag + " "));
                        }
                        else
                        {
                            this._subtitle.Paragraphs[i].Text = string.Format("{0} {1} {0}", tag, this._subtitle.Paragraphs[i].Text.Replace(Environment.NewLine, " " + tag + Environment.NewLine + tag + " "));
                        }
                    }

                    this.SubtitleListview1.SetText(i, this._subtitle.Paragraphs[i].Text);
                }

                this.SubtitleListview1.EndUpdate();

                this.ShowStatus(string.Format(this._language.TagXAdded, tag));
                this.ShowSource();
                this.RefreshSelectedParagraph();
                this.SubtitleListview1.SelectedIndexChanged += this.SubtitleListview1_SelectedIndexChanged;
            }
        }

        /// <summary>
        /// The superscript tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void SuperscriptToolStripMenuItemClick(object sender, EventArgs e)
        {
            TextBox tb;
            if (this.textBoxListViewTextAlternate.Focused)
            {
                tb = this.textBoxListViewTextAlternate;
            }
            else
            {
                tb = this.textBoxListViewText;
            }

            string text = tb.SelectedText;
            int selectionStart = tb.SelectionStart;
            text = Utilities.ToSuperscript(text);
            tb.SelectedText = text;
            tb.SelectionStart = selectionStart;
            tb.SelectionLength = text.Length;
        }

        /// <summary>
        /// The subscript tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void SubscriptToolStripMenuItemClick(object sender, EventArgs e)
        {
            TextBox tb;
            if (this.textBoxListViewTextAlternate.Focused)
            {
                tb = this.textBoxListViewTextAlternate;
            }
            else
            {
                tb = this.textBoxListViewText;
            }

            string text = tb.SelectedText;
            int selectionStart = tb.SelectionStart;
            text = Utilities.ToSubscript(text);
            tb.SelectedText = text;
            tb.SelectionStart = selectionStart;
            tb.SelectionLength = text.Length;
        }

        /// <summary>
        /// The tool strip menu item image per frame click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemImagePerFrameClick(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(this._subtitle, this.GetCurrentSubtitleFormat(), "IMAGE/FRAME", this._fileName, this._videoInfo, this._videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        /// <summary>
        /// The tool strip menu item apply display time limits_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemApplyDisplayTimeLimits_Click(object sender, EventArgs e)
        {
            this.ApplyDisplayTimeLimits(false);
        }

        /// <summary>
        /// The apply display time limits.
        /// </summary>
        /// <param name="onlySelectedLines">
        /// The only selected lines.
        /// </param>
        private void ApplyDisplayTimeLimits(bool onlySelectedLines)
        {
            if (!this.IsSubtitleLoaded)
            {
                this.DisplaySubtitleNotLoadedMessage();
                return;
            }

            this.ReloadFromSourceView();
            using (var applyDurationLimits = new ApplyDurationLimits())
            {
                if (onlySelectedLines)
                {
                    var selectedLines = new Subtitle { WasLoadedWithFrameNumbers = this._subtitle.WasLoadedWithFrameNumbers };
                    foreach (int index in this.SubtitleListview1.SelectedIndices)
                    {
                        selectedLines.Paragraphs.Add(this._subtitle.Paragraphs[index]);
                    }

                    applyDurationLimits.Initialize(selectedLines);
                }
                else
                {
                    applyDurationLimits.Initialize(this._subtitle);
                }

                applyDurationLimits.Initialize(this._subtitle);
                if (applyDurationLimits.ShowDialog(this) == DialogResult.OK)
                {
                    this.MakeHistoryForUndo(this._language.BeforeDisplayTimeAdjustment);

                    if (onlySelectedLines)
                    { // we only update selected lines
                        int i = 0;
                        foreach (int index in this.SubtitleListview1.SelectedIndices)
                        {
                            this._subtitle.Paragraphs[index] = applyDurationLimits.FixedSubtitle.Paragraphs[i];
                            i++;
                        }

                        this.ShowStatus(this._language.VisualSyncPerformedOnSelectedLines);
                    }
                    else
                    {
                        this.SaveSubtitleListviewIndices();
                        this._subtitle.Paragraphs.Clear();
                        foreach (var p in applyDurationLimits.FixedSubtitle.Paragraphs)
                        {
                            this._subtitle.Paragraphs.Add(new Paragraph(p));
                        }

                        this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                        this.RestoreSubtitleListviewIndices();
                    }

                    if (this.IsFramesRelevant && this.CurrentFrameRate > 0)
                    {
                        this._subtitle.CalculateFrameNumbersFromTimeCodesNoCheck(this.CurrentFrameRate);
                    }

                    this.ShowSource();
                }
            }
        }

        /// <summary>
        /// The generate datetime info from video tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void generateDatetimeInfoFromVideoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.ReloadFromSourceView();
            using (var extractDateTimeInfo = new ExtractDateTimeInfo())
            {
                if (extractDateTimeInfo.ShowDialog(this) == DialogResult.OK)
                {
                    if (this.ContinueNewOrExit())
                    {
                        this.MakeHistoryForUndo(this._language.BeforeDisplayTimeAdjustment);

                        this.ResetSubtitle();
                        this._subtitle.Paragraphs.Clear();
                        foreach (var p in extractDateTimeInfo.DateTimeSubtitle.Paragraphs)
                        {
                            this._subtitle.Paragraphs.Add(new Paragraph(p));
                        }

                        this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                        this.SubtitleListview1.SelectIndexAndEnsureVisible(0);

                        if (this.IsFramesRelevant && this.CurrentFrameRate > 0)
                        {
                            this._subtitle.CalculateFrameNumbersFromTimeCodesNoCheck(this.CurrentFrameRate);
                        }

                        this.ShowSource();

                        this.OpenVideo(extractDateTimeInfo.VideoFileName);
                    }
                }
            }
        }

        /// <summary>
        /// The tool strip menu item right to left mode click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemRightToLeftModeClick(object sender, EventArgs e)
        {
            this.toolStripMenuItemRightToLeftMode.Checked = !this.toolStripMenuItemRightToLeftMode.Checked;
            if (this.textBoxListViewText.RightToLeft == RightToLeft.Yes)
            {
                this.RightToLeft = RightToLeft.No;
                this.textBoxListViewText.RightToLeft = RightToLeft.No;
                this.SubtitleListview1.RightToLeft = RightToLeft.No;
                this.SubtitleListview1.RightToLeftLayout = false;
                this.textBoxSource.RightToLeft = RightToLeft.No;
                this.mediaPlayer.TextRightToLeft = RightToLeft.No;
            }
            else
            {
                // RightToLeft = RightToLeft.Yes; - is this better? TimeUpDown custom control needs to support RTL before enabling this
                this.textBoxListViewText.RightToLeft = RightToLeft.Yes;
                this.SubtitleListview1.RightToLeft = RightToLeft.Yes;
                this.SubtitleListview1.RightToLeftLayout = true;
                this.textBoxSource.RightToLeft = RightToLeft.Yes;
                this.mediaPlayer.TextRightToLeft = RightToLeft.Yes;
            }
        }

        /// <summary>
        /// The join subtitles tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void joinSubtitlesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.ReloadFromSourceView();
            using (var joinSubtitles = new JoinSubtitles())
            {
                if (joinSubtitles.ShowDialog(this) == DialogResult.OK && joinSubtitles.JoinedSubtitle != null && joinSubtitles.JoinedSubtitle.Paragraphs.Count > 0 && this.ContinueNewOrExit())
                {
                    this.MakeHistoryForUndo(this._language.BeforeDisplaySubtitleJoin);

                    this.ResetSubtitle();
                    this._subtitle = joinSubtitles.JoinedSubtitle;
                    this.SetCurrentFormat(joinSubtitles.JoinedFormat);
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(0);

                    if (this.IsFramesRelevant && this.CurrentFrameRate > 0)
                    {
                        this._subtitle.CalculateFrameNumbersFromTimeCodesNoCheck(this.CurrentFrameRate);
                    }

                    this.ShowSource();

                    this.ShowStatus(this._language.SubtitlesJoined);
                }
            }
        }

        /// <summary>
        /// The tool strip menu item reverse right to left start end_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemReverseRightToLeftStartEnd_Click(object sender, EventArgs e)
        {
            this.ReverseStartAndEndingForRTL();
        }

        /// <summary>
        /// The tool strip menu item export cap maker plus_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemExportCapMakerPlus_Click(object sender, EventArgs e)
        {
            var capMakerPlus = new CapMakerPlus();
            this.saveFileDialog1.Filter = capMakerPlus.Name + "|*" + capMakerPlus.Extension;
            this.saveFileDialog1.Title = this._language.SaveSubtitleAs;
            this.saveFileDialog1.DefaultExt = "*" + capMakerPlus.Extension;
            this.saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(this._videoFileName))
            {
                this.saveFileDialog1.FileName = Path.GetFileNameWithoutExtension(this._videoFileName);
            }
            else
            {
                this.saveFileDialog1.FileName = Path.GetFileNameWithoutExtension(this._fileName);
            }

            if (!string.IsNullOrEmpty(this.openFileDialog1.InitialDirectory))
            {
                this.saveFileDialog1.InitialDirectory = this.openFileDialog1.InitialDirectory;
            }

            DialogResult result = this.saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                this.openFileDialog1.InitialDirectory = this.saveFileDialog1.InitialDirectory;
                string fileName = this.saveFileDialog1.FileName;
                string ext = Path.GetExtension(fileName);
                bool extOk = ext.Equals(capMakerPlus.Extension, StringComparison.OrdinalIgnoreCase);
                if (!extOk)
                {
                    if (fileName.EndsWith('.'))
                    {
                        fileName = fileName.Substring(0, fileName.Length - 1);
                    }

                    fileName += capMakerPlus.Extension;
                }

                CapMakerPlus.Save(fileName, this._subtitle);
            }
        }

        /// <summary>
        /// The tool strip menu item export cheetah cap_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemExportCheetahCap_Click(object sender, EventArgs e)
        {
            var cheetahCaption = new CheetahCaption();
            this.saveFileDialog1.Filter = cheetahCaption.Name + "|*" + cheetahCaption.Extension;
            this.saveFileDialog1.Title = this._language.SaveSubtitleAs;
            this.saveFileDialog1.DefaultExt = "*" + cheetahCaption.Extension;
            this.saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(this._videoFileName))
            {
                this.saveFileDialog1.FileName = Path.GetFileNameWithoutExtension(this._videoFileName);
            }
            else
            {
                this.saveFileDialog1.FileName = Path.GetFileNameWithoutExtension(this._fileName);
            }

            if (!string.IsNullOrEmpty(this.openFileDialog1.InitialDirectory))
            {
                this.saveFileDialog1.InitialDirectory = this.openFileDialog1.InitialDirectory;
            }

            DialogResult result = this.saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                this.openFileDialog1.InitialDirectory = this.saveFileDialog1.InitialDirectory;
                string fileName = this.saveFileDialog1.FileName;
                string ext = Path.GetExtension(fileName);
                bool extOk = ext.Equals(cheetahCaption.Extension, StringComparison.OrdinalIgnoreCase);
                if (!extOk)
                {
                    if (fileName.EndsWith('.'))
                    {
                        fileName = fileName.Substring(0, fileName.Length - 1);
                    }

                    fileName += cheetahCaption.Extension;
                }

                CheetahCaption.Save(fileName, this._subtitle);
            }
        }

        /// <summary>
        /// The tool strip menu item export caption inc_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemExportCaptionInc_Click(object sender, EventArgs e)
        {
            var captionInc = new CaptionsInc();
            this.saveFileDialog1.Filter = captionInc.Name + "|*" + captionInc.Extension;
            this.saveFileDialog1.Title = this._language.SaveSubtitleAs;
            this.saveFileDialog1.DefaultExt = "*" + captionInc.Extension;
            this.saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(this._videoFileName))
            {
                this.saveFileDialog1.FileName = Path.GetFileNameWithoutExtension(this._videoFileName);
            }
            else
            {
                this.saveFileDialog1.FileName = Path.GetFileNameWithoutExtension(this._fileName);
            }

            if (!string.IsNullOrEmpty(this.openFileDialog1.InitialDirectory))
            {
                this.saveFileDialog1.InitialDirectory = this.openFileDialog1.InitialDirectory;
            }

            DialogResult result = this.saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                this.openFileDialog1.InitialDirectory = this.saveFileDialog1.InitialDirectory;
                string fileName = this.saveFileDialog1.FileName;
                string ext = Path.GetExtension(fileName);
                bool extOk = ext.Equals(captionInc.Extension, StringComparison.OrdinalIgnoreCase);
                if (!extOk)
                {
                    if (fileName.EndsWith('.'))
                    {
                        fileName = fileName.Substring(0, fileName.Length - 1);
                    }

                    fileName += captionInc.Extension;
                }

                CaptionsInc.Save(fileName, this._subtitle);
            }
        }

        /// <summary>
        /// The tool strip menu item export ultech 130_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemExportUltech130_Click(object sender, EventArgs e)
        {
            var ultech130 = new Ultech130();
            this.saveFileDialog1.Filter = ultech130.Name + "|*" + ultech130.Extension;
            this.saveFileDialog1.Title = this._language.SaveSubtitleAs;
            this.saveFileDialog1.DefaultExt = "*" + ultech130.Extension;
            this.saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(this._videoFileName))
            {
                this.saveFileDialog1.FileName = Path.GetFileNameWithoutExtension(this._videoFileName);
            }
            else
            {
                this.saveFileDialog1.FileName = Path.GetFileNameWithoutExtension(this._fileName);
            }

            if (!string.IsNullOrEmpty(this.openFileDialog1.InitialDirectory))
            {
                this.saveFileDialog1.InitialDirectory = this.openFileDialog1.InitialDirectory;
            }

            DialogResult result = this.saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                this.openFileDialog1.InitialDirectory = this.saveFileDialog1.InitialDirectory;
                string fileName = this.saveFileDialog1.FileName;
                string ext = Path.GetExtension(fileName);
                bool extOk = ext.Equals(ultech130.Extension, StringComparison.OrdinalIgnoreCase);
                if (!extOk)
                {
                    if (fileName.EndsWith('.'))
                    {
                        fileName = fileName.Substring(0, fileName.Length - 1);
                    }

                    fileName += ultech130.Extension;
                }

                Ultech130.Save(fileName, this._subtitle);
            }
        }

        /// <summary>
        /// The tool strip menu item ass styles_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemAssStyles_Click(object sender, EventArgs e)
        {
            StylesForm styles = null;
            try
            {
                var format = this.GetCurrentSubtitleFormat();
                var formatType = format.GetType();
                if (formatType == typeof(AdvancedSubStationAlpha) || formatType == typeof(SubStationAlpha))
                {
                    styles = new SubStationAlphaStyles(this._subtitle, format);
                    if (styles.ShowDialog(this) == DialogResult.OK)
                    {
                        this._subtitle.Header = styles.Header;
                        var styleList = AdvancedSubStationAlpha.GetStylesFromHeader(this._subtitle.Header);
                        if (styleList.Count > 0)
                        {
                            for (var i = 0; i < this._subtitle.Paragraphs.Count; i++)
                            {
                                var p = this._subtitle.Paragraphs[i];
                                if (p.Extra == null || !styleList.Any(s => s.Equals(p.Extra, StringComparison.OrdinalIgnoreCase)))
                                {
                                    p.Extra = styleList[0];
                                    this.SubtitleListview1.SetExtraText(i, p.Extra, this.SubtitleListview1.ForeColor);
                                }
                            }
                        }
                    }
                }
                else if (formatType == typeof(TimedText10) || formatType == typeof(ItunesTimedText))
                {
                    styles = new TimedTextStyles(this._subtitle);
                    if (styles.ShowDialog(this) == DialogResult.OK)
                    {
                        this._subtitle.Header = styles.Header;
                    }
                }
            }
            finally
            {
                if (styles != null)
                {
                    styles.Dispose();
                }
            }
        }

        /// <summary>
        /// The tool strip menu item sub station alpha_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemSubStationAlpha_Click(object sender, EventArgs e)
        {
            using (var properties = new SubStationAlphaProperties(this._subtitle, this.GetCurrentSubtitleFormat(), this._videoFileName, this._fileName))
            {
                properties.ShowDialog(this);
            }
        }

        /// <summary>
        /// The set align tag.
        /// </summary>
        /// <param name="p">
        /// The p.
        /// </param>
        /// <param name="tag">
        /// The tag.
        /// </param>
        private static void SetAlignTag(Paragraph p, string tag)
        {
            if (p.Text.StartsWith("{\\a") && p.Text.Length > 5 && p.Text[5] == '}')
            {
                p.Text = p.Text.Remove(0, 6);
            }
            else if (p.Text.StartsWith("{\\a") && p.Text.Length > 4 && p.Text[4] == '}')
            {
                p.Text = p.Text.Remove(0, 5);
            }

            p.Text = string.Format(@"{0}{1}", tag, p.Text);
        }

        /// <summary>
        /// The tool strip menu item alignment_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemAlignment_Click(object sender, EventArgs e)
        {
            using (var f = new AlignmentPicker())
            {
                f.TopMost = true;
                f.StartPosition = FormStartPosition.Manual;
                f.Left = Cursor.Position.X - 150;
                f.Top = Cursor.Position.Y - 75;
                if (f.ShowDialog(this) == DialogResult.OK)
                {
                    string tag = string.Empty;
                    var format = this.GetCurrentSubtitleFormat();
                    if (format.GetType() == typeof(SubStationAlpha))
                    {
                        // 1: Bottom left
                        // 2: Bottom center
                        // 3: Bottom right
                        // 9: Middle left
                        // 10: Middle center
                        // 11: Middle right
                        // 5: Top left
                        // 6: Top center
                        // 7: Top right
                        switch (f.Alignment)
                        {
                            case ContentAlignment.BottomLeft:
                                tag = "{\\a1}";
                                break;
                            case ContentAlignment.BottomCenter:
                                tag = "{\\a2}";
                                break;
                            case ContentAlignment.BottomRight:
                                tag = "{\\a3}";
                                break;
                            case ContentAlignment.MiddleLeft:
                                tag = "{\\a9}";
                                break;
                            case ContentAlignment.MiddleCenter:
                                tag = "{\\a10}";
                                break;
                            case ContentAlignment.MiddleRight:
                                tag = "{\\a11}";
                                break;
                            case ContentAlignment.TopLeft:
                                tag = "{\\a5}";
                                break;
                            case ContentAlignment.TopCenter:
                                tag = "{\\a6}";
                                break;
                            case ContentAlignment.TopRight:
                                tag = "{\\a7}";
                                break;
                        }
                    }
                    else
                    {
                        // 1: Bottom left
                        // 2: Bottom center
                        // 3: Bottom right
                        // 4: Middle left
                        // 5: Middle center
                        // 6: Middle right
                        // 7: Top left
                        // 8: Top center
                        // 9: Top right
                        switch (f.Alignment)
                        {
                            case ContentAlignment.BottomLeft:
                                tag = "{\\an1}";
                                break;
                            case ContentAlignment.BottomCenter:
                                if (format.GetType() == typeof(SubRip))
                                {
                                    tag = string.Empty;
                                }
                                else
                                {
                                    tag = "{\\an2}";
                                }

                                break;
                            case ContentAlignment.BottomRight:
                                tag = "{\\an3}";
                                break;
                            case ContentAlignment.MiddleLeft:
                                tag = "{\\an4}";
                                break;
                            case ContentAlignment.MiddleCenter:
                                tag = "{\\an5}";
                                break;
                            case ContentAlignment.MiddleRight:
                                tag = "{\\an6}";
                                break;
                            case ContentAlignment.TopLeft:
                                tag = "{\\an7}";
                                break;
                            case ContentAlignment.TopCenter:
                                tag = "{\\an8}";
                                break;
                            case ContentAlignment.TopRight:
                                tag = "{\\an9}";
                                break;
                        }
                    }

                    if (this._subtitle.Paragraphs.Count > 0 && this.SubtitleListview1.SelectedItems.Count > 0)
                    {
                        this.SubtitleListview1.SelectedIndexChanged -= this.SubtitleListview1_SelectedIndexChanged;
                        this.MakeHistoryForUndo(string.Format(this._language.BeforeAddingTagX, tag));

                        var indices = new List<int>();
                        foreach (ListViewItem item in this.SubtitleListview1.SelectedItems)
                        {
                            indices.Add(item.Index);
                        }

                        this.SubtitleListview1.BeginUpdate();
                        foreach (int i in indices)
                        {
                            if (this._subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle)
                            {
                                var original = Utilities.GetOriginalParagraph(i, this._subtitle.Paragraphs[i], this._subtitleAlternate.Paragraphs);
                                if (original != null)
                                {
                                    SetAlignTag(original, tag);
                                    this.SubtitleListview1.SetAlternateText(i, original.Text);
                                }
                            }

                            SetAlignTag(this._subtitle.Paragraphs[i], tag);
                            this.SubtitleListview1.SetText(i, this._subtitle.Paragraphs[i].Text);
                        }

                        this.SubtitleListview1.EndUpdate();

                        this.ShowStatus(string.Format(this._language.TagXAdded, tag));
                        this.ShowSource();
                        this.RefreshSelectedParagraph();
                        this.SubtitleListview1.SelectedIndexChanged += this.SubtitleListview1_SelectedIndexChanged;
                    }
                }
            }
        }

        /// <summary>
        /// The tool strip menu item restore auto backup_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemRestoreAutoBackup_Click(object sender, EventArgs e)
        {
            this._lastDoNotPrompt = string.Empty;
            using (var restoreAutoBackup = new RestoreAutoBackup())
            {
                if (restoreAutoBackup.ShowDialog(this) == DialogResult.OK && !string.IsNullOrEmpty(restoreAutoBackup.AutoBackupFileName))
                {
                    if (this.ContinueNewOrExit())
                    {
                        this.OpenSubtitle(restoreAutoBackup.AutoBackupFileName, null);
                        this._fileName = this._fileName.Remove(0, Configuration.AutoBackupFolder.Length).TrimStart(Path.DirectorySeparatorChar);
                        this._converted = true;
                        this.SetTitle();
                    }
                }
            }
        }

        /// <summary>
        /// The label status_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void labelStatus_Click(object sender, EventArgs e)
        {
            if (this._statusLog.Length == 0)
            {
                return;
            }

            using (var statusLog = new StatusLog(this._statusLog.ToString()))
            {
                statusLog.ShowDialog(this);
            }
        }

        /// <summary>
        /// The tool strip menu item statistics_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemStatistics_Click(object sender, EventArgs e)
        {
            using (var stats = new Statistics(this._subtitle, this._fileName, this.GetCurrentSubtitleFormat()))
            {
                stats.ShowDialog(this);
            }
        }

        /// <summary>
        /// The tool strip menu item d cinema properties_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemDCinemaProperties_Click(object sender, EventArgs e)
        {
            DCinemaPropertiesForm properties = null;
            try
            {
                if (this.GetCurrentSubtitleFormat().GetType() == typeof(DCSubtitle))
                {
                    properties = new DCinema.DCinemaPropertiesInterop();
                }
                else
                {
                    properties = new DCinema.DCinemaPropertiesSmpte();
                }

                properties.ShowDialog(this);
            }
            finally
            {
                if (properties != null)
                {
                    properties.Dispose();
                }
            }
        }

        /// <summary>
        /// The tool strip menu item text time code pair_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemTextTimeCodePair_Click(object sender, EventArgs e)
        {
            if (this.saveFileDialog1.ShowDialog(this) == DialogResult.OK)
            {
                this.saveFileDialog1.Filter = this._language.TextFiles + "|*.txt";
                this.saveFileDialog1.Title = this._language.SaveSubtitleAs;
                this.saveFileDialog1.DefaultExt = "*.txt";
                this.saveFileDialog1.AddExtension = true;

                string fname = this.saveFileDialog1.FileName;
                if (string.IsNullOrEmpty(fname))
                {
                    fname = "ATS";
                }

                if (!fname.EndsWith(".txt", StringComparison.Ordinal))
                {
                    fname += ".txt";
                }

                string fileNameTimeCode = fname.Insert(fname.Length - 4, "_timecode");
                string fileNameText = fname.Insert(fname.Length - 4, "_text");

                var timeCodeLines = new StringBuilder();
                var textLines = new StringBuilder();

                foreach (var p in this._subtitle.Paragraphs)
                {
                    timeCodeLines.AppendLine(string.Format("{0:00}:{1:00}:{2:00}:{3:00}", p.StartTime.Hours, p.StartTime.Minutes, p.StartTime.Seconds, SubtitleFormat.MillisecondsToFramesMaxFrameRate(p.StartTime.Milliseconds)));
                    timeCodeLines.AppendLine(string.Format("{0:00}:{1:00}:{2:00}:{3:00}", p.EndTime.Hours, p.EndTime.Minutes, p.EndTime.Seconds, SubtitleFormat.MillisecondsToFramesMaxFrameRate(p.EndTime.Milliseconds)));

                    textLines.AppendLine(HtmlUtil.RemoveHtmlTags(p.Text).Replace(Environment.NewLine, "|"));
                    textLines.AppendLine();
                }

                File.WriteAllText(fileNameTimeCode, timeCodeLines.ToString(), Encoding.UTF8);
                File.WriteAllText(fileNameText, textLines.ToString(), Encoding.UTF8);
            }
        }

        /// <summary>
        /// The text words per minutewpm tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void textWordsPerMinutewpmToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.SortSubtitle(SubtitleSortCriteria.WordsPerMinute, (sender as ToolStripItem).Text);
        }

        /// <summary>
        /// The tool strip menu item tt properties click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemTTPropertiesClick(object sender, EventArgs e)
        {
            var subtitleFormatType = this.GetCurrentSubtitleFormat().GetType();
            if (subtitleFormatType != typeof(TimedText10) && subtitleFormatType != typeof(ItunesTimedText))
            {
                return;
            }

            using (var properties = new TimedTextProperties(this._subtitle))
            {
                properties.ShowDialog(this);
            }
        }

        /// <summary>
        /// The tool strip menu item save selected lines click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemSaveSelectedLinesClick(object sender, EventArgs e)
        {
            var newSub = new Subtitle(this._subtitle);
            newSub.Header = this._subtitle.Header;
            newSub.Paragraphs.Clear();
            foreach (int index in this.SubtitleListview1.SelectedIndices)
            {
                newSub.Paragraphs.Add(this._subtitle.Paragraphs[index]);
            }

            SubtitleFormat currentFormat = this.GetCurrentSubtitleFormat();
            Utilities.SetSaveDialogFilter(this.saveFileDialog1, currentFormat);
            this.saveFileDialog1.Title = this._language.SaveSubtitleAs;
            this.saveFileDialog1.DefaultExt = "*" + currentFormat.Extension;
            this.saveFileDialog1.AddExtension = true;
            if (!string.IsNullOrEmpty(this._fileName))
            {
                this.saveFileDialog1.InitialDirectory = Path.GetDirectoryName(this._fileName);
            }

            if (this.saveFileDialog1.ShowDialog(this) == DialogResult.OK)
            {
                int index = 0;
                foreach (SubtitleFormat format in SubtitleFormat.AllSubtitleFormats)
                {
                    if (this.saveFileDialog1.FilterIndex == index + 1)
                    {
                        if (format.IsTextBased)
                        {
                            // only allow current extension or ".txt"
                            string fileName = this.saveFileDialog1.FileName;
                            string ext = Path.GetExtension(fileName).ToLowerInvariant();
                            bool extOk = ext.Equals(format.Extension, StringComparison.OrdinalIgnoreCase) || format.AlternateExtensions.Contains(ext) || ext == ".txt";
                            if (!extOk)
                            {
                                if (fileName.EndsWith('.'))
                                {
                                    fileName = fileName.TrimEnd('.');
                                }

                                fileName += format.Extension;
                            }

                            string allText = newSub.ToText(format);
                            File.WriteAllText(fileName, allText, this.GetCurrentEncoding());
                            this.ShowStatus(string.Format(this._language.XLinesSavedAsY, newSub.Paragraphs.Count, fileName));
                            return;
                        }
                    }

                    index++;
                }
            }
        }

        /// <summary>
        /// The guess time codes tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void GuessTimeCodesToolStripMenuItemClick(object sender, EventArgs e)
        {
            using (var form = new WaveformGenerateTimeCodes())
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    this.MakeHistoryForUndoOnlyIfNotResent(string.Format(this._language.BeforeGuessingTimeCodes));

                    double startFrom = 0;
                    if (form.StartFromVideoPosition)
                    {
                        startFrom = this.mediaPlayer.CurrentPosition;
                    }

                    if (form.DeleteAll)
                    {
                        this._subtitle.Paragraphs.Clear();
                    }
                    else if (form.DeleteForward)
                    {
                        for (int i = this._subtitle.Paragraphs.Count - 1; i > 0; i--)
                        {
                            if (this._subtitle.Paragraphs[i].EndTime.TotalSeconds + 1 > startFrom)
                            {
                                this._subtitle.Paragraphs.RemoveAt(i);
                            }
                        }
                    }

                    this.audioVisualizer.GenerateTimeCodes(form.BlockSize, form.VolumeMinimum, form.VolumeMaximum, form.DefaultMilliseconds);
                    if (this.IsFramesRelevant && this.CurrentFrameRate > 0)
                    {
                        this._subtitle.CalculateFrameNumbersFromTimeCodesNoCheck(this.CurrentFrameRate);
                    }

                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this.RefreshSelectedParagraph();
                }
            }
        }

        /// <summary>
        /// The dvd studio pro stl_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void DvdStudioProStl_Click(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(this._subtitle, this.GetCurrentSubtitleFormat(), "STL", this._fileName, this._videoInfo, this._videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        /// <summary>
        /// The tool strip menu item plugins_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemPlugins_Click(object sender, EventArgs e)
        {
            using (var form = new PluginsGet())
            {
                form.ShowDialog(this);
                this.LoadPlugins();
            }
        }

        /// <summary>
        /// The tool strip menu item undo_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemUndo_Click(object sender, EventArgs e)
        {
            this.UndoToIndex(true);
        }

        /// <summary>
        /// The tool strip menu item redo_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemRedo_Click(object sender, EventArgs e)
        {
            this.UndoToIndex(false);
        }

        /// <summary>
        /// The seek silence tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void seekSilenceToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (this.audioVisualizer == null)
            {
                return;
            }

            using (var form = new SeekSilence())
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    if (form.SeekForward)
                    {
                        this.audioVisualizer.FindDataBelowThreshold(form.VolumeBelow, form.SecondsDuration);
                    }
                    else
                    {
                        this.audioVisualizer.FindDataBelowThresholdBack(form.VolumeBelow, form.SecondsDuration);
                    }
                }
            }
        }

        /// <summary>
        /// The tool strip menu item paste special_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemPasteSpecial_Click(object sender, EventArgs e)
        {
            string text = Clipboard.GetText();
            var tmp = new Subtitle();
            var format = new SubRip();
            var list = new List<string>(text.SplitToLines());
            format.LoadSubtitle(tmp, list, null);

            if (this.SubtitleListview1.SelectedItems.Count == 1 && text.Length > 0)
            {
                var form = new ColumnPaste(this.SubtitleListview1.IsAlternateTextColumnVisible && this._subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle, tmp.Paragraphs.Count == 0);
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    this.MakeHistoryForUndo(this._language.BeforeColumnPaste);

                    if (tmp.Paragraphs.Count == 0)
                    {
                        foreach (var line in text.SplitToLines())
                        {
                            tmp.Paragraphs.Add(new Paragraph(0, 0, line));
                        }
                    }

                    int index = this.FirstSelectedIndex;

                    if (!form.PasteOverwrite)
                    {
                        for (int i = 0; i < tmp.Paragraphs.Count; i++)
                        {
                            if (form.PasteAll)
                            {
                                for (int k = this._subtitle.Paragraphs.Count - 2; k > index; k--)
                                {
                                    this._subtitle.Paragraphs[k + 1] = new Paragraph(this._subtitle.Paragraphs[k]);
                                }

                                if (index + i < this._subtitle.Paragraphs.Count)
                                {
                                    this._subtitle.Paragraphs[index + i].Text = string.Empty;
                                }
                            }
                            else if (form.PasteTimeCodesOnly)
                            {
                                for (int k = this._subtitle.Paragraphs.Count - 2; k > index; k--)
                                {
                                    this._subtitle.Paragraphs[k + 1].StartTime.TotalMilliseconds = this._subtitle.Paragraphs[k].StartTime.TotalMilliseconds;
                                    this._subtitle.Paragraphs[k + 1].EndTime.TotalMilliseconds = this._subtitle.Paragraphs[k].EndTime.TotalMilliseconds;
                                    this._subtitle.Paragraphs[k + 1].StartFrame = this._subtitle.Paragraphs[k].StartFrame;
                                    this._subtitle.Paragraphs[k + 1].EndFrame = this._subtitle.Paragraphs[k].EndFrame;
                                }
                            }
                            else if (form.PasteTextOnly)
                            {
                                for (int k = this._subtitle.Paragraphs.Count - 2; k > index; k--)
                                {
                                    this._subtitle.Paragraphs[k + 1].Text = this._subtitle.Paragraphs[k].Text;
                                }
                            }
                            else if (form.PasteOriginalTextOnly)
                            {
                                for (int k = this._subtitle.Paragraphs.Count - 2; k > index; k--)
                                {
                                    var original = Utilities.GetOriginalParagraph(index, this._subtitle.Paragraphs[k], this._subtitleAlternate.Paragraphs);
                                    var originalNext = Utilities.GetOriginalParagraph(index, this._subtitle.Paragraphs[k + 1], this._subtitleAlternate.Paragraphs);
                                    if (original != null)
                                    {
                                        originalNext.Text = original.Text;
                                    }
                                }

                                if (index + i < this._subtitle.Paragraphs.Count)
                                {
                                    var original = Utilities.GetOriginalParagraph(index, this._subtitle.Paragraphs[index + i], this._subtitleAlternate.Paragraphs);
                                    if (original != null)
                                    {
                                        original.Text = string.Empty;
                                    }
                                }
                            }
                        }
                    }

                    if (form.PasteOverwrite)
                    {
                        for (int i = 0; i + index < this._subtitle.Paragraphs.Count && i < tmp.Paragraphs.Count; i++)
                        {
                            this._subtitle.Paragraphs[index + i].Text = tmp.Paragraphs[i].Text;
                        }
                    }
                    else
                    {
                        for (int i = 0; i + index < this._subtitle.Paragraphs.Count && i < tmp.Paragraphs.Count; i++)
                        {
                            if (index + i + 1 < this._subtitle.Paragraphs.Count)
                            {
                                this._subtitle.Paragraphs[index + i + 1].Text = tmp.Paragraphs[i].Text;
                            }
                        }
                    }

                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                    this.RefreshSelectedParagraph();
                }

                form.Dispose();
            }
        }

        /// <summary>
        /// The delete and shift cells up tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void deleteAndShiftCellsUpToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (this.SubtitleListview1.SelectedIndices.Count < 1)
            {
                return;
            }

            int first = this.FirstSelectedIndex;
            List<int> list = new List<int>();
            foreach (int index in this.SubtitleListview1.SelectedIndices)
            {
                list.Add(index);
            }

            list.Sort();
            list.Reverse();

            this.MakeHistoryForUndo(this._language.BeforeColumnDelete);
            foreach (int index in list)
            {
                for (int k = index; k < this._subtitle.Paragraphs.Count - 1; k++)
                {
                    this._subtitle.Paragraphs[k].Text = this._subtitle.Paragraphs[k + 1].Text;
                }

                this._subtitle.Paragraphs[this._subtitle.Paragraphs.Count - 1].Text = string.Empty;
            }

            this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
            this.SubtitleListview1.SelectIndexAndEnsureVisible(first, true);
            this.RefreshSelectedParagraph();
        }

        /// <summary>
        /// The tool strip menu item column import text_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemColumnImportText_Click(object sender, EventArgs e)
        {
            if (this.SubtitleListview1.SelectedIndices.Count < 1)
            {
                return;
            }

            using (var importText = new ImportText())
            {
                if (importText.ShowDialog(this) == DialogResult.OK)
                {
                    this.MakeHistoryForUndo(this._language.BeforeColumnImportText);
                    int index = this.FirstSelectedIndex;
                    for (int i = 0; i < importText.FixedSubtitle.Paragraphs.Count; i++)
                    {
                        for (int k = this._subtitle.Paragraphs.Count - 2; k > index; k--)
                        {
                            this._subtitle.Paragraphs[k + 1].Text = this._subtitle.Paragraphs[k].Text;
                        }

                        if (index + i < this._subtitle.Paragraphs.Count)
                        {
                            this._subtitle.Paragraphs[index + i].Text = string.Empty;
                        }
                    }

                    for (int i = 0; i + index < this._subtitle.Paragraphs.Count && i < importText.FixedSubtitle.Paragraphs.Count; i++)
                    {
                        this._subtitle.Paragraphs[index + i].Text = importText.FixedSubtitle.Paragraphs[i].Text;
                    }

                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                    this.RefreshSelectedParagraph();
                }
            }
        }

        /// <summary>
        /// The shift text cells down tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ShiftTextCellsDownToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (this.SubtitleListview1.SelectedIndices.Count < 1)
            {
                return;
            }

            int index = this.FirstSelectedIndex;
            int count = this.SubtitleListview1.SelectedIndices.Count;
            this.MakeHistoryForUndo(this._language.BeforeColumnShiftCellsDown);
            for (int i = 0; i < count; i++)
            {
                for (int k = this._subtitle.Paragraphs.Count - 2; k >= index; k--)
                {
                    this._subtitle.Paragraphs[k + 1].Text = this._subtitle.Paragraphs[k].Text;
                }

                if (index + i < this._subtitle.Paragraphs.Count)
                {
                    this._subtitle.Paragraphs[index + i].Text = string.Empty;
                }
            }

            this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
            this.SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
            this.RefreshSelectedParagraph();
        }

        /// <summary>
        /// The tool strip menu item insert text from sub_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemInsertTextFromSub_Click(object sender, EventArgs e)
        {
            this.openFileDialog1.Title = this._languageGeneral.OpenSubtitle;
            this.openFileDialog1.FileName = string.Empty;
            this.openFileDialog1.Filter = Utilities.GetOpenDialogFilter();
            if (this.openFileDialog1.ShowDialog(this) == DialogResult.OK)
            {
                if (!File.Exists(this.openFileDialog1.FileName))
                {
                    return;
                }

                var fi = new FileInfo(this.openFileDialog1.FileName);
                if (fi.Length > 1024 * 1024 * 10)
                {
                    // max 10 mb
                    var text = string.Format(this._language.FileXIsLargerThan10MB + Environment.NewLine + Environment.NewLine + this._language.ContinueAnyway, this.openFileDialog1.FileName);
                    if (MessageBox.Show(this, text, this.Title, MessageBoxButtons.YesNoCancel) != DialogResult.Yes)
                    {
                        return;
                    }
                }

                Encoding encoding;
                var tmp = new Subtitle();
                SubtitleFormat format = tmp.LoadSubtitle(this.openFileDialog1.FileName, out encoding, null);

                if (format != null)
                {
                    if (format.IsFrameBased)
                    {
                        tmp.CalculateTimeCodesFromFrameNumbers(this.CurrentFrameRate);
                    }
                    else
                    {
                        tmp.CalculateFrameNumbersFromTimeCodes(this.CurrentFrameRate);
                    }

                    if (Configuration.Settings.General.RemoveBlankLinesWhenOpening)
                    {
                        tmp.RemoveEmptyLines();
                    }

                    if (this.SubtitleListview1.SelectedIndices.Count < 1)
                    {
                        return;
                    }

                    this.MakeHistoryForUndo(this._language.BeforeColumnShiftCellsDown);

                    int index = this.FirstSelectedIndex;
                    for (int i = 0; i < tmp.Paragraphs.Count; i++)
                    {
                        {
                            for (int k = this._subtitle.Paragraphs.Count - 2; k > index; k--)
                            {
                                this._subtitle.Paragraphs[k + 1].Text = this._subtitle.Paragraphs[k].Text;
                            }
                        }
                    }

                    for (int i = 0; i + index < this._subtitle.Paragraphs.Count && i < tmp.Paragraphs.Count; i++)
                    {
                        this._subtitle.Paragraphs[index + i].Text = tmp.Paragraphs[i].Text;
                    }

                    if (this.IsFramesRelevant && this.CurrentFrameRate > 0)
                    {
                        this._subtitle.CalculateFrameNumbersFromTimeCodesNoCheck(this.CurrentFrameRate);
                    }

                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(index, true);
                    this.RefreshSelectedParagraph();
                }
            }
        }

        /// <summary>
        /// The tool strip menu item open keep video_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemOpenKeepVideo_Click(object sender, EventArgs e)
        {
            this.openToolStripMenuItem.Enabled = false;
            this.ReloadFromSourceView();
            this._resetVideo = false;
            this.OpenNewFile();
            this._resetVideo = true;
            this.openToolStripMenuItem.Enabled = true;
        }

        /// <summary>
        /// The change speed in percent tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void changeSpeedInPercentToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!this.IsSubtitleLoaded)
            {
                this.DisplaySubtitleNotLoadedMessage();
                return;
            }

            int lastSelectedIndex = 0;
            if (this.SubtitleListview1.SelectedItems.Count > 0)
            {
                lastSelectedIndex = this.SubtitleListview1.SelectedItems[0].Index;
            }

            this.ReloadFromSourceView();
            using (var form = new ChangeSpeedInPercent(this.SubtitleListview1.SelectedItems.Count))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    this.MakeHistoryForUndo(this._language.BeforeAdjustSpeedInPercent);
                    this.SaveSubtitleListviewIndices();
                    if (form.AdjustAllLines)
                    {
                        this._subtitle = form.AdjustAllParagraphs(this._subtitle);
                        if (this._subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle && this.SubtitleListview1.IsAlternateTextColumnVisible)
                        {
                            this._subtitleAlternate = form.AdjustAllParagraphs(this._subtitleAlternate);
                        }
                    }
                    else
                    {
                        foreach (int index in this.SubtitleListview1.SelectedIndices)
                        {
                            var p = this._subtitle.GetParagraphOrDefault(index);
                            if (p != null)
                            {
                                form.AdjustParagraph(p);
                                if (this._subtitleAlternate != null && Configuration.Settings.General.AllowEditOfOriginalSubtitle && this.SubtitleListview1.IsAlternateTextColumnVisible)
                                {
                                    var original = Utilities.GetOriginalParagraph(index, p, this._subtitle.Paragraphs);
                                    if (original != null)
                                    {
                                        form.AdjustParagraph(original);
                                    }
                                }
                            }
                        }
                    }

                    if (this.IsFramesRelevant && this.CurrentFrameRate > 0)
                    {
                        this._subtitle.CalculateFrameNumbersFromTimeCodesNoCheck(this.CurrentFrameRate);
                    }

                    this.ShowSource();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this.RestoreSubtitleListviewIndices();
                }
            }
        }

        /// <summary>
        /// The tool strip menu item avid stl_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemAvidStl_Click(object sender, EventArgs e)
        {
            var avidStl = new AvidStl();
            this.saveFileDialog1.Filter = avidStl.Name + "|*" + avidStl.Extension;
            this.saveFileDialog1.Title = this._language.SaveSubtitleAs;
            this.saveFileDialog1.DefaultExt = "*" + avidStl.Extension;
            this.saveFileDialog1.AddExtension = true;

            if (!string.IsNullOrEmpty(this._videoFileName))
            {
                this.saveFileDialog1.FileName = Path.GetFileNameWithoutExtension(this._videoFileName);
            }
            else
            {
                this.saveFileDialog1.FileName = Path.GetFileNameWithoutExtension(this._fileName);
            }

            if (!string.IsNullOrEmpty(this.openFileDialog1.InitialDirectory))
            {
                this.saveFileDialog1.InitialDirectory = this.openFileDialog1.InitialDirectory;
            }

            DialogResult result = this.saveFileDialog1.ShowDialog(this);
            if (result == DialogResult.OK)
            {
                this.openFileDialog1.InitialDirectory = this.saveFileDialog1.InitialDirectory;
                string fileName = this.saveFileDialog1.FileName;
                string ext = Path.GetExtension(fileName);
                bool extOk = ext.Equals(avidStl.Extension, StringComparison.OrdinalIgnoreCase);
                if (!extOk)
                {
                    if (fileName.EndsWith('.'))
                    {
                        fileName = fileName.Substring(0, fileName.Length - 1);
                    }

                    fileName += avidStl.Extension;
                }

                AvidStl.Save(fileName, this._subtitle);
            }
        }

        /// <summary>
        /// The column delete text only tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void columnDeleteTextOnlyToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (this.SubtitleListview1.SelectedIndices.Count < 1)
            {
                return;
            }

            foreach (int index in this.SubtitleListview1.SelectedIndices)
            {
                this._subtitle.Paragraphs[index].Text = string.Empty;
                this.SubtitleListview1.SetText(index, string.Empty);
                this.SubtitleListview1.SyntaxColorLine(this._subtitle.Paragraphs, index, this._subtitle.Paragraphs[index]);
            }

            this.RefreshSelectedParagraph();
        }

        /// <summary>
        /// The tool strip menu item batch convert_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemBatchConvert_Click(object sender, EventArgs e)
        {
            this.Visible = false;
            using (var form = new BatchConvert(this.Icon))
            {
                form.ShowDialog(this);
            }

            this.Visible = true;
        }

        /// <summary>
        /// The copy original text to current tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void copyOriginalTextToCurrentToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (this._subtitleAlternate == null || !this.SubtitleListview1.IsAlternateTextColumnVisible || this.SubtitleListview1.SelectedIndices.Count < 1)
            {
                return;
            }

            bool first = true;
            foreach (int index in this.SubtitleListview1.SelectedIndices)
            {
                var original = Utilities.GetOriginalParagraph(index, this._subtitle.Paragraphs[index], this._subtitleAlternate.Paragraphs);
                if (original != null)
                {
                    if (first)
                    {
                        this.MakeHistoryForUndo(this._language.BeforeColumnPaste);
                    }

                    this.SubtitleListview1.SetText(index, original.Text);
                    this._subtitle.Paragraphs[index].Text = original.Text;
                    this.SubtitleListview1.SyntaxColorLine(this._subtitle.Paragraphs, index, this._subtitle.Paragraphs[index]);
                    first = false;
                }
            }

            this.RefreshSelectedParagraph();
        }

        /// <summary>
        /// The tool strip menu item column_ drop down opening.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemColumn_DropDownOpening(object sender, EventArgs e)
        {
            this.copyOriginalTextToCurrentToolStripMenuItem.Visible = !string.IsNullOrEmpty(this.copyOriginalTextToCurrentToolStripMenuItem.Text) && this.SubtitleListview1.IsAlternateTextColumnVisible && this._subtitleAlternate != null;
        }

        /// <summary>
        /// The tool strip menu item merge duplicate text_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemMergeDuplicateText_Click(object sender, EventArgs e)
        {
            if (!this.IsSubtitleLoaded)
            {
                this.DisplaySubtitleNotLoadedMessage();
                return;
            }

            this.ReloadFromSourceView();
            using (var form = new MergeDoubleLines())
            {
                form.Initialize(this._subtitle);
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    this.MakeHistoryForUndo(this._language.BeforeMergeLinesWithSameText);
                    this._subtitle.Paragraphs.Clear();
                    foreach (var p in form.MergedSubtitle.Paragraphs)
                    {
                        this._subtitle.Paragraphs.Add(p);
                    }

                    this.ShowStatus(string.Format(this._language.MergedShortLinesX, form.NumberOfMerges));
                    this.SaveSubtitleListviewIndices();
                    this.ShowSource();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this.RestoreSubtitleListviewIndices();
                }
            }
        }

        /// <summary>
        /// The tool strip menu item merge lines with same time codes_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemMergeLinesWithSameTimeCodes_Click(object sender, EventArgs e)
        {
            if (!this.IsSubtitleLoaded)
            {
                this.DisplaySubtitleNotLoadedMessage();
                return;
            }

            this.ReloadFromSourceView();
            using (var form = new MergeTextWithSameTimeCodes())
            {
                form.Initialize(this._subtitle);
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    this.MakeHistoryForUndo(this._language.BeforeMergeLinesWithSameText);
                    this._subtitle.Paragraphs.Clear();
                    foreach (var p in form.MergedSubtitle.Paragraphs)
                    {
                        this._subtitle.Paragraphs.Add(p);
                    }

                    this.ShowStatus(string.Format(this._language.MergedShortLinesX, form.NumberOfMerges));
                    this.SaveSubtitleListviewIndices();
                    this.ShowSource();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this.RestoreSubtitleListviewIndices();
                }
            }
        }

        /// <summary>
        /// The tool strip menu item 2_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItem2_Click(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(this._subtitle, this.GetCurrentSubtitleFormat(), "SPUMUX", this._fileName, this._videoInfo, this._videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        /// <summary>
        /// The tool strip menu item modify selection_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemModifySelection_Click(object sender, EventArgs e)
        {
            if (!this.IsSubtitleLoaded)
            {
                this.DisplaySubtitleNotLoadedMessage();
                return;
            }

            using (var form = new ModifySelection(this._subtitle, this.SubtitleListview1))
            {
                form.ShowDialog(this);
            }
        }

        /// <summary>
        /// The tool strip menu item inverse selection_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemInverseSelection_Click(object sender, EventArgs e)
        {
            if (!this.IsSubtitleLoaded)
            {
                this.DisplaySubtitleNotLoadedMessage();
                return;
            }

            foreach (ListViewItem item in this.SubtitleListview1.Items)
            {
                item.Selected = !item.Selected;
            }
        }

        /// <summary>
        /// The tool strip menu item spell check from current line_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemSpellCheckFromCurrentLine_Click(object sender, EventArgs e)
        {
            this._spellCheckForm = null;
            this.SpellCheck(true, this.FirstSelectedIndex);
        }

        /// <summary>
        /// The tool strip menu item import x sub_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemImportXSub_Click(object sender, EventArgs e)
        {
            if (this.ContinueNewOrExit())
            {
                this.openFileDialog1.Title = this._language.OpenXSubFiles;
                this.openFileDialog1.FileName = string.Empty;
                this.openFileDialog1.Filter = this._language.XSubFiles + "|*.divx;*.avi";
                if (this.openFileDialog1.ShowDialog(this) == DialogResult.OK)
                {
                    this.ShowStatus(this._languageGeneral.PleaseWait);
                    if (this.ImportSubtitleFromDivX(this.openFileDialog1.FileName))
                    {
                        this.ShowStatus(string.Format(this._language.LoadedSubtitleX, this.openFileDialog1.FileName));
                    }
                    else
                    {
                        this.ShowStatus(string.Empty);
                        MessageBox.Show(this._language.NotAValidXSubFile);
                    }
                }
            }
        }

        /// <summary>
        /// The tool strip menu item import ocr hard sub_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemImportOcrHardSub_Click(object sender, EventArgs e)
        {
            using (var form = new HardSubExtract(this._videoFileName))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    if (!string.IsNullOrEmpty(form.OcrFileName))
                    {
                        this.MakeHistoryForUndo(this._language.BeforeAutoBalanceSelectedLines);
                        this.OpenSubtitle(form.OcrFileName, null);
                    }
                }
            }
        }

        /// <summary>
        /// The tool strip menu item export fcp i image_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemExportFcpIImage_Click(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(this._subtitle, this.GetCurrentSubtitleFormat(), "FCP", this._fileName, this._videoInfo, this._videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        /// <summary>
        /// The tool strip menu item nuendo properties click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemNuendoPropertiesClick(object sender, EventArgs e)
        {
            using (var form = new NuendoProperties())
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    Configuration.Settings.SubtitleSettings.NuendoCharacterListFile = form.CharacterListFile;
                }
            }
        }

        /// <summary>
        /// The tool strip menu item dost_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemDost_Click(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(this._subtitle, this.GetCurrentSubtitleFormat(), "DOST", this._fileName, this._videoInfo, this._videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        /// <summary>
        /// The tool strip menu item measurement converter_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemMeasurementConverter_Click(object sender, EventArgs e)
        {
            var form = new MeasurementConverter();
            form.Show(this);
        }

        /// <summary>
        /// The tool strip menu item import scene changes_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemImportSceneChanges_Click(object sender, EventArgs e)
        {
            using (var form = new ImportSceneChanges(this._videoInfo))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    this.audioVisualizer.SceneChanges = form.SceneChangesInSeconds;
                    this.ShowStatus(string.Format(this._language.XSceneChangesImported, form.SceneChangesInSeconds.Count));
                }
            }
        }

        /// <summary>
        /// The tool strip menu item remove scene changes_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemRemoveSceneChanges_Click(object sender, EventArgs e)
        {
            if (this.audioVisualizer != null && this.audioVisualizer.SceneChanges != null)
            {
                this.audioVisualizer.SceneChanges = new List<double>();
            }
        }

        /// <summary>
        /// The tool strip menu item duration bridge gaps_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemDurationBridgeGaps_Click(object sender, EventArgs e)
        {
            if (!this.IsSubtitleLoaded)
            {
                this.DisplaySubtitleNotLoadedMessage();
                return;
            }

            using (var form = new DurationsBridgeGaps(this._subtitle))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    int index = this.FirstSelectedIndex;
                    if (index < 0)
                    {
                        index = 0;
                    }

                    this.MakeHistoryForUndo(this._language.BeforeDurationsBridgeGap);
                    this._subtitle.Paragraphs.Clear();
                    foreach (var p in form.FixedSubtitle.Paragraphs)
                    {
                        this._subtitle.Paragraphs.Add(p);
                    }

                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(index);
                }
            }
        }

        /// <summary>
        /// The tool strip menu item open dvd_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemOpenDvd_Click(object sender, EventArgs e)
        {
            using (var form = new OpenVideoDvd())
            {
                if (form.ShowDialog(this) == DialogResult.OK && !string.IsNullOrEmpty(form.DvdPath))
                {
                    this.VideoFileName = form.DvdPath;
                    if (this.mediaPlayer.VideoPlayer != null)
                    {
                        this.mediaPlayer.Pause();
                        this.mediaPlayer.VideoPlayer.DisposeVideoPlayer();
                    }

                    this._endSeconds = -1;

                    this._videoInfo = new VideoInfo();
                    this._videoInfo.Width = 720;
                    this._videoInfo.Height = 576;
                    this._videoInfo.FramesPerSecond = 25;
                    this._videoInfo.VideoCodec = "MPEG2";
                    this.toolStripComboBoxFrameRate.Text = string.Format("{0:0.###}", this._videoInfo.FramesPerSecond);

                    var oldVideoPlayer = Configuration.Settings.General.VideoPlayer;
                    try
                    {
                        Configuration.Settings.General.VideoPlayer = "VLC";
                        Utilities.InitializeVideoPlayerAndContainer(this.VideoFileName, this._videoInfo, this.mediaPlayer, this.VideoLoaded, this.VideoEnded);
                        this.mediaPlayer.ShowFullscreenButton = Configuration.Settings.General.VideoPlayerShowFullscreenButton;
                        this.mediaPlayer.OnButtonClicked -= this.MediaPlayer_OnButtonClicked;
                        this.mediaPlayer.OnButtonClicked += this.MediaPlayer_OnButtonClicked;
                        this.mediaPlayer.Volume = 0;
                        this.labelVideoInfo.Text = string.Format("DVD {0}x{1} {2}", this._videoInfo.Width, this._videoInfo.Height, this._videoInfo.VideoCodec.Trim());
                        if (this._videoInfo.FramesPerSecond > 0)
                        {
                            this.labelVideoInfo.Text += string.Format(" {0:0.0##}", this._videoInfo.FramesPerSecond);
                        }
                    }
                    finally
                    {
                        Configuration.Settings.General.VideoPlayer = oldVideoPlayer;
                    }
                }
            }
        }

        /// <summary>
        /// The tool strip menu item fcp properties_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemFcpProperties_Click(object sender, EventArgs e)
        {
            using (var form = new FcpProperties())
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    Configuration.Settings.SubtitleSettings.FcpFontSize = form.FcpFontSize;
                    Configuration.Settings.SubtitleSettings.FcpFontName = form.FcpFontName;
                }
            }
        }

        /// <summary>
        /// The style tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void styleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.SortSubtitle(SubtitleSortCriteria.Style, (sender as ToolStripItem).Text);
        }

        /// <summary>
        /// The tool strip menu item focus textbox_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemFocusTextbox_Click(object sender, EventArgs e)
        {
            int index = this._subtitle.GetIndex(this.audioVisualizer.RightClickedParagraph);
            if (index >= 0)
            {
                this.SubtitleListview1.SelectIndexAndEnsureVisible(index);
            }

            this.textBoxListViewText.Focus();
            this.textBoxListViewText.SelectAll();
        }

        /// <summary>
        /// The ascending tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void AscendingToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.descendingToolStripMenuItem.Checked = false;
            this.AscendingToolStripMenuItem.Checked = true;
            this.toolsToolStripMenuItem.ShowDropDown();
            this.toolStripMenuItem1.ShowDropDown();
        }

        /// <summary>
        /// The descending tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void descendingToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.AscendingToolStripMenuItem.Checked = false;
            this.descendingToolStripMenuItem.Checked = true;
            this.toolsToolStripMenuItem.ShowDropDown();
            this.toolStripMenuItem1.ShowDropDown();
        }

        /// <summary>
        /// The export custom text format tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void exportCustomTextFormatToolStripMenuItem_Click(object sender, EventArgs e)
        {
            using (var form = new ExportCustomText(this._subtitle, this._subtitleAlternate, this._fileName))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    this.ShowStatus(form.LogMessage);
                }
            }
        }

        /// <summary>
        /// The paste into active text box.
        /// </summary>
        /// <param name="s">
        /// The s.
        /// </param>
        /// <param name="allowMultiLine">
        /// The allow multi line.
        /// </param>
        private void PasteIntoActiveTextBox(string s, bool allowMultiLine = false)
        {
            if (this.tabControlSubtitle.SelectedIndex == TabControlSourceView)
            {
                this.textBoxSource.SelectedText = s;
            }
            else
            {
                if (this.textBoxListViewTextAlternate.Visible && this.textBoxListViewTextAlternate.Enabled && this.textBoxListViewTextAlternate.Focused)
                {
                    this.textBoxListViewTextAlternate.SelectedText = s;
                    this.textBoxListViewTextAlternate.Text = this.textBoxListViewTextAlternate.Text.Insert(this.textBoxListViewTextAlternate.SelectionStart, s);
                }
                else
                {
                    if (this.SubtitleListview1.SelectedItems.Count > 1 && !this.textBoxListViewText.Focused && allowMultiLine)
                    {
                        foreach (ListViewItem item in this.SubtitleListview1.SelectedItems)
                        {
                            var p = this._subtitle.GetParagraphOrDefault(item.Index);
                            if (p == null)
                            {
                                continue;
                            }

                            p.Text = s + " " + p.Text;
                            this.SubtitleListview1.SetText(item.Index, p.Text);
                        }
                    }
                    else
                    {
                        this.textBoxListViewText.SelectedText = s;
                    }

                    this.ShowSource();
                    this.RefreshSelectedParagraph();
                }
            }
        }

        /// <summary>
        /// The left tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void leftToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.PasteIntoActiveTextBox("\u8207");
        }

        /// <summary>
        /// The righttoleft mark tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void righttoleftMarkToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.PasteIntoActiveTextBox("\u8206");
        }

        /// <summary>
        /// The start of lefttoright embedding lre tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void startOfLefttorightEmbeddingLREToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.PasteIntoActiveTextBox("\u202A");
        }

        /// <summary>
        /// The start of righttoleft embedding rle tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void startOfRighttoleftEmbeddingRLEToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.PasteIntoActiveTextBox("\u202B");
        }

        /// <summary>
        /// The start of lefttoright override lro tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void startOfLefttorightOverrideLROToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.PasteIntoActiveTextBox("\u202D");
        }

        /// <summary>
        /// The start of righttoleft override rlo tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void startOfRighttoleftOverrideRLOToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.PasteIntoActiveTextBox("\u202E");
        }

        /// <summary>
        /// The tool strip menu item rtl unicode control char_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemRtlUnicodeControlChar_Click(object sender, EventArgs e)
        {
            string rtl = "\u202B";
            int selectedIndex = this.FirstSelectedIndex;
            foreach (int index in this.SubtitleListview1.SelectedIndices)
            {
                var p = this._subtitle.Paragraphs[index];
                var text = p.Text.Replace(rtl, string.Empty);
                p.Text = rtl + text.Replace(Environment.NewLine, Environment.NewLine + rtl);
                this.SubtitleListview1.SetText(index, p.Text);
                if (index == selectedIndex)
                {
                    this.textBoxListViewText.Text = p.Text;
                }
            }

            this.RefreshSelectedParagraph();
        }

        /// <summary>
        /// The tool strip menu item import images_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemImportImages_Click(object sender, EventArgs e)
        {
            if (!this.ContinueNewOrExit())
            {
                return;
            }

            if (!string.IsNullOrEmpty(this._videoFileName) && this.mediaPlayer.VideoPlayer != null)
            {
                this.mediaPlayer.Pause();
            }

            using (var form = new ImportImages())
            {
                if (form.ShowDialog(this) == DialogResult.OK && form.Subtitle.Paragraphs.Count > 0)
                {
                    this.ImportAndOcrSrt(form.Subtitle);
                }
            }
        }

        /// <summary>
        /// The audio visualizer_ mouse enter.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void audioVisualizer_MouseEnter(object sender, EventArgs e)
        {
            if (!this.textBoxListViewText.Focused && !this.textBoxListViewTextAlternate.Focused && Configuration.Settings.VideoControls.WaveformFocusOnMouseEnter && this.audioVisualizer.WavePeaks != null && !this.audioVisualizer.Focused && this.audioVisualizer.CanFocus)
            {
                this.audioVisualizer.Focus();
            }
        }

        /// <summary>
        /// The subtitle listview 1_ mouse enter.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void SubtitleListview1_MouseEnter(object sender, EventArgs e)
        {
            if (!this.textBoxListViewText.Focused && !this.textBoxListViewTextAlternate.Focused && Configuration.Settings.VideoControls.WaveformFocusOnMouseEnter && Configuration.Settings.VideoControls.WaveformListViewFocusOnMouseEnter && !this.SubtitleListview1.Focused && this.SubtitleListview1.CanFocus)
            {
                this.SubtitleListview1.Focus();
            }
        }

        /// <summary>
        /// The tool strip button fix common errors_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripButtonFixCommonErrors_Click(object sender, EventArgs e)
        {
            this.FixCommonErrors(false);
        }

        /// <summary>
        /// The tool strip menu item export dcinema interop click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemExportDcinemaInteropClick(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(this._subtitle, this.GetCurrentSubtitleFormat(), "DCINEMA_INTEROP", this._fileName, this._videoInfo, this._videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        /// <summary>
        /// The undo from spell check.
        /// </summary>
        /// <param name="subtitle">
        /// The subtitle.
        /// </param>
        /// <returns>
        /// The <see cref="Subtitle"/>.
        /// </returns>
        internal Subtitle UndoFromSpellCheck(Subtitle subtitle)
        {
            var idx = this.FirstSelectedIndex;
            for (int i = 0; i < this._subtitle.Paragraphs.Count; i++)
            {
                if (this._subtitle.Paragraphs[i].Text != subtitle.Paragraphs[i].Text)
                {
                    this._subtitle.Paragraphs[i].Text = subtitle.Paragraphs[i].Text;
                    this.SubtitleListview1.SetText(i, this._subtitle.Paragraphs[i].Text);
                }

                if (idx == i)
                {
                    this.SubtitleListview1.SetText(idx, this._subtitle.Paragraphs[idx].Text);
                }
            }

            this.RefreshSelectedParagraph();
            return this._subtitle;
        }

        /// <summary>
        /// The check for updates tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void checkForUpdatesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                if (this._timerCheckForUpdates != null)
                {
                    this._timerCheckForUpdates.Stop();
                }
            }
            catch
            {
            }

            using (var form = new CheckForUpdates(this))
            {
                form.ShowDialog(this);
            }

            Configuration.Settings.General.LastCheckForUpdates = DateTime.Now;
        }

        /// <summary>
        /// The set video offset tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void setVideoOffsetToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(this._videoFileName) && this.mediaPlayer.VideoPlayer != null)
            {
                this.mediaPlayer.Pause();
            }

            using (var form = new SetVideoOffset())
            {
                form.VideoOffset = new TimeCode(10, 0, 0, 0);
                if (this.mediaPlayer.Offset > 0.001)
                {
                    form.VideoOffset = TimeCode.FromSeconds(this.mediaPlayer.Offset);
                }

                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    var offsetInSeconds = form.VideoOffset.TotalSeconds;
                    if (form.FromCurrentVideoPosition)
                    {
                        offsetInSeconds -= this.mediaPlayer.VideoPlayer.CurrentPosition;
                    }

                    this.mediaPlayer.Offset = offsetInSeconds;
                    if (this.audioVisualizer != null)
                    {
                        this.audioVisualizer.Offset = offsetInSeconds;
                    }
                }
            }
        }

        /// <summary>
        /// The tool strip menu item ebu properties_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemEbuProperties_Click(object sender, EventArgs e)
        {
            using (var properties = new EbuSaveOptions())
            {
                if (this._subtitle != null && this._subtitle.Header != null && (this._subtitle.Header.Contains("STL2") || this._subtitle.Header.Contains("STL3")))
                {
                    var header = Ebu.ReadHeader(Encoding.UTF8.GetBytes(this._subtitle.Header));
                    properties.Initialize(header, 0, null, this._subtitle);
                }
                else
                {
                    var header = new Ebu.EbuGeneralSubtitleInformation();
                    if (!string.IsNullOrEmpty(this._fileName) && new Ebu().IsMine(null, this._fileName))
                    {
                        properties.Initialize(header, 0, this._fileName, this._subtitle);
                    }
                    else
                    {
                        properties.Initialize(header, 0, null, this._subtitle);
                    }
                }

                properties.ShowDialog(this);
            }
        }

        /// <summary>
        /// The tool strip menu item export edl click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemExportEdlClick(object sender, EventArgs e)
        {
            using (var exportBdnXmlPng = new ExportPngXml())
            {
                exportBdnXmlPng.Initialize(this._subtitle, this.GetCurrentSubtitleFormat(), "EDL", this._fileName, this._videoInfo, this._videoFileName);
                exportBdnXmlPng.ShowDialog(this);
            }
        }

        /// <summary>
        /// The tool strip menu item add waveform batch click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void ToolStripMenuItemAddWaveformBatchClick(object sender, EventArgs e)
        {
            using (var form = new AddWaveformBatch())
            {
                form.ShowDialog(this);
            }
        }

        /// <summary>
        /// The display subtitle not loaded message.
        /// </summary>
        private void DisplaySubtitleNotLoadedMessage()
        {
            MessageBox.Show(this, this._language.NoSubtitleLoaded, this.Title, MessageBoxButtons.OK, MessageBoxIcon.Warning);
        }

        /// <summary>
        /// The tool strip menu item export bd text st_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemExportBdTextSt_Click(object sender, EventArgs e)
        {
            using (var form = new ExportTextST(this._subtitle))
            {
                form.ShowDialog(this);
            }
        }

        /// <summary>
        /// The combo box zoom item.
        /// </summary>
        private class ComboBoxZoomItem
        {
            /// <summary>
            /// Gets or sets the text.
            /// </summary>
            public string Text { get; set; }

            /// <summary>
            /// Gets or sets the zoom factor.
            /// </summary>
            public double ZoomFactor { get; set; }

            /// <summary>
            /// The to string.
            /// </summary>
            /// <returns>
            /// The <see cref="string"/>.
            /// </returns>
            public override string ToString()
            {
                return this.Text;
            }
        }

        #region Teletext

        /*
        private readonly static String[] colors = {
        "{\\c&HC0C0C0&}",   // black /gray
        "{\\c&H4040FF&}",   // red
        "{\\c&H00FF00&}",   // green
        "{\\c&H00FFFF&}",   // yellow
        "{\\c&HFF409B&}",   // blue //DM15032004 081.6 int18 changed
        "{\\c&HFF00FF&}",   // magenta
        "{\\c&HFFFF00&}",   // cyan
        "{\\c&HFFFFFF&}",   // white
        };

        public static byte ByteReverse(byte n)
        {
            n = (byte)(((n >> 1) & 0x55) | ((n << 1) & 0xaa));
            n = (byte)(((n >> 2) & 0x33) | ((n << 2) & 0xcc));
            n = (byte)(((n >> 4) & 0x0f) | ((n << 4) & 0xf0));
            return n;
        }

        private static string GetTeletext(byte[] _buffer, int offset)
        {
            string text = string.Empty;
            bool ascii = false;
            const int color = 0;
            bool toggle = false;
            for (int c = offset, i = 0; c < _buffer.Length; c++, i++)
            {
                //var char_value = _buffer[c];

                var char_value = 0x7F & ByteReverse(_buffer[c]);

                if (char_value >> 3 == 0) //0x0..7
                {
                    ascii = true;
                    text += ((color == 1) ? colors[char_value] : ""); // + (char)active_set[32];
                }
                else if (char_value >> 4 == 0) //0x8..F
                {
                    text += " "; //(char)active_set[32];
                }
                else if (char_value >> 7 == 1) //0x80..FF
                {
                    text += " "; //(char)active_set[32];
                }
                else if (char_value < 27) //0x10..1A
                {
                    ascii = false;
                    text += " "; //(char)active_set[32];
                }
                else if (char_value < 32) //0x1B..1F
                {
                    if (char_value == 0x1B) //ESC
                    {
                        if (toggle)
                        {
                            //  active_set = CharSet.getActive_G0_Set(primary_set_mapping, primary_national_set_mapping, row);
                            //  active_national_set = CharSet.getActiveNationalSubset(primary_set_mapping, primary_national_set_mapping, row);
                        }
                        else
                        {
                            //active_set = CharSet.getActive_G0_Set(secondary_set_mapping, secondary_national_set_mapping, row);
                            //active_national_set = CharSet.getActiveNationalSubset(secondary_set_mapping, secondary_national_set_mapping, row);
                        }
                        toggle = !toggle;
                    }

                    text += " "; //(char)active_set[32];
                    continue;
                }
                else if (char_value == 0x7F) //0x7F
                {
                    text += " "; // (char)active_set[32];
                    continue;
                }

                if (!ascii)
                {
                    text += " "; // (char)active_set[32];
                    continue;
                }

                //if (active_national_set != null)
                //{
                //    // all chars 0x20..7F
                //    switch (char_value) // special national characters
                //    {
                //        case 0x23:
                //            text += (char)active_national_set[0];
                //            continue loopi;
                //        case 0x24:
                //            text += (char)active_national_set[1];
                //            continue loopi;
                //        case 0x40:
                //            text += (char)active_national_set[2];
                //            continue loopi;
                //        case 0x5b:
                //            text += (char)active_national_set[3];
                //            continue loopi;
                //        case 0x5c:
                //            text += (char)active_national_set[4];
                //            continue loopi;
                //        case 0x5d:
                //            text += (char)active_national_set[5];
                //            continue loopi;
                //        case 0x5e:
                //            text += (char)active_national_set[6];
                //            continue loopi;
                //        case 0x5f:
                //            text += (char)active_national_set[7];
                //            continue loopi;
                //        case 0x60:
                //            text += (char)active_national_set[8];
                //            continue loopi;
                //        case 0x7b:
                //            text += (char)active_national_set[9];
                //            continue loopi;
                //        case 0x7c:
                //            text += (char)active_national_set[10];
                //            continue loopi;
                //        case 0x7d:
                //            text += (char)active_national_set[11];
                //            continue loopi;
                //        case 0x7e:
                //            text += (char)active_national_set[12];
                //            continue loopi;
                //    }
                //}

                text += Encoding.Default.GetString(new byte[] { (byte)char_value }); //(char)active_set[char_value];
                //continue loopi;
            }

            if (color == 1)
                return colors[7] + text.Trim();
            else
                return text;
        }
        */
        #endregion Teletext

        #region Networking

        /// <summary>
        /// The start server tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void startServerToolStripMenuItem_Click(object sender, EventArgs e)
        {
            using (var networkNew = new NetworkStart())
            {
                this._networkSession = new NikseWebServiceSession(this._subtitle, this._subtitleAlternate, this.TimerWebServiceTick, this.OnUpdateUserLogEntries);
                networkNew.Initialize(this._networkSession, this._fileName);
                if (networkNew.ShowDialog(this) == DialogResult.OK)
                {
                    if (this.GetCurrentSubtitleFormat().HasStyleSupport)
                    {
                        this.SubtitleListview1.HideExtraColumn();
                    }

                    this._networkSession.AppendToLog(string.Format(this._language.XStartedSessionYAtZ, this._networkSession.CurrentUser.UserName, this._networkSession.SessionId, DateTime.Now.ToLongTimeString()));
                    this.toolStripStatusNetworking.Visible = true;
                    this.toolStripStatusNetworking.Text = this._language.NetworkMode;
                    this.EnableDisableControlsNotWorkingInNetworkMode(false);
                    this.SubtitleListview1.ShowExtraColumn(this._language.UserAndAction);
                    this.SubtitleListview1.AutoSizeAllColumns(this);
                    this.TimerWebServiceTick(null, null);
                }
                else
                {
                    this._networkSession = null;
                }
            }
        }

        /// <summary>
        /// The join session tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void joinSessionToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this._networkSession = new NikseWebServiceSession(this._subtitle, this._subtitleAlternate, this.TimerWebServiceTick, this.OnUpdateUserLogEntries);
            using (var networkJoin = new NetworkJoin())
            {
                networkJoin.Initialize(this._networkSession);

                if (networkJoin.ShowDialog(this) == DialogResult.OK)
                {
                    this._subtitle = this._networkSession.Subtitle;
                    this._subtitleAlternate = this._networkSession.OriginalSubtitle;
                    if (this._subtitleAlternate != null && this._subtitleAlternate.Paragraphs.Count > 0)
                    {
                        this.SubtitleListview1.ShowAlternateTextColumn(this._languageGeneral.OriginalText);
                    }

                    this._fileName = networkJoin.FileName;
                    this.SetTitle();
                    this.Text = this.Title;
                    this.toolStripStatusNetworking.Visible = true;
                    this.toolStripStatusNetworking.Text = this._language.NetworkMode;
                    this.EnableDisableControlsNotWorkingInNetworkMode(false);
                    this._networkSession.AppendToLog(string.Format(this._language.XStartedSessionYAtZ, this._networkSession.CurrentUser.UserName, this._networkSession.SessionId, DateTime.Now.ToLongTimeString()));
                    this.SubtitleListview1.ShowExtraColumn(this._language.UserAndAction);
                    this.SubtitleListview1.AutoSizeAllColumns(this);
                    this._subtitleListViewIndex = -1;
                    this._oldSelectedParagraph = null;

                    if (Configuration.Settings.General.AllowEditOfOriginalSubtitle && this._subtitleAlternate != null && this._subtitleAlternate.Paragraphs.Count > 0)
                    {
                        this.buttonUnBreak.Visible = false;
                        this.buttonAutoBreak.Visible = false;
                        this.buttonSplitLine.Visible = false;

                        this.textBoxListViewText.Anchor = AnchorStyles.Left | AnchorStyles.Top | AnchorStyles.Bottom;
                        this.textBoxListViewText.Width = (this.groupBoxEdit.Width - (this.textBoxListViewText.Left + 10)) / 2;
                        this.textBoxListViewTextAlternate.Anchor = AnchorStyles.Left | AnchorStyles.Top | AnchorStyles.Bottom;
                        this.textBoxListViewTextAlternate.Left = this.textBoxListViewText.Left + this.textBoxListViewText.Width + 3;
                        this.textBoxListViewTextAlternate.Width = this.textBoxListViewText.Width;
                        this.textBoxListViewTextAlternate.Visible = true;
                        this.labelAlternateText.Text = this._languageGeneral.OriginalText;
                        this.labelAlternateText.Visible = true;
                        this.labelAlternateCharactersPerSecond.Visible = true;
                        this.labelTextAlternateLineLengths.Visible = true;
                        this.labelAlternateSingleLine.Visible = true;
                        this.labelTextAlternateLineTotal.Visible = true;

                        this.labelCharactersPerSecond.Left = this.textBoxListViewText.Left + (this.textBoxListViewText.Width - this.labelCharactersPerSecond.Width);
                        this.labelTextLineTotal.Left = this.textBoxListViewText.Left + (this.textBoxListViewText.Width - this.labelTextLineTotal.Width);
                        this.AddAlternate();
                        this.Main_Resize(null, null);
                        this._changeAlternateSubtitleToString = this._subtitleAlternate.ToText(new SubRip()).Trim();
                    }
                    else
                    {
                        this.RemoveAlternate(false);
                    }

                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(0);
                    this.TimerWebServiceTick(null, null);
                }
                else
                {
                    this._networkSession = null;
                }
            }
        }

        /// <summary>
        /// The enable disable controls not working in network mode.
        /// </summary>
        /// <param name="enabled">
        /// The enabled.
        /// </param>
        private void EnableDisableControlsNotWorkingInNetworkMode(bool enabled)
        {
            // Top menu
            this.newToolStripMenuItem.Enabled = enabled;
            this.openToolStripMenuItem.Enabled = enabled;
            this.reopenToolStripMenuItem.Enabled = enabled;
            this.toolStripMenuItemOpenContainingFolder.Enabled = enabled;
            this.toolStripMenuItemCompare.Enabled = enabled;
            this.toolStripMenuItemImportDvdSubtitles.Enabled = enabled;
            this.toolStripMenuItemSubIdx.Enabled = enabled;
            this.toolStripMenuItemImportBluRaySup.Enabled = enabled;
            this.matroskaImportStripMenuItem.Enabled = enabled;
            this.toolStripMenuItemManualAnsi.Enabled = enabled;
            this.toolStripMenuItemImportText.Enabled = enabled;
            this.toolStripMenuItemImportTimeCodes.Enabled = enabled;

            this.showHistoryforUndoToolStripMenuItem.Enabled = enabled;
            this.multipleReplaceToolStripMenuItem.Enabled = enabled;

            this.toolsToolStripMenuItem.Enabled = enabled;

            this.toolStripMenuItemSynchronization.Enabled = enabled;

            this.toolStripMenuItemAutoTranslate.Enabled = enabled;

            // Toolbar
            this.toolStripButtonFileNew.Enabled = enabled;
            this.toolStripButtonFileOpen.Enabled = enabled;
            this.toolStripMenuItemOpenKeepVideo.Enabled = enabled;
            this.toolStripMenuItemRestoreAutoBackup.Enabled = enabled;
            this.toolStripButtonVisualSync.Enabled = enabled;

            // textbox source
            this.textBoxSource.ReadOnly = !enabled;
        }

        /// <summary>
        /// The timer web service tick.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        internal void TimerWebServiceTick(object sender, EventArgs e)
        {
            if (this._networkSession == null)
            {
                return;
            }

            List<int> deleteIndices = new List<int>();
            this.NetworkGetSendUpdates(deleteIndices, 0, null);
        }

        /// <summary>
        /// The network get send updates.
        /// </summary>
        /// <param name="deleteIndices">
        /// The delete indices.
        /// </param>
        /// <param name="insertIndex">
        /// The insert index.
        /// </param>
        /// <param name="insertParagraph">
        /// The insert paragraph.
        /// </param>
        private void NetworkGetSendUpdates(List<int> deleteIndices, int insertIndex, Paragraph insertParagraph)
        {
            this._networkSession.TimerStop();

            bool doReFill = false;
            bool updateListViewStatus = false;
            this.SubtitleListview1.SelectedIndexChanged -= this.SubtitleListview1_SelectedIndexChanged;
            string message = string.Empty;

            int numberOfLines = 0;
            List<SeUpdate> updates = null;
            int numberOfRetries = 10;
            while (numberOfRetries > 0)
            {
                numberOfRetries--;
                try
                {
                    updates = this._networkSession.GetUpdates(out message, out numberOfLines);
                    numberOfRetries = 0;
                }
                catch (Exception exception)
                {
                    if (numberOfRetries <= 0)
                    {
                        if (exception.InnerException != null)
                        {
                            MessageBox.Show(string.Format(this._language.NetworkUnableToConnectToServer, exception.InnerException.Message + Environment.NewLine + exception.InnerException.StackTrace));
                        }
                        else
                        {
                            MessageBox.Show(string.Format(this._language.NetworkUnableToConnectToServer, exception.Message + Environment.NewLine + exception.StackTrace));
                        }

                        this._networkSession.TimerStop();
                        if (this._networkChat != null && !this._networkChat.IsDisposed)
                        {
                            this._networkChat.Close();
                            this._networkChat = null;
                        }

                        this._networkSession = null;
                        this.EnableDisableControlsNotWorkingInNetworkMode(true);
                        this.toolStripStatusNetworking.Visible = false;
                        this.SubtitleListview1.HideExtraColumn();
                        this._networkChat = null;
                        return;
                    }

                    Application.DoEvents();
                    System.Threading.Thread.Sleep(250);
                }
            }

            int currentSelectedIndex = -1;
            if (this.SubtitleListview1.SelectedItems.Count > 0)
            {
                currentSelectedIndex = this.SubtitleListview1.SelectedItems[0].Index;
            }

            int oldCurrentSelectedIndex = currentSelectedIndex;
            if (message == "OK")
            {
                foreach (var update in updates)
                {
                    if (!string.IsNullOrEmpty(update.Text))
                    {
                        if (!update.Text.Contains(Environment.NewLine))
                        {
                            update.Text = update.Text.Replace("\n", Environment.NewLine);
                        }

                        update.Text = WebUtility.HtmlDecode(update.Text).Replace("<br />", Environment.NewLine);
                    }

                    if (update.User.Ip != this._networkSession.CurrentUser.Ip || update.User.UserName != this._networkSession.CurrentUser.UserName)
                    {
                        if (update.Action == "USR")
                        {
                            this._networkSession.Users.Add(update.User);
                            if (this._networkChat != null && !this._networkChat.IsDisposed)
                            {
                                this._networkChat.AddUser(update.User);
                            }

                            this._networkSession.AppendToLog(string.Format(this._language.NetworkNewUser, update.User.UserName, update.User.Ip));
                        }
                        else if (update.Action == "MSG")
                        {
                            this._networkSession.ChatLog.Add(new NikseWebServiceSession.ChatEntry { User = update.User, Message = update.Text });
                            if (this._networkChat == null || this._networkChat.IsDisposed)
                            {
                                this._networkChat = new NetworkChat();
                                this._networkChat.Initialize(this._networkSession);
                                this._networkChat.Show(this);
                            }
                            else
                            {
                                this._networkChat.AddChatMessage(update.User, update.Text);
                            }

                            this._networkSession.AppendToLog(string.Format(this._language.NetworkMessage, update.User.UserName, update.User.Ip, update.Text));
                        }
                        else if (update.Action == "DEL")
                        {
                            doReFill = true;
                            this._subtitle.Paragraphs.RemoveAt(update.Index);
                            if (this._networkSession.LastSubtitle != null)
                            {
                                this._networkSession.LastSubtitle.Paragraphs.RemoveAt(update.Index);
                            }

                            this._networkSession.AppendToLog(string.Format(this._language.NetworkDelete, update.User.UserName, update.User.Ip, update.Index));
                            this._networkSession.AdjustUpdateLogToDelete(update.Index);

                            if (deleteIndices.Count > 0)
                            {
                                for (int i = deleteIndices.Count - 1; i >= 0; i--)
                                {
                                    int index = deleteIndices[i];
                                    if (index == update.Index)
                                    {
                                        deleteIndices.RemoveAt(i);
                                    }
                                    else if (index > update.Index)
                                    {
                                        deleteIndices[i] = index - 1;
                                    }
                                }
                            }

                            if (insertIndex > update.Index)
                            {
                                insertIndex--;
                            }

                            if (currentSelectedIndex >= 0 && currentSelectedIndex > update.Index)
                            {
                                currentSelectedIndex--;
                            }
                        }
                        else if (update.Action == "INS")
                        {
                            doReFill = true;
                            var p = new Paragraph(update.Text, update.StartMilliseconds, update.EndMilliseconds);
                            this._subtitle.Paragraphs.Insert(update.Index, p);
                            if (this._networkSession.LastSubtitle != null)
                            {
                                this._networkSession.LastSubtitle.Paragraphs.Insert(update.Index, new Paragraph(p));
                            }

                            this._networkSession.AppendToLog(string.Format(this._language.NetworkInsert, update.User.UserName, update.User.Ip, update.Index, update.Text.Replace(Environment.NewLine, Configuration.Settings.General.ListViewLineSeparatorString)));
                            this._networkSession.AddToWsUserLog(update.User, update.Index, update.Action, false);
                            updateListViewStatus = true;
                            this._networkSession.AdjustUpdateLogToInsert(update.Index);

                            if (deleteIndices.Count > 0)
                            {
                                for (int i = deleteIndices.Count - 1; i >= 0; i--)
                                {
                                    int index = deleteIndices[i];
                                    if (index > update.Index)
                                    {
                                        deleteIndices[i] = index + 1;
                                    }
                                }
                            }

                            if (insertIndex > update.Index)
                            {
                                insertIndex++;
                            }

                            if (currentSelectedIndex >= 0 && currentSelectedIndex > update.Index)
                            {
                                currentSelectedIndex++;
                            }
                        }
                        else if (update.Action == "UPD")
                        {
                            updateListViewStatus = true;
                            var p = this._subtitle.GetParagraphOrDefault(update.Index);
                            if (p != null)
                            {
                                p.StartTime.TotalMilliseconds = update.StartMilliseconds;
                                p.EndTime.TotalMilliseconds = update.EndMilliseconds;
                                p.Text = update.Text;
                                this.SubtitleListview1.SetTimeAndText(update.Index, p);
                                this._networkSession.AppendToLog(string.Format(this._language.NetworkUpdate, update.User.UserName, update.User.Ip, update.Index, update.Text.Replace(Environment.NewLine, Configuration.Settings.General.ListViewLineSeparatorString)));
                                this._networkSession.AddToWsUserLog(update.User, update.Index, update.Action, true);
                                updateListViewStatus = true;
                            }

                            if (this._networkSession.LastSubtitle != null)
                            {
                                p = this._networkSession.LastSubtitle.GetParagraphOrDefault(update.Index);
                                if (p != null)
                                {
                                    p.StartTime.TotalMilliseconds = update.StartMilliseconds;
                                    p.EndTime.TotalMilliseconds = update.EndMilliseconds;
                                    p.Text = update.Text;
                                }
                            }
                        }
                        else if (update.Action == "BYE")
                        {
                            if (this._networkChat != null && !this._networkChat.IsDisposed)
                            {
                                this._networkChat.RemoveUser(update.User);
                            }

                            SeUser removeUser = null;
                            foreach (var user in this._networkSession.Users)
                            {
                                if (user.UserName == update.User.UserName)
                                {
                                    removeUser = user;
                                    break;
                                }
                            }

                            if (removeUser != null)
                            {
                                this._networkSession.Users.Remove(removeUser);
                            }

                            this._networkSession.AppendToLog(string.Format(this._language.NetworkByeUser, update.User.UserName, update.User.Ip));
                        }
                        else
                        {
                            this._networkSession.AppendToLog("UNKNOWN ACTION: " + update.Action + " by " + update.User.UserName + " (" + update.User.Ip + ")");
                        }
                    }
                }

                if (numberOfLines != this._subtitle.Paragraphs.Count)
                {
                    this._subtitle = this._networkSession.ReloadSubtitle();
                    this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                    this.UpdateListviewWithUserLogEntries();
                    this._networkSession.LastSubtitle = new Subtitle(this._subtitle);
                    this._oldSelectedParagraph = null;
                    this.SubtitleListview1.SelectedIndexChanged += this.SubtitleListview1_SelectedIndexChanged;
                    this._networkSession.TimerStart();
                    this.RefreshSelectedParagraph();
                    return;
                }

                if (deleteIndices.Count > 0)
                {
                    deleteIndices.Sort();
                    deleteIndices.Reverse();
                    foreach (int i in deleteIndices)
                    {
                        this._subtitle.Paragraphs.RemoveAt(i);
                        if (this._networkSession.LastSubtitle != null && i < this._networkSession.LastSubtitle.Paragraphs.Count)
                        {
                            this._networkSession.LastSubtitle.Paragraphs.RemoveAt(i);
                        }
                    }

                    this._networkSession.DeleteLines(deleteIndices);
                    doReFill = true;
                }

                if (insertIndex >= 0 && insertParagraph != null)
                {
                    this._subtitle.Paragraphs.Insert(insertIndex, insertParagraph);
                    if (this._networkSession.LastSubtitle != null && insertIndex < this._networkSession.LastSubtitle.Paragraphs.Count)
                    {
                        this._networkSession.LastSubtitle.Paragraphs.Insert(insertIndex, insertParagraph);
                    }

                    this._networkSession.InsertLine(insertIndex, insertParagraph);
                    doReFill = true;
                }

                this._networkSession.CheckForAndSubmitUpdates(); // updates only (no inserts/deletes)
            }
            else
            {
                if (message == "Session not found!")
                {
                    message = this._networkSession.Restart();
                    if (message == "Reload")
                    {
                        this._subtitle = this._networkSession.ReloadSubtitle();
                        this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                        this.UpdateListviewWithUserLogEntries();
                        this._networkSession.LastSubtitle = new Subtitle(this._subtitle);
                        this._oldSelectedParagraph = null;
                        this.SubtitleListview1.SelectedIndexChanged += this.SubtitleListview1_SelectedIndexChanged;
                        this._networkSession.TimerStart();
                        this.RefreshSelectedParagraph();
                        return;
                    }

                    if (message == "OK")
                    {
                        this._networkSession.TimerStart();
                        this.RefreshSelectedParagraph();
                        return;
                    }
                }
                else if (message == "User not found!")
                {
                    message = this._networkSession.ReJoin();
                    if (message == "Reload")
                    {
                        this._subtitle = this._networkSession.ReloadSubtitle();
                        this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                        this.UpdateListviewWithUserLogEntries();
                        this._networkSession.LastSubtitle = new Subtitle(this._subtitle);
                        this._oldSelectedParagraph = null;
                        this.SubtitleListview1.SelectedIndexChanged += this.SubtitleListview1_SelectedIndexChanged;
                        this._networkSession.TimerStart();
                        this.RefreshSelectedParagraph();
                        return;
                    }
                }

                MessageBox.Show(message);
                this.LeaveSessionToolStripMenuItemClick(null, null);
                this.SubtitleListview1.SelectedIndexChanged += this.SubtitleListview1_SelectedIndexChanged;
                return;
            }

            if (doReFill)
            {
                this._subtitle.Renumber();
                this.SubtitleListview1.Fill(this._subtitle, this._subtitleAlternate);
                this.UpdateListviewWithUserLogEntries();

                if (oldCurrentSelectedIndex != currentSelectedIndex)
                {
                    this._oldSelectedParagraph = null;
                    this._subtitleListViewIndex = currentSelectedIndex;
                    this.SubtitleListview1.SelectIndexAndEnsureVisible(this._subtitleListViewIndex);
                }
                else if (this._oldSelectedParagraph != null)
                {
                    var p = this._subtitle.GetFirstAlike(this._oldSelectedParagraph);
                    if (p == null)
                    {
                        var tmp = new Paragraph(this._oldSelectedParagraph);
                        tmp.Text = this.textBoxListViewText.Text;
                        p = this._subtitle.GetFirstAlike(tmp);
                    }

                    if (p == null)
                    {
                        int idx = oldCurrentSelectedIndex;
                        if (idx >= this._subtitle.Paragraphs.Count)
                        {
                            idx = this._subtitle.Paragraphs.Count - 1;
                        }

                        if (idx >= 0 && idx < this._subtitle.Paragraphs.Count)
                        {
                            this.SubtitleListview1.SelectIndexAndEnsureVisible(idx);
                            this._listViewTextUndoIndex = -1;
                            this.SubtitleListView1SelectedIndexChange();
                            this.textBoxListViewText.Text = this._subtitle.Paragraphs[idx].Text;
                        }
                    }
                    else
                    {
                        this._subtitleListViewIndex = this._subtitle.GetIndex(p);
                        this.SubtitleListview1.SelectIndexAndEnsureVisible(this._subtitleListViewIndex);
                        this._listViewTextUndoIndex = -1;
                        this.SubtitleListView1SelectedIndexChange();
                    }
                }
            }
            else if (updateListViewStatus)
            {
                this.UpdateListviewWithUserLogEntries();
            }

            this._networkSession.LastSubtitle = new Subtitle(this._subtitle);
            this.SubtitleListview1.SelectedIndexChanged += this.SubtitleListview1_SelectedIndexChanged;
            this._networkSession.TimerStart();
        }

        /// <summary>
        /// The update listview with user log entries.
        /// </summary>
        private void UpdateListviewWithUserLogEntries()
        {
            this.SubtitleListview1.BeginUpdate();
            foreach (UpdateLogEntry entry in this._networkSession.UpdateLog)
            {
                this.SubtitleListview1.SetExtraText(entry.Index, entry.ToString(), Utilities.GetColorFromUserName(entry.UserName));
            }

            this.SubtitleListview1.EndUpdate();
        }

        /// <summary>
        /// The leave session tool strip menu item click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void LeaveSessionToolStripMenuItemClick(object sender, EventArgs e)
        {
            if (this._networkSession != null)
            {
                this._networkSession.TimerStop();
                this._networkSession.Leave();
            }

            if (this._networkChat != null && !this._networkChat.IsDisposed)
            {
                this._networkChat.Close();
                this._networkChat = null;
            }

            this._networkSession = null;
            this.EnableDisableControlsNotWorkingInNetworkMode(true);
            this.toolStripStatusNetworking.Visible = false;
            this.SubtitleListview1.HideExtraColumn();
            this._networkChat = null;

            var format = this.GetCurrentSubtitleFormat();
            if (format.HasStyleSupport && this._networkSession == null)
            {
                if (format.GetType() == typeof(Sami) || format.GetType() == typeof(SamiModern))
                {
                    this.SubtitleListview1.ShowExtraColumn(this._languageGeneral.Class);
                }
                else
                {
                    this.SubtitleListview1.ShowExtraColumn(this._languageGeneral.Style);
                }

                this.SubtitleListview1.DisplayExtraFromExtra = true;
            }
        }

        /// <summary>
        /// The tool strip menu item networking_ drop down opening.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripMenuItemNetworking_DropDownOpening(object sender, EventArgs e)
        {
            this.startServerToolStripMenuItem.Visible = this._networkSession == null;
            this.joinSessionToolStripMenuItem.Visible = this._networkSession == null;
            this.showSessionKeyLogToolStripMenuItem.Visible = this._networkSession != null;
            this.leaveSessionToolStripMenuItem.Visible = this._networkSession != null;
            this.chatToolStripMenuItem.Visible = this._networkSession != null;
        }

        /// <summary>
        /// The on update user log entries.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        internal void OnUpdateUserLogEntries(object sender, EventArgs e)
        {
            this.UpdateListviewWithUserLogEntries();
        }

        /// <summary>
        /// The tool strip status networking_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void toolStripStatusNetworking_Click(object sender, EventArgs e)
        {
            this.showSessionKeyLogToolStripMenuItem_Click(null, null);
        }

        /// <summary>
        /// The show session key log tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void showSessionKeyLogToolStripMenuItem_Click(object sender, EventArgs e)
        {
            using (var networkLog = new NetworkLogAndInfo())
            {
                networkLog.Initialize(this._networkSession);
                networkLog.ShowDialog(this);
            }
        }

        /// <summary>
        /// The chat tool strip menu item_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void chatToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (this._networkSession != null)
            {
                if (this._networkChat == null || this._networkChat.IsDisposed)
                {
                    this._networkChat = new NetworkChat();
                    this._networkChat.Initialize(this._networkSession);
                    this._networkChat.Show(this);
                }
                else
                {
                    this._networkChat.WindowState = FormWindowState.Normal;
                }
            }
        }

        #endregion Networking
    }
}