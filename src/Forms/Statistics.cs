// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Statistics.cs" company="">
//   
// </copyright>
// <summary>
//   The statistics.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

namespace Nikse.SubtitleEdit.Forms
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.Text;
    using System.Windows.Forms;

    using Nikse.SubtitleEdit.Core;
    using Nikse.SubtitleEdit.Logic;
    using Nikse.SubtitleEdit.Logic.SubtitleFormats;

    /// <summary>
    /// The statistics.
    /// </summary>
    public sealed partial class Statistics : PositionAndSizeForm
    {
        /// <summary>
        /// The write format.
        /// </summary>
        private const string WriteFormat = @"File generated by: Subtitle Edit
http://www.nikse.dk/subtitleedit/
https://github.com/SubtitleEdit/subtitleedit
============================= General =============================
{0}
============================= Most Used Words =============================
{1}
============================= Most Used Lines =============================
{2}";

        /// <summary>
        /// The _format.
        /// </summary>
        private SubtitleFormat _format;

        /// <summary>
        /// The _general.
        /// </summary>
        private string _general;

        /// <summary>
        /// The _l.
        /// </summary>
        private LanguageStructure.Statistics _l;

        /// <summary>
        /// The _most used lines.
        /// </summary>
        private string _mostUsedLines;

        /// <summary>
        /// The _most used words.
        /// </summary>
        private string _mostUsedWords;

        /// <summary>
        /// The _subtitle.
        /// </summary>
        private Subtitle _subtitle;

        /// <summary>
        /// Initializes a new instance of the <see cref="Statistics"/> class.
        /// </summary>
        /// <param name="subtitle">
        /// The subtitle.
        /// </param>
        /// <param name="fileName">
        /// The file name.
        /// </param>
        /// <param name="format">
        /// The format.
        /// </param>
        public Statistics(Subtitle subtitle, string fileName, SubtitleFormat format)
        {
            this.InitializeComponent();

            this._subtitle = subtitle;
            this._format = format;

            this._l = Configuration.Settings.Language.Statistics;
            if (string.IsNullOrEmpty(fileName))
            {
                this.Text = this._l.Title;
            }
            else
            {
                this.Text = string.Format(this._l.TitleWithFileName, fileName);
            }

            this.groupBoxGeneral.Text = this._l.GeneralStatistics;
            this.groupBoxMostUsed.Text = this._l.MostUsed;
            this.labelMostUsedWords.Text = this._l.MostUsedWords;
            this.labelMostUsedLines.Text = this._l.MostUsedLines;
            this.buttonExport.Text = this._l.Export;
            this.buttonOK.Text = Configuration.Settings.Language.General.Ok;
            Utilities.FixLargeFonts(this, this.buttonOK);

            this.CalculateGeneralStatistics();
            {
                this.textBoxGeneral.Text = this._general;
                this.textBoxGeneral.SelectionStart = 0;
                this.textBoxGeneral.SelectionLength = 0;
                this.textBoxGeneral.ScrollToCaret();
            }

            this.CalculateMostUsedWords();
            {
                this.textBoxMostUsedWords.Text = this._mostUsedWords;
            }

            this.CalculateMostUsedLines();
            {
                this.textBoxMostUsedLines.Text = this._mostUsedLines;
            }
        }

        /// <summary>
        /// The calculate general statistics.
        /// </summary>
        private void CalculateGeneralStatistics()
        {
            if (this._subtitle == null || this._subtitle.Paragraphs.Count == 0)
            {
                this.textBoxGeneral.Text = this._l.NothingFound;
                return;
            }

            var allText = new StringBuilder();
            int minimumLineLength = 99999999;
            int maximumLineLength = 0;
            long totalLineLength = 0;
            int minimumSingleLineLength = 99999999;
            int maximumSingleLineLength = 0;
            long totalSingleLineLength = 0;
            long totalSingleLines = 0;
            double minimumDuration = 100000000;
            double maximumDuration = 0;
            double totalDuration = 0;
            double minimumCharsSec = 100000000;
            double maximumCharsSec = 0;
            double totalCharsSec = 0;
            foreach (Paragraph p in this._subtitle.Paragraphs)
            {
                allText.Append(p.Text);

                int len = p.Text.Length;
                if (len < minimumLineLength)
                {
                    minimumLineLength = len;
                }

                if (len > maximumLineLength)
                {
                    maximumLineLength = len;
                }

                totalLineLength += len;

                double duration = p.Duration.TotalMilliseconds;
                if (duration < minimumDuration)
                {
                    minimumDuration = duration;
                }

                if (duration > maximumDuration)
                {
                    maximumDuration = duration;
                }

                totalDuration += duration;

                var charsSec = Utilities.GetCharactersPerSecond(p);
                if (charsSec < minimumCharsSec)
                {
                    minimumCharsSec = charsSec;
                }

                if (charsSec > maximumCharsSec)
                {
                    maximumCharsSec = charsSec;
                }

                totalCharsSec += charsSec;

                foreach (string line in p.Text.SplitToLines())
                {
                    len = line.Length;
                    if (len < minimumSingleLineLength)
                    {
                        minimumSingleLineLength = len;
                    }

                    if (len > maximumSingleLineLength)
                    {
                        maximumSingleLineLength = len;
                    }

                    totalSingleLineLength += len;
                    totalSingleLines++;
                }
            }

            var sb = new StringBuilder();
            int sourceLength = this._subtitle.ToText(this._format).Length;
            sb.AppendLine(string.Format(this._l.NumberOfLinesX, this._subtitle.Paragraphs.Count));
            sb.AppendLine(string.Format(this._l.LengthInFormatXinCharactersY, this._format.FriendlyName, sourceLength));
            sb.AppendLine(string.Format(this._l.NumberOfCharactersInTextOnly, allText.Length));
            sb.AppendLine(string.Format(this._l.TotalCharsPerSecond, HtmlUtil.RemoveHtmlTags(allText.ToString()).Length / (totalDuration / TimeCode.BaseUnit)));
            sb.AppendLine(string.Format(this._l.NumberOfItalicTags, Utilities.CountTagInText(allText.ToString().ToLower(), "<i>")));
            sb.AppendLine(string.Format(this._l.NumberOfBoldTags, Utilities.CountTagInText(allText.ToString().ToLower(), "<b>")));
            sb.AppendLine(string.Format(this._l.NumberOfUnderlineTags, Utilities.CountTagInText(allText.ToString().ToLower(), "<u>")));
            sb.AppendLine(string.Format(this._l.NumberOfFontTags, Utilities.CountTagInText(allText.ToString().ToLower(), "<font ")));
            sb.AppendLine(string.Format(this._l.NumberOfAlignmentTags, Utilities.CountTagInText(allText.ToString().ToLower(), "{\\a")));
            sb.AppendLine();
            sb.AppendLine(string.Format(this._l.LineLengthMinimum, minimumLineLength));
            sb.AppendLine(string.Format(this._l.LineLengthMaximum, maximumLineLength));
            sb.AppendLine(string.Format(this._l.LineLengthAverage, totalLineLength / this._subtitle.Paragraphs.Count));
            sb.AppendLine(string.Format(this._l.LinesPerSubtitleAverage, ((double)totalSingleLines) / this._subtitle.Paragraphs.Count));
            sb.AppendLine();
            sb.AppendLine(string.Format(this._l.SingleLineLengthMinimum, minimumSingleLineLength));
            sb.AppendLine(string.Format(this._l.SingleLineLengthMaximum, maximumSingleLineLength));
            sb.AppendLine(string.Format(this._l.SingleLineLengthAverage, totalSingleLineLength / totalSingleLines));
            sb.AppendLine();
            sb.AppendLine(string.Format(this._l.DurationMinimum, minimumDuration / TimeCode.BaseUnit));
            sb.AppendLine(string.Format(this._l.DurationMaximum, maximumDuration / TimeCode.BaseUnit));
            sb.AppendLine(string.Format(this._l.DurationAverage, totalDuration / this._subtitle.Paragraphs.Count / TimeCode.BaseUnit));
            sb.AppendLine();
            sb.AppendLine(string.Format(this._l.CharactersPerSecondMinimum, minimumCharsSec));
            sb.AppendLine(string.Format(this._l.CharactersPerSecondMaximum, maximumCharsSec));
            sb.AppendLine(string.Format(this._l.CharactersPerSecondAverage, totalCharsSec / this._subtitle.Paragraphs.Count));
            sb.AppendLine();
            this._general = sb.ToString().Trim();
        }

        /// <summary>
        /// The statistics_ key down.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void Statistics_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Escape)
            {
                this.DialogResult = DialogResult.Cancel;
            }
            else if (e.KeyData == (Keys.Control | Keys.C))
            {
                Clipboard.SetText(string.Format(WriteFormat, this._general, this._mostUsedWords, this._mostUsedLines), TextDataFormat.UnicodeText);
            }
        }

        /// <summary>
        /// The most used words add.
        /// </summary>
        /// <param name="hashtable">
        /// The hashtable.
        /// </param>
        /// <param name="lastLine">
        /// The last line.
        /// </param>
        private static void MostUsedWordsAdd(Dictionary<string, string> hashtable, string lastLine)
        {
            if (lastLine.Contains("< "))
            {
                lastLine = HtmlUtil.FixInvalidItalicTags(lastLine);
            }

            lastLine = lastLine.Trim('\'');
            lastLine = lastLine.Replace("\"", string.Empty);
            lastLine = lastLine.Replace("<i>", string.Empty);
            lastLine = lastLine.Replace("</i>", ".");
            lastLine = lastLine.Replace("<I>", string.Empty);
            lastLine = lastLine.Replace("</I>", ".");
            lastLine = lastLine.Replace("<b>", string.Empty);
            lastLine = lastLine.Replace("</b>", ".");
            lastLine = lastLine.Replace("<B>", string.Empty);
            lastLine = lastLine.Replace("</B>", ".");
            lastLine = lastLine.Replace("<u>", string.Empty);
            lastLine = lastLine.Replace("</u>", ".");
            lastLine = lastLine.Replace("<U>", string.Empty);
            lastLine = lastLine.Replace("</U>", ".");

            var idx = lastLine.IndexOf("<font", StringComparison.OrdinalIgnoreCase);
            var error = false;
            while (idx >= 0)
            {
                var endIdx = lastLine.IndexOf('>', idx + 5);
                if (endIdx < idx)
                {
                    error = !error;
                    break;
                }

                endIdx++;
                lastLine = lastLine.Remove(idx, endIdx - idx);
                idx = lastLine.IndexOf("<font", StringComparison.OrdinalIgnoreCase);
            }

            if (!error)
            {
                lastLine = lastLine.Replace("</font>", ".");
            }

            string[] words = lastLine.Split(new[] { ' ', ',', '!', '?', '.', ':', ';', '-', '_', '@', '<', '>', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' }, StringSplitOptions.RemoveEmptyEntries);

            foreach (string word in words)
            {
                string s = word.Trim();

                if (s.Length > 1 && hashtable.ContainsKey(s))
                {
                    int hits = int.Parse(hashtable[s]);
                    hits++;
                    hashtable[s] = hits.ToString(CultureInfo.InvariantCulture);
                }
                else if (s.Length > 1)
                {
                    hashtable.Add(s, "1");
                }
            }
        }

        /// <summary>
        /// The most used lines add.
        /// </summary>
        /// <param name="hashtable">
        /// The hashtable.
        /// </param>
        /// <param name="lastLine">
        /// The last line.
        /// </param>
        private static void MostUsedLinesAdd(Dictionary<string, string> hashtable, string lastLine)
        {
            lastLine = lastLine.Trim('\'');
            lastLine = lastLine.Replace("\"", string.Empty);
            lastLine = lastLine.Replace("<i>", string.Empty);
            lastLine = lastLine.Replace("</i>", ".");
            lastLine = lastLine.Replace("<I>", string.Empty);
            lastLine = lastLine.Replace("</I>", ".");
            lastLine = lastLine.Replace("<b>", string.Empty);
            lastLine = lastLine.Replace("</b>", ".");
            lastLine = lastLine.Replace("<B>", string.Empty);
            lastLine = lastLine.Replace("</B>", ".");
            lastLine = lastLine.Replace("<u>", string.Empty);
            lastLine = lastLine.Replace("</u>", ".");
            lastLine = lastLine.Replace("<U>", string.Empty);
            lastLine = lastLine.Replace("</U>", ".");
            lastLine = lastLine.Replace('!', '.');
            lastLine = lastLine.Replace('?', '.');
            lastLine = lastLine.Replace("...", ".");
            lastLine = lastLine.Replace("..", ".");
            lastLine = lastLine.Replace('-', ' ');
            lastLine = lastLine.FixExtraSpaces();
            string[] lines = lastLine.Split('.');

            foreach (string line in lines)
            {
                string s = line.Trim();

                if (hashtable.ContainsKey(s))
                {
                    int hits = int.Parse(hashtable[s]);
                    hits++;
                    hashtable[s] = hits.ToString(CultureInfo.InvariantCulture);
                }
                else if (s.Length > 0 && s.Contains(' '))
                {
                    hashtable.Add(s, "1");
                }
            }
        }

        /// <summary>
        /// The calculate most used words.
        /// </summary>
        private void CalculateMostUsedWords()
        {
            var hashtable = new Dictionary<string, string>();

            foreach (Paragraph p in this._subtitle.Paragraphs)
            {
                MostUsedWordsAdd(hashtable, p.Text);
            }

            var sortedTable = new SortedDictionary<string, string>();
            foreach (KeyValuePair<string, string> item in hashtable)
            {
                if (int.Parse(item.Value) > 1)
                {
                    string s = item.Value;
                    while (s.Length < 4)
                    {
                        s = "0" + s;
                    }

                    sortedTable.Add(s + "_" + item.Key, item.Value + ": " + item.Key);
                }
            }

            var sb = new StringBuilder();
            if (sortedTable.Count > 0)
            {
                string temp = string.Empty;
                foreach (KeyValuePair<string, string> item in sortedTable)
                {
                    temp = item.Value + Environment.NewLine + temp;
                }

                sb.AppendLine(temp);
            }
            else
            {
                sb.AppendLine(this._l.NothingFound);
            }

            this._mostUsedWords = sb.ToString();
        }

        /// <summary>
        /// The calculate most used lines.
        /// </summary>
        private void CalculateMostUsedLines()
        {
            var hashtable = new Dictionary<string, string>();

            foreach (Paragraph p in this._subtitle.Paragraphs)
            {
                MostUsedLinesAdd(hashtable, p.Text.Replace(Environment.NewLine, " ").Replace("  ", " "));
            }

            SortedDictionary<string, string> sortedTable = new SortedDictionary<string, string>();
            foreach (KeyValuePair<string, string> item in hashtable)
            {
                if (int.Parse(item.Value) > 1)
                {
                    string s = item.Value;
                    while (s.Length < 4)
                    {
                        s = "0" + s;
                    }

                    sortedTable.Add(s + "_" + item.Key, item.Value + ": " + item.Key);
                }
            }

            var sb = new StringBuilder();
            if (sortedTable.Count > 0)
            {
                string temp = string.Empty;
                foreach (KeyValuePair<string, string> item in sortedTable)
                {
                    temp = item.Value + Environment.NewLine + temp;
                }

                sb.AppendLine(temp);
            }
            else
            {
                sb.AppendLine(this._l.NothingFound);
            }

            this._mostUsedLines = sb.ToString();
        }

        /// <summary>
        /// The button o k_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void buttonOK_Click(object sender, EventArgs e)
        {
            this.DialogResult = DialogResult.OK;
        }

        /// <summary>
        /// The button export_ click.
        /// </summary>
        /// <param name="sender">
        /// The sender.
        /// </param>
        /// <param name="e">
        /// The e.
        /// </param>
        private void buttonExport_Click(object sender, EventArgs e)
        {
            var saveFile = new SaveFileDialog { Filter = "Text files (*.txt)|*.txt|NFO files (*.nfo)|*.nfo" };
            if (saveFile.ShowDialog() == DialogResult.OK)
            {
                string fileName = saveFile.FileName;
                var statistic = string.Format(WriteFormat, this._general, this._mostUsedWords, this._mostUsedLines);
                System.IO.File.WriteAllText(fileName, statistic);
            }
        }
    }
}